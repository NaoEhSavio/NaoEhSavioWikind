// Main : _
(Main) = (HVM.log @arg1 @arg5 arg1 @arg1 @arg2 (L.VarTable.get (L.VarTable.set (L.VarTable.set (L.VarTable.new) 1 arg1) 2 arg2) 1))

// L.VarTable : Type
(L.VarTable) = (List (L.VarTable.Entry))

// L.VarTable.new : (L.VarTable)
(L.VarTable.new) = (List.nil)

// L.VarTable.get (table: (L.VarTable)) (name: U60) : (L.Term)
(L.VarTable.get (List.cons (Pair.new v.key v.term) tail) key) = (U60.if (== v.key key) v.term (L.VarTable.get tail key))
(L.VarTable.get (List.nil) name) = L.Term.default

// L.VarTable.set (table: (L.VarTable)) (name: U60) (value: (L.Term)) : (L.VarTable)
(L.VarTable.set (List.cons (Pair.new v.key v.term) tail) name value) = (U60.if (== v.key name) (List.cons (Pair.new v.key value) (L.VarTable.set tail name value)) (List.cons (Pair.new v.key v.term) (L.VarTable.set tail name value)))
(L.VarTable.set (List.nil) name value) = (List.cons (Pair.new name value) (List.nil))

// L.VarTable.Entry : Type
(L.VarTable.Entry) = (Pair 0 (L.Term))

// U60.if -(r: Type) (n: U60) (t: r) (f: r) : r
(U60.if 0 t f) = f
(U60.if n t f) = t
