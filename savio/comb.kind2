#inline
List <a: Type> : Type
List.nil <a> : List a  
List.cons <a> (head: a) (tail: List a) : List a  

#kdl_name = If
#kdl_erase
U60.if <r: Type> (n: U60) (t: r) (f: r) : r
U60.if 0 t f = f
U60.if n t f = t

List.length <a> (xs: List a) : U60
List.length a (List.nil t)            = 0
List.length a (List.cons t head tail) = (+ (List.length a tail) 1)

List.delete (f: U60 ) (xs: List U60) : List U60
List.delete f (List.nil )         = List.nil
List.delete f (List.cons head tail) =
  U60.if (f) List.nil (List.cons head (List.delete f tail)) 
  
List.delete_all (v: U60) (s: List U60) : List U60
List.delete_all v (List.nil) = List.nil 
List.delete_all v (List.cons  head tail) = if (U60.equal v head) {(List.delete_all v tail)} else {(List.cons U60 head (List.delete_all v tail))}

// Loto.list_result : List (List U60) {
//   do List {
//     let u = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     ask a = u
//     ask b = u
//     ask c = u
//     // ask c = (List.delete (x => (| (==  a x) (==  b x))) u)
//     // ask d = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask e = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask f = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask g = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask h = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask i = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask j = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask k = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask l = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask m = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask n = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask o = [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
//     // ask b = List.delete (x => (==  a x)) [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     // ask c = List.delete (x =>  (& (==  a x) (==  b x))) [ 1,  2,  3, 4, 5, 6, 7, 8, 9 , 10 , 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
//     let c = return [a, b, c]
//   }
// }
// Loto.list_result : List (List U60) {
//   (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(a => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(b => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(c => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(d => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(e => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(f => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(g => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(h => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(i => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(j => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(k => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(l => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(m => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(n => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
// 	(o => [[a, b, c, d, e, f, g, h, i, j, k, l, m, n, o]]))))))))))))))))))))))))))))))
// }
Loto.list_result : List U60 {
  (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
	(a => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
	(b => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
	(c => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
	(d => (List.bind [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] 
	(o => (List.delete (| (| (| (| (== o a) (== o b)) (| (== o c) (== o d))) (| (| (== a b) (== a c)) (| (== a d) (== b c)))) (| (== b d) (== c d))) [o,a,b,c,d])))))))))))
}
// Eql : U60 {
//   (| 
//     (| 
//       (| (| (== o a) (== o b)) (| (== o c) (== o d))) 
//       (| (| (== a b) (== a c)) (| (== a d) (== b c)))) 
//     (| 
//       (== b d) (== c d)))
// }

// (| (| (| (== o a) (== o b)) (| (== o c) (== o d)) (| (== a b) (== a c)) (| (== a d) (== b c))) (| (== b d) (== c d)))
// (== o a)
// (== o b)
// (== o c)
// (== o d)
// (== o e)
// (== o f)
// (== o g)
// (== o h)
// (== o i)
// (== o j)
// (== o k)
// (== o l)
// (== o m)
// (== o n)
// (== a b)
// (== a c)
// (== a d)
// (== a e)
// (== a f)
// (== a g)
// (== a h)
// (== a i)
// (== a j)
// (== a k)
// (== a l)
// (== a m)
// (== a n)
// (== b c)
// (== b d)
// (== b e)
// (== b f)
// (== b g)
// (== b h)
// (== b i)
// (== b j)
// (== b k)
// (== b l)
// (== b m)
// (== b n)
// (== c d)
// (== c e)
// (== c f)
// (== c g)
// (== c h)
// (== c i)
// (== c j)
// (== c k)
// (== c l)
// (== c m)
// (== c n)
// (== d e)
// (== d f)
// (== d g)
// (== d h)
// (== d i)
// (== d j)
// (== d k)
// (== d l)
// (== d m)
// (== d n)
// (== e f)
// (== f g)
// (== g h)
// (== h i)
// (== i j)
// (== j k)
// (== k l)
// (== l m)
// (== m n)
U60.interval (start: U60) (stop: U60) (step: U60) : List U60{
	U60.if (>= start stop) (List.nil U60) (
		List.cons (+ start step) (U60.interval (+ start step) stop step)
	)
}
U60.fac (n: U60) : U60
U60.fac 0 = 1
U60.fac n = (* n (U60.fac (- n 1)))

U60.combination (n: U60) (p: U60) : U60
U60.combination n 0 = 1
U60.combination n 1 = n
U60.combination n p = 
let aux = U60.if (> (- n p) p) (- n p) p
U60.if (>= n p) (/ (List.fold (a => b => (* a b)) (U60.interval aux n 1) 1) (U60.fac (- n aux))) (0)





Main {
	U60.combination 3 2 
  // List.length Loto.list_result
  // Loto.list_result
}