// From: https://www.youtube.com/watch?v=yZyx9gHhRXM

// A cat is represented by its position
Cat: Type {
  Pos
}

Pos: Type {
  Box
}

// A position can be one of 5 boxes
type Box {
  0
  1
  2
  3
  4
}

// Every turn, the cat can move Move.left or Move.right
type Move {
  left
  right
}

// A cat has a pre-defined (but unknown) infinite list of moves
type Moves {
  next (head: Move) (tail: Moves) 
}
// A strategy is a sequence of positions where we will look for the cat
Strategy: Type {
  Data.List Pos
}

// Two positions are equal if they're the same
Pos.equal (a: Pos) (b: Pos) : Data.Bool
Pos.equal Box.0 Box.0 = Data.Bool.true
Pos.equal Box.1 Box.1 = Data.Bool.true
Pos.equal Box.2 Box.2 = Data.Bool.true
Pos.equal Box.3 Box.3 = Data.Bool.true
Pos.equal Box.4 Box.4 = Data.Bool.true
Pos.equal a     b     = Data.Bool.false

// Moves a cat to the next position
Move.apply (move: Move) (cat: Cat) : Cat
Move.apply m Box.0 = Box.1
Move.apply Move.left  Box.1 = Box.0
Move.apply Move.right Box.1 = Box.2
Move.apply Move.left  Box.2 = Box.1
Move.apply Move.right Box.2 = Box.3
Move.apply Move.left  Box.3 = Box.2
Move.apply Move.right Box.3 = Box.4
Move.apply m  Box.4 = Box.3


// Every turn, we open a box.
// If the cat is there, we win, 
// Otherwise, the cat moves to an adjacent box.
// If we're out of moves, we lose.
Play (cat: Cat) (moves: Moves) (strat: Data.List Pos) : Data.Bool
Play cat (Moves.next move moves) Data.List.nil = Data.Bool.false
Play cat (Moves.next move moves) (Data.List.cons open strat) =
  if Pos.equal cat open {
    Data.Bool.true
  } else {
    Play (Move.apply move cat) moves strat
  }

// Theorem: for every any cat position, and for any possible path
// that the cat takes, there is a strategy that finds the cat.
WinningStrategy (cat: Pos) (moves: Moves) : [strat: Strategy] -> (Prop.Equal Data.Bool (Play cat moves strat) Data.Bool.true)
WinningStrategy Box.0 (Moves.next head tail)= $ [Box.0] Prop.Equal.refl
WinningStrategy Box.1 (Moves.next head tail)= $ [Box.1] Prop.Equal.refl
WinningStrategy Box.2 (Moves.next head tail)= $ [Box.2] Prop.Equal.refl
WinningStrategy Box.3 (Moves.next head tail)= $ [Box.3] Prop.Equal.refl
WinningStrategy Box.4 (Moves.next head tail)= $ [Box.4] Prop.Equal.refl


// Next level: proving that WinningStrategy is optimal