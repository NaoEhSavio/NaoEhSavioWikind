AddNat = λm λn
    (λf λx (m f (n f x)))

NatZero = λf λx (x)
NatOne = λf λx (f x)

(NatToChurch 0) = (λf λx (x))
(NatToChurch n) =
    let next = (NatToChurch (- n 1))
    (λf λx (f (next f x)))

(ChurchToNat a) =  (a (λb (+ b 1)) 0)
(OnePlusOne) =
    let one = NatOne
    let add = AddNat
    (add one one)

OnePlusOneTwice =
    let f = OnePlusOne
    let g = OnePlusOne
    let add = AddNat
    (add g f)

(OnePlusOne) =
    let one = NatOne
    let add = AddNat
    (add one one)


C0 = λf λx (x)
C1 = λf λx (f x)
Cadd = λm λn (λf λx (m f (n f x)))

(CToNat a) =  (a (λb (+ b 1)) 0)

(C2) = ((Cadd) C1 C1)

C4 = ((Cadd) C2 C2)

// (Main) = (CToNat C4)

// (Main) = (CToNat ((Cadd) C2 C2))

// (Main) =
//     let f = OnePlusOne
//     let g = OnePlusOne
//     let add = AddNat
//     let h = OnePlusOneTwice
//     ((ChurchToNat h) (ChurchToNat (add g f)))