

(List.fold func [] b) = b
(List.fold func (List.cons head tail) b) = (func head (List.fold func tail b))

(U60.fac 0) = 1
(U60.fac n) = (* n (U60.fac (- n 1)))

(U60.if 0 t f) = f
(U60.if n t f) = t

(U60.interval start stop step) = (U60.if (>= start stop) [] (List.cons (+ start step) (U60.interval (+ start step) stop step)))

(List.bind xs f) = (List.flatten (List.map xs f))

(List.map [] f) = []
(List.map (List.cons head tail) f) = (CONS (f head) (List.map tail f))

(List.concat [] ys) = ys
(List.concat (List.cons head tail) ys) = (CONS head (List.concat tail ys))

(List.flatten []) = []
(List.flatten (List.cons head tail)) = (List.concat head (List.flatten tail))

(List.delete f []) = []
(List.delete f (List.cons head tail)) = (U60.if (f head) [] (CONS head (List.delete f tail)))

(List.length []) = 0
(List.length (List.cons head tail)) = (+ (List.length tail) 1)

(U60.comb n p) = 
	let aux = (U60.if (> (- n p) p) (- n p) p); 
	let cop = (List.fold λa λb (* a b) (U60.interval aux n 1) 1); 
	(U60.if (>= n p) (/ cop (U60.fac (- n aux))) 0)

// Strict constructors
(CONS !a !b) = (List.cons a b)

(Comb []) = []
(Comb xs) = (List.bind xs 
λa (List.bind (List.delete λx (== a x) xs) 
λb (List.bind (List.delete λx (| (== b x) (== a x)) xs) 
λc (List.bind (List.delete λx (| (| (== b x) (== a x)) (== c x)) xs) 
λd (List.bind (List.delete λx (| (| (== b x) (== a x)) (| (== c x) (== d x))) xs) 
λe (List.bind (List.delete λx (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (== e x)) xs) 
λf (List.bind (List.delete λx (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (== e x) (== f x))) xs) 
λg (List.bind (List.delete λx (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (== g x))) xs) 
λh (List.bind (List.delete λx (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) xs) 
λi (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (== i x)) xs) 
λj (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (| (== i x) (== j x))) xs) 
λk (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (| (| (== i x) (== j x)) (== k x))) xs) 
λl (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (| (| (== i x) (== j x)) (| (== k x) (== l x)))) xs) 
λm (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (| (| (| (== i x) (== j x)) (| (== k x) (== l x))) (== m x))) xs) 
λn (List.bind (List.delete λx (| (| (| (| (== a x) (== b x)) (| (== c x) (== d x))) (| (| (== e x) (== f x)) (| (== g x) (== h x)))) (| (| (| (== i x) (== j x)) (| (== k x) (== l x))) (| (== m x) (== n x)))) xs) 
λo [[o, n, m, l, k, j, i, h, g, f, e, d, c, b, a]])))))))))))))))


(Main) = 
	let a = (U60.comb 25 15); 
	let b = (Comb [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]); 
	let c = (List.length b);
	c
	// (List.length (Comb [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20]))
	// (List.length (Comb [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20]))