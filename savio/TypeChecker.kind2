#axiom
Kind.Term.FN1 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) : (Kind.Term)

#axiom
String.cons. : (Kind.Name)

#axiom
Kind.Axiom.Compare (fst: (Kind.Name)) (snd: (Kind.Name)) : (Bool)

#kdl_name = List_reverse
List.reverse <a> (xs: (List a)) : (List a)
List.reverse a xs = (List.reverse.go xs (List.nil))

#kdl_name = List_drop
List.drop <a> (xs: (List a)) (n: (Nat)) : (List a)
List.drop a xs (Nat.zero) = xs
List.drop a (List.cons t head tail) (Nat.succ pred) = (List.drop tail pred)
List.drop a xs _ = xs

Kind.Term.replace (term: (Kind.Term)) (index: U60) (value: (Kind.Term)) : (Kind.Term)
Kind.Term.replace (Kind.Term.typ orig) idx val = (Kind.Term.typ orig)
Kind.Term.replace (Kind.Term.var orig name index) idx val = (if (U60.equal idx index) {val} else {(Kind.Term.var orig name index)})
Kind.Term.replace (Kind.Term.all orig name typ body) idx val = (Kind.Term.all orig name (Kind.Term.replace typ idx val) (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.lam orig name body) idx val = (Kind.Term.lam orig name (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.let orig name expr body) idx val = (Kind.Term.let orig name (Kind.Term.replace expr idx val) (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.ann orig expr typ) idx val = (Kind.Term.ann orig (Kind.Term.replace expr idx val) (Kind.Term.replace typ idx val))
Kind.Term.replace (Kind.Term.sub orig name indx redx expr) idx val = (Kind.Term.sub orig name indx redx (Kind.Term.replace expr idx val))
Kind.Term.replace (Kind.Term.app orig expr typ) idx val = (Kind.Term.app orig (Kind.Term.replace expr idx val) (Kind.Term.replace typ idx val))
Kind.Term.replace (Kind.Term.hlp orig) idx val = (Kind.Term.hlp orig)
Kind.Term.replace (Kind.Term.U60 orig) idx val = (Kind.Term.U60 orig)
Kind.Term.replace (Kind.Term.u60 orig num) idx val = (Kind.Term.u60 orig num)
Kind.Term.replace (Kind.Term.F60 orig) idx val = (Kind.Term.F60 orig)
Kind.Term.replace (Kind.Term.f60 orig num) idx val = (Kind.Term.f60 orig num)
Kind.Term.replace (Kind.Term.op2 orig op left right) idx val = (Kind.Term.op2 orig op (Kind.Term.replace left idx val) (Kind.Term.replace right idx val))
Kind.Term.replace (Kind.Term.ct0 ctid orig) idx val = (Kind.Term.ct0 ctid orig)
Kind.Term.replace (Kind.Term.ct1 ctid orig x0) idx val = (Kind.Term.ct1 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.ct2 ctid orig x0 x1) idx val = (Kind.Term.ct2 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val))
Kind.Term.replace (Kind.Term.ct3 ctid orig x0 x1 x2) idx val = (Kind.Term.ct3 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val))
Kind.Term.replace (Kind.Term.ct4 ctid orig x0 x1 x2 x3) idx val = (Kind.Term.ct4 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val))
Kind.Term.replace (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) idx val = (Kind.Term.ct5 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val))
Kind.Term.replace (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) idx val = (Kind.Term.ct6 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val))
Kind.Term.replace (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) idx val = (Kind.Term.ct7 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val))
Kind.Term.replace (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) idx val = (Kind.Term.ct8 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val))
Kind.Term.replace (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) idx val = (Kind.Term.ct9 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val))
Kind.Term.replace (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) idx val = (Kind.Term.ct10 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val))
Kind.Term.replace (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) idx val = (Kind.Term.ct11 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val))
Kind.Term.replace (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) idx val = (Kind.Term.ct12 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val))
Kind.Term.replace (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) idx val = (Kind.Term.ct13 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val))
Kind.Term.replace (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) idx val = (Kind.Term.ct14 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val))
Kind.Term.replace (Kind.Term.ct15 ctid orig x0) idx val = (Kind.Term.ct15 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.ct16 ctid orig x0) idx val = (Kind.Term.ct16 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.fn0 fnid orig) idx val = (Kind.Term.FN0 fnid orig)
Kind.Term.replace (Kind.Term.fn1 fnid orig x0) idx val = (Kind.Term.FN1 fnid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.fn2 fnid orig x0 x1) idx val = (Kind.Term.FN2 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val))
Kind.Term.replace (Kind.Term.fn3 fnid orig x0 x1 x2) idx val = (Kind.Term.FN3 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val))
Kind.Term.replace (Kind.Term.fn4 fnid orig x0 x1 x2 x3) idx val = (Kind.Term.FN4 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val))
Kind.Term.replace (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) idx val = (Kind.Term.FN5 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val))
Kind.Term.replace (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) idx val = (Kind.Term.FN6 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val))
Kind.Term.replace (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) idx val = (Kind.Term.FN7 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val))
Kind.Term.replace (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) idx val = (Kind.Term.FN8 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val))
Kind.Term.replace (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) idx val = (Kind.Term.FN9 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val))
Kind.Term.replace (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) idx val = (Kind.Term.FN10 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val))
Kind.Term.replace (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) idx val = (Kind.Term.FN11 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val))
Kind.Term.replace (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) idx val = (Kind.Term.FN12 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val))
Kind.Term.replace (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) idx val = (Kind.Term.FN13 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val))
Kind.Term.replace (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) idx val = (Kind.Term.FN14 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val))
Kind.Term.replace (Kind.Term.fn15 ctid orig x0) idx val = (Kind.Term.FN15 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.fn16 ctid orig x0) idx val = (Kind.Term.FN16 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) idx val = (Kind.Term.args15 (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val) (Kind.Term.replace x14 idx val))
Kind.Term.replace (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) idx val = (Kind.Term.args16 (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val) (Kind.Term.replace x14 idx val) (Kind.Term.replace x15 idx val))
Kind.Term.replace (Kind.Term.hol orig numb) idx val = (Kind.Term.hol orig numb)

type Kind.Equation {
  new (ctx: (Kind.Context)) (orig: U60) (left: (Kind.Term)) (right: (Kind.Term))
}

#derive[match]
type String {
  nil
  cons (head: (Char)) (tail: (String))
}

Kind.Checker.equal.hol (orig: U60) (numb: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.hol a.orig a.numb b = (do Kind.Checker {ask got = (Kind.Checker.look a.numb);
 ask res = (Kind.Checker.equal.hol.val got a.orig a.numb b);
 return res
})

Kind.Checker.unify.go (equations: (List (Kind.Equation))) (unsolved: (List (Kind.Equation))) (changed: (Bool)) : (Kind.Checker (Unit))
Kind.Checker.unify.go (List.nil t) (List.nil t1) changed = (Kind.Checker.pure (Unit.new))
Kind.Checker.unify.go (List.nil t) unsolved (Bool.true) = (Kind.Checker.unify.go unsolved (List.nil) (Bool.false))
Kind.Checker.unify.go (List.nil t) unsolved (Bool.false) = (Kind.Checker.unify.go.fail unsolved)
Kind.Checker.unify.go (List.cons t (Kind.Equation.new ctx orig left right) equations) unsolved changed = (do Kind.Checker {ask is_equal = (Kind.Checker.with_context (Kind.Checker.equal (Kind.Term.eval left) (Kind.Term.eval right)) ctx);
 let unify = ((if is_equal {((equations : (List (Kind.Equation))) => ((unsolved : (List (Kind.Equation))) => (Kind.Checker.unify.go equations unsolved (Bool.true))))} else {((equations : (List (Kind.Equation))) => ((unsolved : (List (Kind.Equation))) => (let eqt = (Kind.Equation.new ctx orig left right); (Kind.Checker.unify.go equations (List.cons eqt unsolved) changed))))}) :: ((List (Kind.Equation)) -> (List (Kind.Equation)) -> (Kind.Checker (Unit))));
 (unify equations unsolved)
})

#kdl_name = Str_join
String.join (sep: (String)) (list: (List (String))) : (String)
String.join sep list = (String.intercalate sep list)

#kdl_name = List_concat
List.concat <a> (xs: (List a)) (ys: (List a)) : (List a)
List.concat a (List.nil t) ys = ys
List.concat a (List.cons t head tail) ys = (List.cons a head (List.concat a tail ys))

Kind.Coverage.drop_rule (n: U60) (rule: (Kind.Rule)) : (Kind.Rule)
Kind.Coverage.drop_rule 0 rule = rule
Kind.Coverage.drop_rule n (Kind.Rule.lhs _ rule) = (Kind.Coverage.drop_rule (- n 1) rule)

#axiom
Kind.Axiom.ArgsCount (fnid: (Kind.Name)) : U60

Kind.Term.eval_sub (orig: U60) (name: U60) (indx: U60) (redx: U60) (expr: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_sub orig name indx redx expr = expr

Kind.Error.quote (err: (Kind.Error)) (sub: (Kind.Subst)) : (Kind.Error.Quoted)
Kind.Error.quote (Kind.Error.unbound_variable ctx orig) sub = (Kind.Error.Quoted.unbound_variable (Kind.Context.quote ctx sub) orig)
Kind.Error.quote (Kind.Error.cant_infer_hole ctx orig) sub = (Kind.Error.Quoted.cant_infer_hole (Kind.Context.quote ctx sub) orig)
Kind.Error.quote (Kind.Error.cant_infer_lambda ctx orig) sub = (Kind.Error.Quoted.cant_infer_lambda (Kind.Context.quote ctx sub) orig)
Kind.Error.quote (Kind.Error.invalid_call ctx orig) sub = (Kind.Error.Quoted.invalid_call (Kind.Context.quote ctx sub) orig)
Kind.Error.quote (Kind.Error.impossible_case ctx orig typ term) sub = (Kind.Error.Quoted.impossible_case (Kind.Context.quote ctx sub) orig (Kind.Term.quote typ sub) (Kind.Term.quote term sub))
Kind.Error.quote (Kind.Error.inspection ctx orig term) sub = (Kind.Error.Quoted.inspection (Kind.Context.quote ctx sub) orig (Kind.Term.quote term sub))
Kind.Error.quote (Kind.Error.too_many_arguments ctx orig) sub = (Kind.Error.Quoted.too_many_arguments (Kind.Context.quote ctx sub) orig)
Kind.Error.quote (Kind.Error.type_mismatch ctx orig expected detected) sub = (Kind.Error.Quoted.type_mismatch (Kind.Context.quote ctx sub) orig (Kind.Term.quote expected sub) (Kind.Term.quote detected sub))
Kind.Error.quote (Kind.Error.uncovered_pattern ctx orig res) sub = (Kind.Error.Quoted.uncovered_pattern (Kind.Context.quote ctx sub) orig res)

#derive[getters, setters]
record Kind.Coverage.Problem {
  constructor new
  type : (Kind.Coverage.Type) 
  rows : (List (Kind.Rule)) 
}

Kind.API.output (res: (List (Pair (Kind.Name) (List (Kind.Result (Unit)))))) : (List (Kind.Error.Quoted))
Kind.API.output (List.nil t) = (List.nil)
Kind.API.output (List.cons t pair rest) = (let Pair.new fst snd = pair; (List.concat (Kind.API.output.function fst snd) (Kind.API.output rest)))

#kdl_name = Str_flatten
String.flatten (xs: (List (String))) : (String)
String.flatten (List.nil t) = (String.nil)
String.flatten (List.cons t head tail) = (String.concat head (String.flatten tail))

#kdl_name = List_any
List.any <a> (xs: (List a)) (cond: (a -> (Bool))) : (Bool)
List.any a (List.nil t) cond = (Bool.false)
List.any a (List.cons t head tail) cond = (Bool.if (cond head) (Bool.true) (List.any a tail cond))

#kdl_name = List_is_cons
List.is_cons <a> (xs: (List a)) : (Bool)
List.is_cons a (List.nil t) = (Bool.false)
List.is_cons a (List.cons t head tail) = (Bool.true)

#kdl_name = Show_to_str
Show.to_string (show: (Show)) : (String)
Show.to_string show = (show (String.nil))

Kind.Checker.set_right_hand_side (rhs: (Bool)) : (Kind.Checker (Unit))
Kind.Checker.set_right_hand_side to_rhs = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth to_rhs subst eqts errs (Unit.new))))))))

#kdl_name = Maybe_bind
Maybe.bind <a> <b> (ma: (Maybe a)) (mb: (a -> (Maybe b))) : (Maybe b)
Maybe.bind a b (Maybe.none t) mb = (Maybe.none)
Maybe.bind a b (Maybe.some t val) mb = (mb val)

Kind.Coverage.intro_or_incomplete (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Type))) (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.intro_or_incomplete type body (Kind.Coverage.Problem.new cur_type rows) = (let problem = (Kind.Coverage.Problem.new cur_type rows); (if (List.any (Kind.Coverage.Problem.rows.get problem) (x => (Kind.Coverage.Row.catches x))) {(Kind.Coverage.intro_all type body problem)} else {(do Kind.Checker {ask var = (Kind.Checker.generate_var type);
 let new_problem = (Kind.Coverage.Problem.new (body var) []);
 ask term_result = (Kind.Coverage.solve (Kind.Coverage.Problem.rows.set new_problem []));
 return (Maybe.map (scrutinee => (List.cons (Kind.Term.Quoted.var 0 63 0) scrutinee)) term_result)
})}))

Kind.Operator.show (op: (Kind.Operator)) : (String)
Kind.Operator.show (Kind.Operator.add) = "+"
Kind.Operator.show (Kind.Operator.sub) = "-"
Kind.Operator.show (Kind.Operator.mul) = "*"
Kind.Operator.show (Kind.Operator.div) = "/"
Kind.Operator.show (Kind.Operator.mod) = "%"
Kind.Operator.show (Kind.Operator.and) = "&"
Kind.Operator.show (Kind.Operator.or) = "|"
Kind.Operator.show (Kind.Operator.xor) = "^"
Kind.Operator.show (Kind.Operator.shl) = "<<"
Kind.Operator.show (Kind.Operator.shr) = ">>"
Kind.Operator.show (Kind.Operator.ltn) = "<"
Kind.Operator.show (Kind.Operator.lte) = "<="
Kind.Operator.show (Kind.Operator.eql) = "=="
Kind.Operator.show (Kind.Operator.gte) = ">="
Kind.Operator.show (Kind.Operator.gtn) = ">"
Kind.Operator.show (Kind.Operator.neq) = "!="

Kind.Coverage.solve_constraints (constraints: (List (Pair (Kind.Term) (Kind.Term)))) : (Kind.Checker (Bool))
Kind.Coverage.solve_constraints (List.nil) = (Kind.Checker.pure (Bool.true))
Kind.Coverage.solve_constraints (List.cons pair xs) = (do Kind.Checker {let expected_type = (Pair.snd pair);
 ask infered_type = (Kind.Checker.infer (Pair.fst pair));
 ask result = (Kind.Checker.equal expected_type infered_type);
 (if result {(Kind.Coverage.solve_constraints xs)} else {(Kind.Checker.pure (Bool.false))})
})

Kind.Coverage.Row.intro_all (row: (Kind.Rule)) : (Kind.Rule)
Kind.Coverage.Row.intro_all (Kind.Rule.lhs term rule) = rule
Kind.Coverage.Row.intro_all rule = rule

Kind.Checker.error <t> (err: (Kind.Error)) (ret: t) : (Kind.Checker t)
Kind.Checker.error t err ret = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts (List.cons err errs) ret)))))))

#kdl_name = List_revers0
List.reverse.go <a> (xs: (List a)) (ys: (List a)) : (List a)
List.reverse.go a (List.nil a_) ys = ys
List.reverse.go a (List.cons a_ x xs) ys = (List.reverse.go xs (List.cons x ys))

Kind.API.output.error (fnid: (Kind.Name)) (err: (Kind.Error)) (sub: (Kind.Subst)) : (Kind.Error.Quoted)
Kind.API.output.error fnid err sub = (Kind.Error.quote err sub)

#kdl_name = Maybe_choice
Maybe.default <a: Type> (m: (Maybe a)) (dflt: a) : a
Maybe.default a (Maybe.none a_) dflt = dflt
Maybe.default a (Maybe.some a_ val) dflt = val

Kind.Checker.get_depth : (Kind.Checker U60)
Kind.Checker.get_depth = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs depth)))))))

#inline
Char.newline : (Char)
Char.newline = 10

Kind.Coverage.craft (n: U60) (rest: (Kind.Rule)) : (Kind.Rule)
Kind.Coverage.craft 0 rule = rule
Kind.Coverage.craft n rule = (Kind.Coverage.craft (- n 1) (Kind.Rule.lhs (Kind.Term.var 0 65 0) rule))

Kind.Term.quote.go (term: (Kind.Term)) : (Kind.Term.Quoted)
Kind.Term.quote.go (Kind.Term.typ orig) = (Kind.Term.Quoted.typ orig)
Kind.Term.quote.go (Kind.Term.var orig name index) = (Kind.Term.Quoted.var orig name index)
Kind.Term.quote.go (Kind.Term.hol orig numb) = (Kind.Term.Quoted.hol orig numb)
Kind.Term.quote.go (Kind.Term.all orig name type body) = (Kind.Term.Quoted.all orig name (Kind.Term.quote.go type) (Kind.Term.quote.go (body (Kind.Term.var orig name 0))))
Kind.Term.quote.go (Kind.Term.lam orig name body) = (Kind.Term.Quoted.lam orig name (Kind.Term.quote.go (body (Kind.Term.var orig name 0))))
Kind.Term.quote.go (Kind.Term.let orig name exp body) = (Kind.Term.Quoted.let orig name (Kind.Term.quote.go exp) (Kind.Term.quote.go (body (Kind.Term.var orig name 0))))
Kind.Term.quote.go (Kind.Term.ann orig expr type) = (Kind.Term.Quoted.ann orig (Kind.Term.quote.go expr) (Kind.Term.quote.go type))
Kind.Term.quote.go (Kind.Term.sub orig name indx redx expr) = (Kind.Term.Quoted.sub orig name indx redx (Kind.Term.quote.go expr))
Kind.Term.quote.go (Kind.Term.app orig func argm) = (Kind.Term.Quoted.app orig (Kind.Term.quote.go func) (Kind.Term.quote.go argm))
Kind.Term.quote.go (Kind.Term.ct0 ctid orig) = (Kind.Term.Quoted.ctr ctid orig (List.nil))
Kind.Term.quote.go (Kind.Term.ct1 ctid orig x0) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.nil)))
Kind.Term.quote.go (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.nil))))
Kind.Term.quote.go (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.nil)))))
Kind.Term.quote.go (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.nil))))))
Kind.Term.quote.go (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.nil)))))))
Kind.Term.quote.go (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.nil))))))))
Kind.Term.quote.go (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.nil)))))))))
Kind.Term.quote.go (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.nil))))))))))
Kind.Term.quote.go (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.nil)))))))))))
Kind.Term.quote.go (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.nil))))))))))))
Kind.Term.quote.go (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.nil)))))))))))))
Kind.Term.quote.go (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.nil))))))))))))))
Kind.Term.quote.go (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.nil)))))))))))))))
Kind.Term.quote.go (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.Quoted.ctr ctid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.cons (Kind.Term.quote.go x13) (List.nil))))))))))))))))
Kind.Term.quote.go (Kind.Term.ct15 ctid orig x0) = (Kind.Term.Quoted.ctr ctid orig (Kind.Term.quote.args x0))
Kind.Term.quote.go (Kind.Term.ct16 ctid orig x0) = (Kind.Term.Quoted.ctr ctid orig (Kind.Term.quote.args x0))
Kind.Term.quote.go (Kind.Term.fn0 fnid orig) = (Kind.Term.Quoted.fun fnid orig (List.nil))
Kind.Term.quote.go (Kind.Term.fn1 fnid orig x0) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.nil)))
Kind.Term.quote.go (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.nil))))
Kind.Term.quote.go (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.nil)))))
Kind.Term.quote.go (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.nil))))))
Kind.Term.quote.go (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.nil)))))))
Kind.Term.quote.go (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.nil))))))))
Kind.Term.quote.go (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.nil)))))))))
Kind.Term.quote.go (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.nil))))))))))
Kind.Term.quote.go (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.nil)))))))))))
Kind.Term.quote.go (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.nil))))))))))))
Kind.Term.quote.go (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.nil)))))))))))))
Kind.Term.quote.go (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.nil))))))))))))))
Kind.Term.quote.go (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.nil)))))))))))))))
Kind.Term.quote.go (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.Quoted.fun fnid orig (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.cons (Kind.Term.quote.go x13) (List.nil))))))))))))))))
Kind.Term.quote.go (Kind.Term.fn15 fnid orig x0) = (Kind.Term.Quoted.fun fnid orig (Kind.Term.quote.args x0))
Kind.Term.quote.go (Kind.Term.fn16 fnid orig x0) = (Kind.Term.Quoted.fun fnid orig (Kind.Term.quote.args x0))
Kind.Term.quote.go (Kind.Term.hlp orig) = (Kind.Term.Quoted.hlp orig)
Kind.Term.quote.go (Kind.Term.U60 orig) = (Kind.Term.Quoted.u60 orig)
Kind.Term.quote.go (Kind.Term.u60 orig numb) = (Kind.Term.Quoted.num orig numb)
Kind.Term.quote.go (Kind.Term.F60 orig) = (Kind.Term.Quoted.f60 orig)
Kind.Term.quote.go (Kind.Term.f60 orig numb) = (Kind.Term.Quoted.numf60 orig numb)
Kind.Term.quote.go (Kind.Term.op2 orig operator left right) = (Kind.Term.Quoted.op2 orig operator (Kind.Term.quote.go left) (Kind.Term.quote.go right))
Kind.Term.quote.go (Kind.Term.args15 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Kind.Axiom.Null)
Kind.Term.quote.go (Kind.Term.args16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Kind.Axiom.Null)

#kdl_name = List_at_u60
List.at.u60 <a: Type> (xs: (List a)) (idx: U60) : (Maybe a)
List.at.u60 (List.nil) idx = (Maybe.none)
List.at.u60 (List.cons head tail) 0 = (Maybe.some head)
List.at.u60 (List.cons head tail) idx = (List.at.u60 tail (- idx 1))

Kind.Checker.get_subst : (Kind.Checker (Kind.Subst))
Kind.Checker.get_subst = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs subst)))))))

Kind.Checker.run <t> (checker: (Kind.Checker t)) (rhs: (Bool)) : (Kind.Result t)
Kind.Checker.run t checker rhs = (checker (Kind.Context.empty) 0 rhs (Kind.Subst.end) (List.nil) (List.nil))

Kind.Term.fillable (term: (Kind.Term)) (sub: (Kind.Subst)) : (Bool)
Kind.Term.fillable term (Kind.Subst.end) = (Bool.false)
Kind.Term.fillable (Kind.Term.typ orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.var orig name index) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.hlp orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.U60 orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.u60 orig num) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.F60 orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.f60 orig num) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.all orig name typ body) sub = (Bool.or (Kind.Term.fillable typ sub) (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub))
Kind.Term.fillable (Kind.Term.lam orig name body) sub = (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub)
Kind.Term.fillable (Kind.Term.app orig expr typ) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable typ sub))
Kind.Term.fillable (Kind.Term.let orig name expr body) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub))
Kind.Term.fillable (Kind.Term.ann orig expr typ) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable typ sub))
Kind.Term.fillable (Kind.Term.sub orig name indx redx expr) sub = (Kind.Term.fillable expr sub)
Kind.Term.fillable (Kind.Term.op2 orig op left right) sub = (Bool.or (Kind.Term.fillable left sub) (Kind.Term.fillable right sub))
Kind.Term.fillable (Kind.Term.hol orig numb) sub = (Maybe.is_some (Kind.Subst.look sub numb))
Kind.Term.fillable (Kind.Term.ct0 ctid orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.ct1 ctid orig x0) sub = (Kind.Term.fillable x0 sub)
Kind.Term.fillable (Kind.Term.ct2 ctid orig x0 x1) sub = (Bool.or (Kind.Term.fillable x0 sub) (Kind.Term.fillable x1 sub))
Kind.Term.fillable (Kind.Term.ct3 ctid orig x0 x1 x2) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Kind.Term.fillable x2 sub)))
Kind.Term.fillable (Kind.Term.ct4 ctid orig x0 x1 x2 x3) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Kind.Term.fillable x3 sub))))
Kind.Term.fillable (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Kind.Term.fillable x4 sub)))))
Kind.Term.fillable (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Kind.Term.fillable x5 sub))))))
Kind.Term.fillable (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Kind.Term.fillable x6 sub)))))))
Kind.Term.fillable (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Kind.Term.fillable x7 sub))))))))
Kind.Term.fillable (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Kind.Term.fillable x8 sub)))))))))
Kind.Term.fillable (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Kind.Term.fillable x9 sub))))))))))
Kind.Term.fillable (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Kind.Term.fillable x10 sub)))))))))))
Kind.Term.fillable (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Kind.Term.fillable x11 sub))))))))))))
Kind.Term.fillable (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Kind.Term.fillable x12 sub)))))))))))))
Kind.Term.fillable (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Kind.Term.fillable x13 sub))))))))))))))
Kind.Term.fillable (Kind.Term.ct15 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.ct16 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.fn0 fnid orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.fn1 fnid orig x0) sub = (Kind.Term.fillable x0 sub)
Kind.Term.fillable (Kind.Term.fn2 fnid orig x0 x1) sub = (Bool.or (Kind.Term.fillable x0 sub) (Kind.Term.fillable x1 sub))
Kind.Term.fillable (Kind.Term.fn3 fnid orig x0 x1 x2) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Kind.Term.fillable x2 sub)))
Kind.Term.fillable (Kind.Term.fn4 fnid orig x0 x1 x2 x3) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Kind.Term.fillable x3 sub))))
Kind.Term.fillable (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Kind.Term.fillable x4 sub)))))
Kind.Term.fillable (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Kind.Term.fillable x5 sub))))))
Kind.Term.fillable (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Kind.Term.fillable x6 sub)))))))
Kind.Term.fillable (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Kind.Term.fillable x7 sub))))))))
Kind.Term.fillable (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Kind.Term.fillable x8 sub)))))))))
Kind.Term.fillable (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Kind.Term.fillable x9 sub))))))))))
Kind.Term.fillable (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Kind.Term.fillable x10 sub)))))))))))
Kind.Term.fillable (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Kind.Term.fillable x11 sub))))))))))))
Kind.Term.fillable (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Kind.Term.fillable x12 sub)))))))))))))
Kind.Term.fillable (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Kind.Term.fillable x13 sub))))))))))))))
Kind.Term.fillable (Kind.Term.fn15 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.fn16 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Bool.or (Kind.Term.fillable x13 sub) (Kind.Term.fillable x14 sub)))))))))))))))
Kind.Term.fillable (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Bool.or (Kind.Term.fillable x13 sub) (Bool.or (Kind.Term.fillable x14 sub) (Kind.Term.fillable x15 sub))))))))))))))))

#derive[match]
type List (t) {
  nil
  cons (head: t) (tail: (List t))
}

///  Orig of a function
#axiom
Kind.Axiom.OrigOf (fnid: (Kind.Name)) : U60

///  Checks a @Kind.Rule@ against a term.
///  Example:
/// 
///  @
///  pred (n: Nat): Nat
///  pred (S n) = n
///  @
/// 
///  In the example above, we have a rule that starts with a
///  left hand side part ((S n)) that will have to check
///  against the pi type that `pred` declarated in order to
///  succeded.
Kind.Checker.rule (rule: (Kind.Rule)) (term: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.rule (Kind.Rule.lhs arg args) (Kind.Term.all orig name type body) = (do Kind.Checker {(Kind.Checker.check arg type);
(Kind.Checker.rule args (body arg));
return (Unit.new)
})
Kind.Checker.rule (Kind.Rule.lhs arg args) other = (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.too_many_arguments ctx (Kind.Term.get_origin arg (orig => (term => orig)))))
})
Kind.Checker.rule (Kind.Rule.rhs expr) type = (do Kind.Checker {(Kind.Checker.set_right_hand_side (Bool.true));
(Kind.Checker.check expr type);
return (Unit.new)
})

Kind.Checker (a: Type) : Type
Kind.Checker a = ((Kind.Context) -> U60 -> (Bool) -> (Kind.Subst) -> (List (Kind.Equation)) -> (List (Kind.Error)) -> (Kind.Result a))

Kind.Checker.fill (index: U60) (val: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.fill index val = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs (Kind.Subst.fill subst index val) eqts errs (Unit.new))))))))

Kind.API.check_function (fnid: (Kind.Name)) : (List (Kind.Result (Unit)))
Kind.API.check_function fnid = (let rules = (Kind.Axiom.RuleOf fnid); (let type = (Kind.Axiom.TypeOf fnid); (let type_check = (Kind.Checker.run (Kind.Checker.unify (Kind.Checker.check type (Kind.Term.typ 0))) (Bool.true)); (let rule_check = (Kind.API.check_function.rules rules (Kind.Term.eval type)); (let res = (List.cons type_check rule_check); (if (Kind.Axiom.CoverCheck fnid) {(let cover_check = (Kind.Checker.run (Kind.Coverage.check fnid) (Bool.true)); (List.cons cover_check res))} else {res}))))))

#axiom
Kind.Term.FN15 (fnid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Coverage.split_rule (rule: (Kind.Rule)) : (Maybe (Pair (Kind.Term) (Kind.Rule)))
Kind.Coverage.split_rule (Kind.Rule.lhs term rest) = (Maybe.some (Pair.new term rest))
Kind.Coverage.split_rule _ = (Maybe.none)

Kind.Term.quote.args (term: (Kind.Term)) : (List (Kind.Term.Quoted))
Kind.Term.quote.args (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.cons (Kind.Term.quote.go x13) (List.cons (Kind.Term.quote.go x14) (List.nil))))))))))))))))
Kind.Term.quote.args (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (List.cons (Kind.Term.quote.go x0) (List.cons (Kind.Term.quote.go x1) (List.cons (Kind.Term.quote.go x2) (List.cons (Kind.Term.quote.go x3) (List.cons (Kind.Term.quote.go x4) (List.cons (Kind.Term.quote.go x5) (List.cons (Kind.Term.quote.go x6) (List.cons (Kind.Term.quote.go x7) (List.cons (Kind.Term.quote.go x8) (List.cons (Kind.Term.quote.go x9) (List.cons (Kind.Term.quote.go x10) (List.cons (Kind.Term.quote.go x11) (List.cons (Kind.Term.quote.go x12) (List.cons (Kind.Term.quote.go x13) (List.cons (Kind.Term.quote.go x14) (List.cons (Kind.Term.quote.go x15) (List.nil)))))))))))))))))
Kind.Term.quote.args _ = (Kind.Axiom.Null)

Kind.Checker.get_context : (Kind.Checker (Kind.Context))
Kind.Checker.get_context = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs context)))))))

Kind.Term.if_all <res> (term: (Kind.Term)) (if: (U60 -> U60 -> (Kind.Term) -> ((Kind.Term) -> (Kind.Term)) -> res)) (else: res) : res
Kind.Term.if_all res (Kind.Term.all orig name typ body) func_if else = (func_if orig name typ body)
Kind.Term.if_all res other func_if else = else

Kind.Coverage.count_forall (type: (Kind.Coverage.Type)) (acc: (Nat)) : (Nat)
Kind.Coverage.count_forall (Kind.Coverage.Type.cons _ _ _ _ body) acc = (Kind.Coverage.count_forall (body (Kind.Term.var 0 63 0)) (Nat.succ acc))
Kind.Coverage.count_forall _ acc = acc

U60.to_bool (n: U60) : (Bool)
U60.to_bool 0 = (Bool.false)
U60.to_bool n = (Bool.true)

#derive[match]
type Kind.Result <a: Type> {
  checked (ctx: (Kind.Context)) (depth: U60) (rhs: (Bool)) (sub: (Kind.Subst)) (equations: (List (Kind.Equation))) (errors: (List (Kind.Error))) (ret: a)
  errored (ctx: (Kind.Context)) (sub: (Kind.Subst)) (errors: (List (Kind.Error)))
}

Kind.Checker.find <r> (index: U60) (alt: r) (fun: (U60 -> (Kind.Term) -> (List (Kind.Term)) -> r)) : (Kind.Checker r)
Kind.Checker.find r index alt fun = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs (Kind.Context.find context index alt fun))))))))

type Kind.Error {
  unbound_variable (ctx: (Kind.Context)) (orig: U60)
  cant_infer_hole (ctx: (Kind.Context)) (orig: U60)
  cant_infer_lambda (ctx: (Kind.Context)) (orig: U60)
  invalid_call (ctx: (Kind.Context)) (orig: U60)
  impossible_case (ctx: (Kind.Context)) (orig: U60) (typ: (Kind.Term)) (term: (Kind.Term))
  inspection (ctx: (Kind.Context)) (orig: U60) (term: (Kind.Term))
  too_many_arguments (ctx: (Kind.Context)) (orig: U60)
  type_mismatch (ctx: (Kind.Context)) (orig: U60) (expected: (Kind.Term)) (detected: (Kind.Term))
  uncovered_pattern (ctx: (Kind.Context)) (orig: U60) (tree: (List (Kind.Term.Quoted)))
}

Kind.Context.find <res> (ctx: (Kind.Context)) (name: U60) (alt: res) (fun: (U60 -> (Kind.Term) -> (List (Kind.Term)) -> res)) : res
Kind.Context.find res (Kind.Context.entry name type vals rest) 0 alt fun = (fun name type vals)
Kind.Context.find res (Kind.Context.entry name type vals rest) n alt fun = (Kind.Context.find rest (- n 1) alt fun)
Kind.Context.find res (Kind.Context.empty) n alt fun = alt

Kind.Checker.equal.hol.val (val: (Maybe (Kind.Term))) (orig: U60) (numb: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.hol.val (Maybe.none t) orig numb b = (do Kind.Checker {(Kind.Checker.fill numb b);
return (Bool.true)
})
Kind.Checker.equal.hol.val (Maybe.some t val) orig numb b = (Kind.Checker.equal val b)

#kdl_name = List_take
List.take <a> (xs: (List a)) (n: (Nat)) : (List a)
List.take a (List.cons t head tail) (Nat.succ pred) = (List.cons head (List.take tail pred))
List.take a (List.nil t) (Nat.succ pred) = (List.nil)
List.take a xs (Nat.zero) = (List.nil)

#kdl_name = Maybe_try
Maybe.try <a> (ls: (List (Maybe a))) (alt: a) : a
Maybe.try a (List.nil t) alt = alt
Maybe.try a (List.cons t maybe xs) alt = (match Maybe maybe { none => (Maybe.try xs alt); some value => value; })

Kind.Term.show.forall (orig: U60) (name: U60) (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Term))) : (String)
Kind.Term.show.forall orig name type body = (U60.if (== name 63) (Kind.Printer.text ["(" (Kind.Term.show type) " -> " (Kind.Term.show (body (Kind.Term.var orig name 0))) ")"]) (Kind.Printer.text ["((" (Kind.Name.show name) ": " (Kind.Term.show type) ") -> " (Kind.Term.show (body (Kind.Term.var orig name 0))) ")"]))

Kind.Checker.shrink : (Kind.Checker (Unit))
Kind.Checker.shrink = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked (Kind.Context.shrink context) (- depth 1) rhs subst eqts errs (Unit.new))))))))

#axiom
Kind.Term.FN13 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) : (Kind.Term)

Kind.API.check_all : (List (Kind.Error.Quoted))
Kind.API.check_all = (let output = (Kind.API.output (List.reverse (Kind.API.check_functions (Kind.Axiom.Functions)))); output)

#kdl_name = Maybe_is_som
Maybe.is_some <a: Type> (m: (Maybe a)) : (Bool)
Maybe.is_some a (Maybe.none t) = (Bool.false)
Maybe.is_some a (Maybe.some t v) = (Bool.true)

#axiom
Kind.Term.FN7 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) : (Kind.Term)

U60.to_nat (x: U60) : (Nat)
U60.to_nat 0 = (Nat.zero)
U60.to_nat n = (Nat.succ (U60.to_nat (- n 1)))

#inline
List.pure <t: Type> (x: t) : (List t)
List.pure t x = (List.cons x (List.nil))

Kind.Coverage.Maker.size (maker: (Kind.Coverage.Maker)) : U60
Kind.Coverage.Maker.size (Kind.Coverage.Maker.Cons _ _ body) = (+ 1 (Kind.Coverage.Maker.size (body (Kind.Term.var 0 0 0))))
Kind.Coverage.Maker.size (Kind.Coverage.Maker.End _) = 0

Kind.Checker.infer (term: (Kind.Term)) : (Kind.Checker (Kind.Term))
Kind.Checker.infer (Kind.Term.var orig name index) = (do Kind.Checker {ask got_type = (Kind.Checker.find index (Maybe.none) (n => (t => (v => (Maybe.some t)))));
 (match Maybe got_type { none => (Kind.Checker.bind (Kind.Checker.get_context) (ctx => (Kind.Checker.fail (Kind.Error.unbound_variable ctx orig)))); some => (Kind.Checker.pure got_type.value); })
})
Kind.Checker.infer (Kind.Term.hol orig numb) = (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.cant_infer_hole ctx orig))
})
Kind.Checker.infer (Kind.Term.typ orig) = (Kind.Checker.pure (Kind.Term.typ orig))
Kind.Checker.infer (Kind.Term.all orig name type body) = (do Kind.Checker {ask depth = (Kind.Checker.get_depth);
 (Kind.Checker.check type (Kind.Term.typ orig));
(Kind.Checker.extended (Kind.Checker.check (body (Kind.Term.var orig name depth)) (Kind.Term.typ orig)) name (Kind.Term.eval type) []);
return (Kind.Term.typ orig)
})
Kind.Checker.infer (Kind.Term.lam orig name body) = (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.cant_infer_lambda ctx orig))
})
Kind.Checker.infer (Kind.Term.app orig func argm) = (do Kind.Checker {ask fn_infer = (Kind.Checker.infer func);
 ask ap_infer = (Kind.Checker.infer.forall fn_infer (fn_orig => (fn_name => (fn_type => (fn_body => (do Kind.Checker {(Kind.Checker.check argm fn_type);
return (fn_body (Kind.Term.eval argm))
}))))) (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.invalid_call ctx orig))
}));
 return ap_infer
})
Kind.Checker.infer (Kind.Term.let orig name expr body) = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask expr_typ = (Kind.Checker.infer expr);
 ask body_typ = (Kind.Checker.extended (Kind.Checker.infer (body (Kind.Term.var orig name dep))) name expr_typ [(Kind.Term.eval expr)]);
 return body_typ
})
Kind.Checker.infer (Kind.Term.ann orig expr type) = (do Kind.Checker {let type = (Kind.Term.eval type);
 (Kind.Checker.check expr type);
return type
})
Kind.Checker.infer (Kind.Term.sub orig name indx redx expr) = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask got = (Kind.Checker.find indx (Maybe.none) (n => (t => (v => (Maybe.some (Pair.new t v))))));
 (match Maybe got { none => (Kind.Checker.bind (Kind.Checker.get_context) (ctx => (Kind.Checker.fail (Kind.Error.unbound_variable ctx orig)))); some => (open Pair got.value (do Kind.Checker {(match Maybe reduction = (List.at.u60 got.value.snd redx) { none => (Kind.Checker.bind (Kind.Checker.get_context) (ctx => (Kind.Checker.fail (Kind.Error.unbound_variable ctx orig)))); some => (do Kind.Checker {ask expr_typ = (Kind.Checker.infer expr);
 return (Kind.Term.eval (Kind.Term.replace expr_typ indx reduction.value))
}); })
})); })
})
Kind.Checker.infer (Kind.Term.ct0 ctid orig) = (Kind.Checker.pure (Kind.Term.eval (Kind.Axiom.TypeOf ctid)))
Kind.Checker.infer (Kind.Term.ct1 ctid orig x0) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0))
Kind.Checker.infer (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1))
Kind.Checker.infer (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2))
Kind.Checker.infer (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3))
Kind.Checker.infer (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4))
Kind.Checker.infer (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5))
Kind.Checker.infer (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6))
Kind.Checker.infer (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7))
Kind.Checker.infer (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8))
Kind.Checker.infer (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9))
Kind.Checker.infer (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10))
Kind.Checker.infer (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11))
Kind.Checker.infer (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12))
Kind.Checker.infer (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13))
Kind.Checker.infer (Kind.Term.ct15 ctid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.ct0 ctid orig) orig)))
Kind.Checker.infer (Kind.Term.ct16 ctid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.ct0 ctid orig) orig)))
Kind.Checker.infer (Kind.Term.fn0 fnid orig) = (Kind.Checker.pure (Kind.Term.eval (Kind.Axiom.TypeOf fnid)))
Kind.Checker.infer (Kind.Term.fn1 fnid orig x0) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0))
Kind.Checker.infer (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1))
Kind.Checker.infer (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2))
Kind.Checker.infer (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3))
Kind.Checker.infer (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4))
Kind.Checker.infer (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5))
Kind.Checker.infer (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6))
Kind.Checker.infer (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7))
Kind.Checker.infer (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8))
Kind.Checker.infer (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9))
Kind.Checker.infer (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10))
Kind.Checker.infer (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11))
Kind.Checker.infer (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12))
Kind.Checker.infer (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13))
Kind.Checker.infer (Kind.Term.fn15 fnid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.fn0 fnid orig) orig)))
Kind.Checker.infer (Kind.Term.fn16 fnid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.fn0 fnid orig) orig)))
Kind.Checker.infer (Kind.Term.hlp orig) = (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.inspection ctx orig (Kind.Term.hlp 0)))
})
Kind.Checker.infer (Kind.Term.U60 orig) = (Kind.Checker.pure (Kind.Term.typ 0))
Kind.Checker.infer (Kind.Term.u60 orig numb) = (Kind.Checker.pure (Kind.Term.U60 0))
Kind.Checker.infer (Kind.Term.F60 orig) = (Kind.Checker.pure (Kind.Term.typ 0))
Kind.Checker.infer (Kind.Term.f60 orig numb) = (Kind.Checker.pure (Kind.Term.F60 0))
Kind.Checker.infer (Kind.Term.op2 orig oper left right) = (do Kind.Checker {(Kind.Checker.check left (Kind.Term.U60 0));
(Kind.Checker.check right (Kind.Term.U60 0));
return (Kind.Term.U60 0)
})
Kind.Checker.infer (Kind.Term.args15 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Kind.Axiom.Null)
Kind.Checker.infer (Kind.Term.args16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Kind.Axiom.Null)

Kind.Coverage.specialize_on (type_name: (Kind.Name)) (constructor_name: (Kind.Name)) (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Type))) (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.specialize_on type_name constructor_name type body (Kind.Coverage.Problem.new current_problem_type rows) = (match Maybe maker = (Kind.Coverage.Maker.Mk constructor_name 0 type) { some (value = constructor_maker) => (do Kind.Checker {let new_type = (Kind.Coverage.Maker.make constructor_maker type body);
 let params = (Kind.Axiom.Family.Params type_name);
 let args = (Kind.Axiom.ArgsCount constructor_name);
 ask new_rows = (Kind.Coverage.specialize_rules type_name constructor_name rows);
 let new_problem = (Kind.Coverage.Problem.new new_type new_rows);
 ask term_result = (Kind.Coverage.solve new_problem);
 (match Maybe term_result { none => (Kind.Checker.pure (Maybe.none)); some (value = scrutinee) => (let size = (Kind.Coverage.Maker.size constructor_maker); (let took = (List.take scrutinee (U60.to_nat size)); (let rest = (List.drop scrutinee (U60.to_nat size)); (let pat = (Kind.Term.Quoted.ctr constructor_name 0 took); (Kind.Checker.pure (Maybe.some (List.cons pat rest))))))); })
}); none => (Kind.Checker.pure (Maybe.some (List.nil))); })

#axiom
Kind.Term.FN8 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) : (Kind.Term)

Kind.Checker.extend (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) : (Kind.Checker (Unit))
Kind.Checker.extend name type vals = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked (Kind.Context.extend context name type vals) (+ depth 1) rhs subst eqts errs (Unit.new))))))))

type Kind.Coverage.Type {
  cons (orig: U60) (name: U60) (typ: (Kind.Term)) (constraints: (List (Pair (Kind.Term) (Kind.Term)))) (body: ((Kind.Term) -> (Kind.Coverage.Type)))
  end (constraints: (List (Pair (Kind.Term) (Kind.Term)))) (ty: (Kind.Term))
}

#axiom
Main. : (Kind.Name)

Kind.Checker.equal.var.try_values (ls: (List (Kind.Term))) (term: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.var.try_values (List.nil t) term = (Kind.Checker.pure (Bool.false))
Kind.Checker.equal.var.try_values (List.cons t x xs) term = (do Kind.Checker {ask head = (Kind.Checker.equal x term);
 (if head {(Kind.Checker.pure (Bool.true))} else {(Kind.Checker.equal.var.try_values xs term)})
})

Kind.API.eval_main : (String)
Kind.API.eval_main = (Kind.Printer.text [(Kind.Term.show (Kind.Term.FN0 (Main.) 0)) (String.new_line) (String.new_line)])

///  All the functions for type checking
#axiom
Kind.Axiom.Functions : (List (Kind.Name))

///  Type of a constructor/function
#axiom
Kind.Axiom.TypeOf (u: (Kind.Name)) : (Kind.Term)

Kind.Coverage.done (problem: (Kind.Coverage.Problem)) (or_else: (Kind.Checker (Maybe (List (Kind.Term.Quoted))))) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.done (Kind.Coverage.Problem.new type rows) or_else = (do Kind.Checker {let result = (Kind.Coverage.Type.remove_constraints type);
 let type_res = (Pair.fst result);
 let constraints = (Pair.snd result);
 ask solved = (Kind.Coverage.solve_constraints constraints);
 (if solved {or_else} else {(Kind.Checker.pure (Maybe.none))})
})

#axiom
Kind.Term.FN5 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) : (Kind.Term)

Kind.Term.eval_ann (orig: U60) (expr: (Kind.Term)) (type: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_ann orig expr type = expr

#kdl_name = List_append
List.append <a: Type> (xs: (List a)) (x: a) : (List a)
List.append a (List.nil xs.a) x = (List.pure x)
List.append a (List.cons xs.a xs.h xs.t) x = (List.cons xs.h (List.append xs.t x))

Kind.Coverage.Constraints.show (n: (List (Pair (Kind.Term) (Kind.Term)))) : (String)
Kind.Coverage.Constraints.show ls = (Kind.Printer.text ["[" (Kind.Printer.text (List.intersperse ", " (List.map ls (x => (Kind.Coverage.Constraint.show x))))) "]"])

Kind.Checker.add_value (idx: U60) (val: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.add_value idx val = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked (Kind.Context.add_value context idx val) depth rhs subst eqts errs (Unit.new))))))))

type Kind.Error.Quoted {
  unbound_variable (ctx: (Kind.Context.Quoted)) (orig: U60)
  cant_infer_hole (ctx: (Kind.Context.Quoted)) (orig: U60)
  cant_infer_lambda (ctx: (Kind.Context.Quoted)) (orig: U60)
  invalid_call (ctx: (Kind.Context.Quoted)) (orig: U60)
  impossible_case (ctx: (Kind.Context.Quoted)) (orig: U60) (typ: (Kind.Term.Quoted)) (term: (Kind.Term.Quoted))
  inspection (ctx: (Kind.Context.Quoted)) (orig: U60) (term: (Kind.Term.Quoted))
  too_many_arguments (ctx: (Kind.Context.Quoted)) (orig: U60)
  type_mismatch (ctx: (Kind.Context.Quoted)) (orig: U60) (expected: (Kind.Term.Quoted)) (detected: (Kind.Term.Quoted))
  uncovered_pattern (ctx: (Kind.Context.Quoted)) (orig: U60) (errors: (List (Kind.Term.Quoted)))
}

Kind.Coverage.solve (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.solve problem = (let type = (Kind.Coverage.Problem.type.get problem); (Kind.Checker.local (Kind.Coverage.done problem (Kind.Coverage.if_all type (orig_ => (name_ => (type => (constraints => (body => (Bool.if (Kind.Coverage.catches problem) (Kind.Coverage.intro_all type body problem) (Kind.Coverage.specialize (Kind.Term.eval type) body problem))))))) (constraint => (if (List.is_nil (Kind.Coverage.Problem.rows.get problem)) {(Kind.Checker.pure (Maybe.some []))} else {(Kind.Checker.pure (Maybe.none))}))))))

Kind.Context.Quoted : Type
Kind.Context.Quoted = (List (Pair U60 (Pair (Kind.Term.Quoted) (List (Kind.Term.Quoted)))))

Kind.Term.get_origin <r> (term: (Kind.Term)) (got: (U60 -> (Kind.Term) -> r)) : r
Kind.Term.get_origin r (Kind.Term.typ orig) got = (got orig (Kind.Term.typ orig))
Kind.Term.get_origin r (Kind.Term.var orig name index) got = (got orig (Kind.Term.var orig name index))
Kind.Term.get_origin r (Kind.Term.hol orig numb) got = (got orig (Kind.Term.hol orig numb))
Kind.Term.get_origin r (Kind.Term.all orig name typ body) got = (got orig (Kind.Term.all orig name typ body))
Kind.Term.get_origin r (Kind.Term.lam orig name body) got = (got orig (Kind.Term.lam orig name body))
Kind.Term.get_origin r (Kind.Term.let orig name expr body) got = (got orig (Kind.Term.let orig name expr body))
Kind.Term.get_origin r (Kind.Term.ann orig expr typ) got = (got orig (Kind.Term.ann orig expr typ))
Kind.Term.get_origin r (Kind.Term.sub orig name indx redx expr) got = (got orig (Kind.Term.sub orig name indx redx expr))
Kind.Term.get_origin r (Kind.Term.app orig func arg) got = (got orig (Kind.Term.app orig func arg))
Kind.Term.get_origin r (Kind.Term.hlp orig) got = (got orig (Kind.Term.hlp orig))
Kind.Term.get_origin r (Kind.Term.U60 orig) got = (got orig (Kind.Term.U60 orig))
Kind.Term.get_origin r (Kind.Term.u60 orig num) got = (got orig (Kind.Term.u60 orig num))
Kind.Term.get_origin r (Kind.Term.F60 orig) got = (got orig (Kind.Term.F60 orig))
Kind.Term.get_origin r (Kind.Term.f60 orig num) got = (got orig (Kind.Term.f60 orig num))
Kind.Term.get_origin r (Kind.Term.op2 orig op left right) got = (got orig (Kind.Term.op2 orig op left right))
Kind.Term.get_origin r (Kind.Term.ct0 ctid orig) got = (got orig (Kind.Term.ct0 ctid orig))
Kind.Term.get_origin r (Kind.Term.ct1 ctid orig x0) got = (got orig (Kind.Term.ct1 ctid orig x0))
Kind.Term.get_origin r (Kind.Term.ct2 ctid orig x0 x1) got = (got orig (Kind.Term.ct2 ctid orig x0 x1))
Kind.Term.get_origin r (Kind.Term.ct3 ctid orig x0 x1 x2) got = (got orig (Kind.Term.ct3 ctid orig x0 x1 x2))
Kind.Term.get_origin r (Kind.Term.ct4 ctid orig x0 x1 x2 x3) got = (got orig (Kind.Term.ct4 ctid orig x0 x1 x2 x3))
Kind.Term.get_origin r (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) got = (got orig (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4))
Kind.Term.get_origin r (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) got = (got orig (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5))
Kind.Term.get_origin r (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) got = (got orig (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6))
Kind.Term.get_origin r (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) got = (got orig (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7))
Kind.Term.get_origin r (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) got = (got orig (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8))
Kind.Term.get_origin r (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) got = (got orig (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9))
Kind.Term.get_origin r (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) got = (got orig (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10))
Kind.Term.get_origin r (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) got = (got orig (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11))
Kind.Term.get_origin r (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) got = (got orig (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))
Kind.Term.get_origin r (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) got = (got orig (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))
Kind.Term.get_origin r (Kind.Term.ct15 fnid orig args) got = (got orig (Kind.Term.ct15 fnid orig args))
Kind.Term.get_origin r (Kind.Term.ct16 fnid orig args) got = (got orig (Kind.Term.ct16 fnid orig args))
Kind.Term.get_origin r (Kind.Term.fn0 fnid orig) got = (got orig (Kind.Term.fn0 fnid orig))
Kind.Term.get_origin r (Kind.Term.fn1 fnid orig x0) got = (got orig (Kind.Term.fn1 fnid orig x0))
Kind.Term.get_origin r (Kind.Term.fn2 fnid orig x0 x1) got = (got orig (Kind.Term.fn2 fnid orig x0 x1))
Kind.Term.get_origin r (Kind.Term.fn3 fnid orig x0 x1 x2) got = (got orig (Kind.Term.fn3 fnid orig x0 x1 x2))
Kind.Term.get_origin r (Kind.Term.fn4 fnid orig x0 x1 x2 x3) got = (got orig (Kind.Term.fn4 fnid orig x0 x1 x2 x3))
Kind.Term.get_origin r (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) got = (got orig (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4))
Kind.Term.get_origin r (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) got = (got orig (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5))
Kind.Term.get_origin r (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) got = (got orig (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6))
Kind.Term.get_origin r (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) got = (got orig (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7))
Kind.Term.get_origin r (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) got = (got orig (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8))
Kind.Term.get_origin r (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) got = (got orig (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9))
Kind.Term.get_origin r (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) got = (got orig (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10))
Kind.Term.get_origin r (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) got = (got orig (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11))
Kind.Term.get_origin r (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) got = (got orig (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))
Kind.Term.get_origin r (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) got = (got orig (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))
Kind.Term.get_origin r (Kind.Term.fn15 fnid orig args) got = (got orig (Kind.Term.fn15 fnid orig args))
Kind.Term.get_origin r (Kind.Term.fn16 fnid orig args) got = (got orig (Kind.Term.fn16 fnid orig args))
Kind.Term.get_origin r (Kind.Term.args15 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) got = (Kind.Axiom.Null)
Kind.Term.get_origin r (Kind.Term.args16 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) got = (Kind.Axiom.Null)

Main : (List (Kind.Error.Quoted))
Main = (let imports = [(Dynamic.new ((a : _) => ((b : _) => (Kind.Term.set_origin a b)))) (Dynamic.new (Kind.API.check_all)) (Dynamic.new (Kind.API.eval_main))]; (Kind.API.check_all))

#derive[match]
type Kind.Coverage.Choice {
  on_cons (name: (Kind.Name))
  on_U60
  none
}

Kind.Term.show.sugar.string (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.string term = (do Maybe {ask res = (Kind.Term.show.sugar.string.go term);
 let quot = "'";
 return (Kind.Printer.text [quot res quot])
})

Kind.Term.show (term: (Kind.Term)) : (String)
Kind.Term.show term = (let sugars = [(Kind.Term.show.sugar.string term) (Kind.Term.show.sugar.list term) (Kind.Term.show.sugar.sigma term)]; (Maybe.try sugars (Kind.Term.show.go term)))

#kdl_name = List_intrsps
List.intersperse <a> (sep: a) (xs: (List a)) : (List a)
List.intersperse a sep (List.nil xa) = (List.nil)
List.intersperse a sep (List.cons xa xh (List.nil xa_)) = (List.pure xh)
List.intersperse a sep (List.cons xa xh xt) = (List.cons xh (List.cons sep (List.intersperse sep xt)))

type Kind.Term.Quoted {
  typ (orig: U60)
  hol (orig: U60) (number: U60)
  var (orig: U60) (name: U60) (index: U60)
  all (orig: U60) (name: U60) (typ: (Kind.Term.Quoted)) (body: (Kind.Term.Quoted))
  lam (orig: U60) (name: U60) (body: (Kind.Term.Quoted))
  app (orig: U60) (func: (Kind.Term.Quoted)) (arg: (Kind.Term.Quoted))
  let (orig: U60) (name: U60) (expr: (Kind.Term.Quoted)) (body: (Kind.Term.Quoted))
  ann (orig: U60) (expr: (Kind.Term.Quoted)) (typ: (Kind.Term.Quoted))
  sub (orig: U60) (name: U60) (indx: U60) (redx: U60) (expr: (Kind.Term.Quoted))
  ctr (ctid: (Kind.Name)) (orig: U60) (x0: (List (Kind.Term.Quoted)))
  fun (fnid: (Kind.Name)) (orig: U60) (x0: (List (Kind.Term.Quoted)))
  hlp (orig: U60)
  u60 (orig: U60)
  num (orig: U60) (num: U60)
  f60 (orig: U60)
  numf60 (orig: U60) (num: U60)
  op2 (orig: U60) (operator: (Kind.Operator)) (left: (Kind.Term.Quoted)) (right: (Kind.Term.Quoted))
  args15 (x0: (Kind.Term.Quoted)) (x1: (Kind.Term.Quoted)) (x2: (Kind.Term.Quoted)) (x3: (Kind.Term.Quoted)) (x4: (Kind.Term.Quoted)) (x5: (Kind.Term.Quoted)) (x6: (Kind.Term.Quoted)) (x7: (Kind.Term.Quoted)) (x8: (Kind.Term.Quoted)) (x9: (Kind.Term.Quoted)) (x10: (Kind.Term.Quoted)) (x11: (Kind.Term.Quoted)) (x12: (Kind.Term.Quoted)) (x13: (Kind.Term.Quoted)) (x14: (Kind.Term.Quoted))
  args16 (x0: (Kind.Term.Quoted)) (x1: (Kind.Term.Quoted)) (x2: (Kind.Term.Quoted)) (x3: (Kind.Term.Quoted)) (x4: (Kind.Term.Quoted)) (x5: (Kind.Term.Quoted)) (x6: (Kind.Term.Quoted)) (x7: (Kind.Term.Quoted)) (x8: (Kind.Term.Quoted)) (x9: (Kind.Term.Quoted)) (x10: (Kind.Term.Quoted)) (x11: (Kind.Term.Quoted)) (x12: (Kind.Term.Quoted)) (x13: (Kind.Term.Quoted)) (x14: (Kind.Term.Quoted)) (x15: (Kind.Term.Quoted))
}

#kdl_name = Maybe_map
Maybe.map <a: Type> <b: Type> (f: (a -> b)) (m: (Maybe a)) : (Maybe b)
Maybe.map a b f (Maybe.none t) = (Maybe.none)
Maybe.map a b f (Maybe.some t v) = (Maybe.some (f v))

#derive[match]
type Nat {
  zero
  succ (pred: (Nat))
}

#axiom
Kind.Term.FN2 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) : (Kind.Term)

Show : Type
Show = ((String) -> (String))

Char : Type
Char = U60

#axiom
Kind.Coverage.Maker.Mk (id: (Kind.Name)) (orig: U60) (ty: (Kind.Term)) : (Maybe (Kind.Coverage.Maker))

#derive[match]
type Dynamic {
  new <a> (value: a)
}

Kind.Context.shrink (ctx: (Kind.Context)) : (Kind.Context)
Kind.Context.shrink (Kind.Context.empty) = (Kind.Context.empty)
Kind.Context.shrink (Kind.Context.entry name type vals (Kind.Context.empty)) = (Kind.Context.empty)
Kind.Context.shrink (Kind.Context.entry name type vals rest) = (Kind.Context.entry name type vals (Kind.Context.shrink rest))

#axiom
Sigma. : (Kind.Name)

///  String version of the constructor
#axiom
Kind.Axiom.NameOf (name: (Kind.Name)) : (String)

#kdl_name = T2
#kdl_erase
#derive[match]
record Pair (a) (b) {
  constructor new
  fst : a 
  snd : b 
}

#kdl_name = If
#kdl_erase
U60.if <r: Type> (n: U60) (t: r) (f: r) : r
U60.if 0 t f = f
U60.if n t f = t

#kdl_name = T0
#kdl_erase
#derive[match]
record Unit {
  constructor new
}

U60.equal (a: U60) (b: U60) : (Bool)
U60.equal a b = (U60.to_bool (== a b))

Kind.Checker.equal.var (rhs: (Bool)) (orig: U60) (name: U60) (idx: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.var (Bool.false) orig name idx b = (do Kind.Checker {(Kind.Checker.add_value idx b);
return (Bool.true)
})
Kind.Checker.equal.var (Bool.true) a.orig a.name a.idx (Kind.Term.var b.orig b.name b.idx) = (if (U60.equal a.idx b.idx) {(Kind.Checker.pure (Bool.true))} else {(do Kind.Checker {ask a.val = (Kind.Checker.find a.idx [] (n => (t => (v => v))));
 ask b.val = (Kind.Checker.find b.idx [] (n => (t => (v => v))));
 ask a.chk = (Kind.Checker.equal.var.try_values a.val (Kind.Term.var b.orig b.name b.idx));
 ask b.chk = (Kind.Checker.equal.var.try_values b.val (Kind.Term.var a.orig a.name a.idx));
 return (Bool.or a.chk b.chk)
})})
Kind.Checker.equal.var (Bool.true) a.orig a.name a.idx b = (do Kind.Checker {ask sub = (Kind.Checker.get_subst);
 (if (Kind.Term.fillable b sub) {(Kind.Checker.equal (Kind.Term.var a.orig a.name a.idx) (Kind.Term.fill b sub))} else {(do Kind.Checker {ask a.val = (Kind.Checker.find a.idx [] (n => (t => (v => v))));
 ask res = (Kind.Checker.equal.var.try_values a.val b);
 return res
})})
})

Kind.Checker.generate_var (type: (Kind.Term)) : (Kind.Checker (Kind.Term))
Kind.Checker.generate_var type = (do Kind.Checker {ask depth = (Kind.Checker.get_depth);
 (Kind.Checker.extend 63 type []);
return (Kind.Term.var 0 63 depth)
})

#axiom
Kind.Term.FN0 (fnid: (Kind.Name)) (orig: U60) : (Kind.Term)

U60.show (n: U60) : (Show)
U60.show 0 = (str => (String.cons '0' str))
U60.show n = (str => (let next = (String.cons (+ 48 (% n 10)) str); (let func = (U60.if (Show) (< n 10) (h => h) (h => ((U60.show (/ n 10)) h))); (func next))))

///  Rules of a function
#axiom
Kind.Axiom.RuleOf (fnid: (Kind.Name)) : (List (Kind.Rule))

Kind.Coverage.Maker.add_constraint (cover_type: (Kind.Coverage.Type)) (term: (Kind.Term)) (type: (Kind.Term)) : (Kind.Coverage.Type)
Kind.Coverage.Maker.add_constraint (Kind.Coverage.Type.cons orig name typ constraints body) term type = (Kind.Coverage.Type.cons orig name typ (List.cons (Pair.new term type) constraints) body)
Kind.Coverage.Maker.add_constraint (Kind.Coverage.Type.end constraints body) term type = (Kind.Coverage.Type.end (List.cons (Pair.new term type) constraints) body)

Kind.Checker.unify (checker: (Kind.Checker (Unit))) : (Kind.Checker (Unit))
Kind.Checker.unify checker = (do Kind.Checker {checker;
ask equations = (Kind.Checker.get_equations);
 (Kind.Checker.unify.go equations (List.nil) (Bool.false))
})

Kind.Checker.infer.forall.try_values <r> (terms: (List (Kind.Term))) (then_fn: (U60 -> U60 -> (Kind.Term) -> ((Kind.Term) -> (Kind.Term)) -> (Kind.Checker r))) (else_val: (Kind.Checker r)) : (Kind.Checker r)
Kind.Checker.infer.forall.try_values r (List.cons (Kind.Term.all orig name type body) terms) then_fn else_val = (then_fn orig name type body)
Kind.Checker.infer.forall.try_values r (List.cons other terms) then_fn else_val = (Kind.Checker.infer.forall.try_values r terms then_fn else_val)
Kind.Checker.infer.forall.try_values r (List.nil) then_fn else_val = else_val

Kind.API.output.function.show_errors (ls: (List (Kind.Error))) (sub: (Kind.Subst)) (fnid: (Kind.Name)) (res: (List (Kind.Result (Unit)))) : (List (Kind.Error.Quoted))
Kind.API.output.function.show_errors (List.nil t) sub fnid checks = (Kind.API.output.function fnid checks)
Kind.API.output.function.show_errors (List.cons t err errs) sub fnid checks = (List.cons (Kind.API.output.error fnid err sub) (Kind.API.output.function.show_errors errs sub fnid checks))

Kind.Checker.local <a> (checker: (Kind.Checker a)) : (Kind.Checker a)
Kind.Checker.local checker = (old_context => (depth => (rhs => (subst => (eqts => (errs => (match Kind.Result res = (checker old_context depth rhs subst eqts errs) { errored => (Kind.Result.errored res.ctx res.sub res.errors); checked => (Kind.Result.checked old_context depth rhs subst eqts errs res.ret); })))))))

#axiom
Kind.Term.FN9 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) : (Kind.Term)

Kind.Checker.look (index: U60) : (Kind.Checker (Maybe (Kind.Term)))
Kind.Checker.look index = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs (Kind.Subst.look subst index))))))))

Kind.Coverage.if_all <res> (term: (Kind.Coverage.Type)) (if: (U60 -> U60 -> (Kind.Term) -> (List (Pair (Kind.Term) (Kind.Term))) -> ((Kind.Term) -> (Kind.Coverage.Type)) -> res)) (else: ((List (Pair (Kind.Term) (Kind.Term))) -> res)) : res
Kind.Coverage.if_all res (Kind.Coverage.Type.cons orig name typ constraints body) func_if else = (func_if orig name typ constraints body)
Kind.Coverage.if_all res (Kind.Coverage.Type.end constraints body) func_if else = (else constraints)

Kind.Coverage.Constraint.show (n: (Pair (Kind.Term) (Kind.Term))) : (String)
Kind.Coverage.Constraint.show (Pair.new fst snd) = (Kind.Printer.text [(Kind.Term.show fst) "/?" (Kind.Term.show snd)])

Kind.API.output.function (fnid: (Kind.Name)) (ls: (List (Kind.Result (Unit)))) : (List (Kind.Error.Quoted))
Kind.API.output.function fnid (List.nil t) = (List.nil)
Kind.API.output.function fnid (List.cons t (Kind.Result.checked a ctx dep rhs sub eqt err val) checks) = (Kind.API.output.function.show_errors err sub fnid checks)
Kind.API.output.function fnid (List.cons t (Kind.Result.errored a ctx sub err) checks) = (Kind.API.output.function.show_errors err sub fnid checks)

Kind.Coverage.Type.from_term (term: (Kind.Term)) (size: U60) : (Kind.Coverage.Type)
Kind.Coverage.Type.from_term term 0 = (Kind.Coverage.Type.end [] term)
Kind.Coverage.Type.from_term (Kind.Term.all orig name typ body) n = (Kind.Coverage.Type.cons orig name typ [] (arg => (Kind.Coverage.Type.from_term (body arg) (- n 1))))
Kind.Coverage.Type.from_term term n = (Kind.Coverage.Type.end [] term)

#axiom
List.nil. : (Kind.Name)

Kind.Term.show.go (term: (Kind.Term)) : (String)
Kind.Term.show.go (Kind.Term.typ orig) = "Type"
Kind.Term.show.go (Kind.Term.var orig name index) = (Kind.Printer.text [(Kind.Name.show name)])
Kind.Term.show.go (Kind.Term.hol orig numb) = (Kind.Printer.text ["_"])
Kind.Term.show.go (Kind.Term.all orig name type body) = (Kind.Term.show.forall orig name type body)
Kind.Term.show.go (Kind.Term.lam orig name body) = (Kind.Printer.text ["(" (Kind.Name.show name) " => " (Kind.Term.show (body (Kind.Term.var orig name 0))) ")"])
Kind.Term.show.go (Kind.Term.let orig name exp body) = (Kind.Printer.text ["let " (Kind.Name.show name) " = " (Kind.Term.show exp) "; " (Kind.Term.show (body (Kind.Term.var orig name 0)))])
Kind.Term.show.go (Kind.Term.ann orig expr type) = (Kind.Printer.text ["{" (Kind.Term.show expr) " :: " (Kind.Term.show type) "}"])
Kind.Term.show.go (Kind.Term.sub orig name indx redx expr) = (Kind.Printer.text [(Kind.Term.show expr) " ## " (Kind.Name.show name) "/" (Show.to_string (U60.show redx))])
Kind.Term.show.go (Kind.Term.app orig func argm) = (Kind.Printer.text ["(" (Kind.Term.show func) " " (Kind.Term.show argm) ")"])
Kind.Term.show.go (Kind.Term.ct0 ctid orig) = (Kind.Axiom.NameOf ctid)
Kind.Term.show.go (Kind.Term.ct1 ctid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) ")"])
Kind.Term.show.go (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) ")"])
Kind.Term.show.go (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) ")"])
Kind.Term.show.go (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) ")"])
Kind.Term.show.go (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) ")"])
Kind.Term.show.go (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) ")"])
Kind.Term.show.go (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) ")"])
Kind.Term.show.go (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) ")"])
Kind.Term.show.go (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) ")"])
Kind.Term.show.go (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) ")"])
Kind.Term.show.go (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) ")"])
Kind.Term.show.go (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) ")"])
Kind.Term.show.go (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) " " (Kind.Term.show x13) ")"])
Kind.Term.show.go (Kind.Term.ct15 ctid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.ct16 ctid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf ctid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.fn0 fnid orig) = (Kind.Axiom.NameOf fnid)
Kind.Term.show.go (Kind.Term.fn1 fnid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) ")"])
Kind.Term.show.go (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) ")"])
Kind.Term.show.go (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) ")"])
Kind.Term.show.go (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) ")"])
Kind.Term.show.go (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) ")"])
Kind.Term.show.go (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) ")"])
Kind.Term.show.go (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) ")"])
Kind.Term.show.go (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) ")"])
Kind.Term.show.go (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) ")"])
Kind.Term.show.go (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) ")"])
Kind.Term.show.go (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) ")"])
Kind.Term.show.go (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) ")"])
Kind.Term.show.go (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) " " (Kind.Term.show x13) ")"])
Kind.Term.show.go (Kind.Term.fn15 fnid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.fn16 fnid orig x0) = (Kind.Printer.text ["(" (Kind.Axiom.NameOf fnid) " " (Kind.Term.show x0) ")"])
Kind.Term.show.go (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (Kind.Printer.text [(Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) " " (Kind.Term.show x13) " " (Kind.Term.show x14)])
Kind.Term.show.go (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (Kind.Printer.text [(Kind.Term.show x0) " " (Kind.Term.show x1) " " (Kind.Term.show x2) " " (Kind.Term.show x3) " " (Kind.Term.show x4) " " (Kind.Term.show x5) " " (Kind.Term.show x6) " " (Kind.Term.show x7) " " (Kind.Term.show x8) " " (Kind.Term.show x9) " " (Kind.Term.show x10) " " (Kind.Term.show x11) " " (Kind.Term.show x12) " " (Kind.Term.show x13) " " (Kind.Term.show x14) " " (Kind.Term.show x15)])
Kind.Term.show.go (Kind.Term.hlp orig) = "?"
Kind.Term.show.go (Kind.Term.U60 orig) = "U60"
Kind.Term.show.go (Kind.Term.u60 orig numb) = (Show.to_string (U60.show numb))
Kind.Term.show.go (Kind.Term.F60 orig) = "F60"
Kind.Term.show.go (Kind.Term.f60 orig numb) = (Show.to_string (U60.show numb))
Kind.Term.show.go (Kind.Term.op2 orig operator left right) = (Kind.Printer.text ["(" (Kind.Operator.show operator) " " (Kind.Term.show left) " " (Kind.Term.show right) ")"])

#kdl_name = List_map
List.map <a> <b> (xs: (List a)) (f: (a -> b)) : (List b)
List.map a b (List.nil) f = (List.nil)
List.map a b (List.cons head tail) f = (List.cons (f head) (List.map tail f))

///  Just a "unsafe" constructor to fill some space
///  It can be used like the 'undefined' in Haskell
///  but it can cause some damage and undefined just
///  throws an error when evaluated in Haskell.
#axiom
Kind.Axiom.Null <a> : a

#axiom
Kind.Axiom.CoverCheck (name: (Kind.Name)) : (Bool)

#axiom
Kind.Axiom.Family.Constructors (fnid: (Kind.Name)) : (Maybe (List (Kind.Name)))

#axiom
String.nil. : (Kind.Name)

#inline
Maybe.pure <a: Type> (x: a) : (Maybe a)
Maybe.pure a x = (Maybe.some x)

#derive[match]
type Maybe (t) {
  none
  some (value: t)
}

Kind.Context.quote (context: (Kind.Context)) (sub: (Kind.Subst)) : (List (Pair U60 (Pair (Kind.Term.Quoted) (List (Kind.Term.Quoted)))))
Kind.Context.quote (Kind.Context.empty) sub = []
Kind.Context.quote (Kind.Context.entry name type vals rest) sub = (List.cons (Pair.new name (Pair.new (Kind.Term.quote type sub) (List.map vals (x => (Kind.Term.quote x sub))))) (Kind.Context.quote rest sub))

Kind.Coverage.catches (problem: (Kind.Coverage.Problem)) : (Bool)
Kind.Coverage.catches (Kind.Coverage.Problem.new type rows) = (Bool.and (List.all rows (x => (Kind.Coverage.Row.catches x))) (List.is_cons rows))

Kind.Term.show.sugar.list.go (term: (Kind.Term)) : (Maybe (List (String)))
Kind.Term.show.sugar.list.go (Kind.Term.ct0 (List.nil.) orig) = (Maybe.some (List.nil))
Kind.Term.show.sugar.list.go (Kind.Term.ct2 (List.cons.) orig x0 x1) = (do Maybe {ask tail = (Kind.Term.show.sugar.list.go x1);
 return (List.cons (Kind.Term.show x0) tail)
})
Kind.Term.show.sugar.list.go other = (Maybe.none)

#kdl_name = List_all
List.all <a> (xs: (List a)) (cond: (a -> (Bool))) : (Bool)
List.all a (List.nil t) cond = (Bool.true)
List.all a (List.cons t head tail) cond = (Bool.if (cond head) (List.all tail cond) (Bool.false))

#kdl_name = Pair_snd
Pair.snd <a> <b> (pair: (Pair a b)) : b
Pair.snd a b (Pair.new p.a p.b fst snd) = snd

Kind.Checker.infer.forall <r> (term: (Kind.Term)) (then_fn: (U60 -> U60 -> (Kind.Term) -> ((Kind.Term) -> (Kind.Term)) -> (Kind.Checker r))) (else_val: (Kind.Checker r)) : (Kind.Checker r)
Kind.Checker.infer.forall r (Kind.Term.all orig name type body) then_fn else_val = (then_fn orig name type body)
Kind.Checker.infer.forall r (Kind.Term.var orig name index) then_fn else_val = (do Kind.Checker {ask reducs = (Kind.Checker.find index [] (n => (t => (v => v))));
 ask result = (Kind.Checker.infer.forall.try_values r reducs then_fn else_val);
 return result
})
Kind.Checker.infer.forall r other then_fn else_val = else_val

Kind.Checker.get_equations : (Kind.Checker (List (Kind.Equation)))
Kind.Checker.get_equations = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs eqts)))))))

#inline
String.new_line : (String)
String.new_line = (String.pure (Char.newline))

Kind.Name.show (name: U60) : (String)
Kind.Name.show name = (Kind.Name.show.go name (String.nil))

#kdl_name = Pair_fst
Pair.fst <a> <b> (pair: (Pair a b)) : a
Pair.fst a b (Pair.new p.a p.b fst snd) = fst

Kind.Checker.equal (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal (Kind.Term.typ orig) (Kind.Term.typ orig1) = (Kind.Checker.pure (Bool.true))
Kind.Checker.equal (Kind.Term.all a.orig a.name a.type a.body) (Kind.Term.all b.orig b.name b.type b.body) = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask type = (Kind.Checker.equal a.type b.type);
 ask body = (Kind.Checker.extended (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Kind.Axiom.Null) (Kind.Axiom.Null) []);
 return (Bool.and type body)
})
Kind.Checker.equal (Kind.Term.lam a.orig a.name a.body) (Kind.Term.lam b.orig b.name b.body) = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask body = (Kind.Checker.extended (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Kind.Axiom.Null) (Kind.Axiom.Null) []);
 return body
})
Kind.Checker.equal (Kind.Term.app a.orig a.func a.argm) (Kind.Term.app b.orig b.func b.argm) = (do Kind.Checker {ask func = (Kind.Checker.equal a.func b.func);
 ask argm = (Kind.Checker.equal a.argm b.argm);
 return (Bool.and func argm)
})
Kind.Checker.equal (Kind.Term.let a.orig a.name a.expr a.body) (Kind.Term.let b.orig b.name b.expr b.body) = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask expr = (Kind.Checker.equal a.expr b.expr);
 ask body = (Kind.Checker.extended (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Kind.Axiom.Null) (Kind.Axiom.Null) []);
 return (Bool.and expr body)
})
Kind.Checker.equal (Kind.Term.ann a.orig a.expr a.type) (Kind.Term.ann b.orig b.expr b.type) = (do Kind.Checker {ask func = (Kind.Checker.equal a.expr b.expr);
 ask type = (Kind.Checker.equal a.type b.type);
 return (Bool.and func type)
})
Kind.Checker.equal (Kind.Term.sub a.orig a.name a.indx a.redx a.expr) (Kind.Term.sub b.orig b.name b.indx b.redx b.expr) = (do Kind.Checker {ask func = (Kind.Checker.equal a.expr b.expr);
 return func
})
Kind.Checker.equal (Kind.Term.U60 a.orig) (Kind.Term.U60 b.orig) = (Kind.Checker.pure (Bool.true))
Kind.Checker.equal (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Checker.pure (U60.equal a.num b.num))
Kind.Checker.equal (Kind.Term.op2 a.orig a.op a.val0 a.val1) (Kind.Term.op2 b.orig b.op b.val0 b.val1) = (do Kind.Checker {let op = (Kind.Operator.equal a.op b.op);
 ask val0 = (Kind.Checker.equal a.val0 b.val0);
 ask val1 = (Kind.Checker.equal a.val1 b.val1);
 return (Bool.and op (Bool.and val0 val1))
})
Kind.Checker.equal (Kind.Term.hol a.orig a.numb) (Kind.Term.hol b.orig b.numb) = (if (U60.equal a.numb b.numb) {(Kind.Checker.pure (Bool.true))} else {(Kind.Checker.equal.hol a.orig a.numb (Kind.Term.hol b.orig b.numb))})
Kind.Checker.equal (Kind.Term.hol a.orig a.numb) b = (Kind.Checker.equal.hol a.orig a.numb b)
Kind.Checker.equal b (Kind.Term.hol a.orig a.numb) = (Kind.Checker.equal.hol a.orig a.numb b)
Kind.Checker.equal (Kind.Term.var a.orig a.name a.idx) b = (do Kind.Checker {ask rhs = (Kind.Checker.get_right_hand_side);
 (Kind.Checker.equal.var rhs a.orig a.name a.idx b)
})
Kind.Checker.equal b (Kind.Term.var a.orig a.name a.idx) = (do Kind.Checker {ask rhs = (Kind.Checker.get_right_hand_side);
 (Kind.Checker.equal.var rhs a.orig a.name a.idx b)
})
Kind.Checker.equal (Kind.Term.ct0 a.ctid a.orig) (Kind.Term.ct0 b.ctid b.orig) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 return ctid
})
Kind.Checker.equal (Kind.Term.ct1 a.ctid a.orig a.x0) (Kind.Term.ct1 b.ctid b.orig b.x0) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 return (Bool.and ctid x0)
})
Kind.Checker.equal (Kind.Term.ct2 a.ctid a.orig a.x0 a.x1) (Kind.Term.ct2 b.ctid b.orig b.x0 b.x1) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 return (Bool.and ctid (Bool.and x0 x1))
})
Kind.Checker.equal (Kind.Term.ct3 a.ctid a.orig a.x0 a.x1 a.x2) (Kind.Term.ct3 b.ctid b.orig b.x0 b.x1 b.x2) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 x2)))
})
Kind.Checker.equal (Kind.Term.ct4 a.ctid a.orig a.x0 a.x1 a.x2 a.x3) (Kind.Term.ct4 b.ctid b.orig b.x0 b.x1 b.x2 b.x3) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 x3))))
})
Kind.Checker.equal (Kind.Term.ct5 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4) (Kind.Term.ct5 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 x4)))))
})
Kind.Checker.equal (Kind.Term.ct6 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5) (Kind.Term.ct6 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 x5))))))
})
Kind.Checker.equal (Kind.Term.ct7 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6) (Kind.Term.ct7 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 x6)))))))
})
Kind.Checker.equal (Kind.Term.ct8 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7) (Kind.Term.ct8 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 x7))))))))
})
Kind.Checker.equal (Kind.Term.ct9 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8) (Kind.Term.ct9 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 x8)))))))))
})
Kind.Checker.equal (Kind.Term.ct10 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9) (Kind.Term.ct10 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 x9))))))))))
})
Kind.Checker.equal (Kind.Term.ct11 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10) (Kind.Term.ct11 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 x10)))))))))))
})
Kind.Checker.equal (Kind.Term.ct12 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11) (Kind.Term.ct12 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 x11))))))))))))
})
Kind.Checker.equal (Kind.Term.ct13 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12) (Kind.Term.ct13 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 x12)))))))))))))
})
Kind.Checker.equal (Kind.Term.ct14 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13) (Kind.Term.ct14 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 ask x13 = (Kind.Checker.equal a.x13 b.x13);
 return (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 x13))))))))))))))
})
Kind.Checker.equal (Kind.Term.ct15 a.ctid a.orig a.args) (Kind.Term.ct15 b.ctid b.orig b.args) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask xargs = (Kind.Checker.equal a.args b.args);
 return (Bool.and ctid xargs)
})
Kind.Checker.equal (Kind.Term.ct16 a.ctid a.orig a.args) (Kind.Term.ct16 b.ctid b.orig b.args) = (do Kind.Checker {let ctid = (U60.equal (Kind.Axiom.HashOf a.ctid) (Kind.Axiom.HashOf b.ctid));
 ask xargs = (Kind.Checker.equal a.args b.args);
 return (Bool.and ctid xargs)
})
Kind.Checker.equal (Kind.Term.args15 a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13 a.x14) (Kind.Term.args15 b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13 b.x14) = (do Kind.Checker {ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 ask x13 = (Kind.Checker.equal a.x13 b.x13);
 ask x14 = (Kind.Checker.equal a.x14 b.x14);
 return (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 (Bool.and x13 x14))))))))))))))
})
Kind.Checker.equal (Kind.Term.args16 a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13 a.x14 a.x15) (Kind.Term.args16 b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13 b.x14 b.x15) = (do Kind.Checker {ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 ask x13 = (Kind.Checker.equal a.x13 b.x13);
 ask x14 = (Kind.Checker.equal a.x14 b.x14);
 ask x15 = (Kind.Checker.equal a.x15 b.x15);
 return (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 (Bool.and x13 (Bool.and x14 x15)))))))))))))))
})
Kind.Checker.equal (Kind.Term.fn0 a.fnid a.orig) (Kind.Term.fn0 b.fnid b.orig) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 return fnid
})
Kind.Checker.equal (Kind.Term.fn1 a.fnid a.orig a.x0) (Kind.Term.fn1 b.fnid b.orig b.x0) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 return (Bool.and fnid x0)
})
Kind.Checker.equal (Kind.Term.fn2 a.fnid a.orig a.x0 a.x1) (Kind.Term.fn2 b.fnid b.orig b.x0 b.x1) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 return (Bool.and fnid (Bool.and x0 x1))
})
Kind.Checker.equal (Kind.Term.fn3 a.fnid a.orig a.x0 a.x1 a.x2) (Kind.Term.fn3 b.fnid b.orig b.x0 b.x1 b.x2) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 x2)))
})
Kind.Checker.equal (Kind.Term.fn4 a.fnid a.orig a.x0 a.x1 a.x2 a.x3) (Kind.Term.fn4 b.fnid b.orig b.x0 b.x1 b.x2 b.x3) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 x3))))
})
Kind.Checker.equal (Kind.Term.fn5 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4) (Kind.Term.fn5 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 x4)))))
})
Kind.Checker.equal (Kind.Term.fn6 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5) (Kind.Term.fn6 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 x5))))))
})
Kind.Checker.equal (Kind.Term.fn7 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6) (Kind.Term.fn7 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 x6)))))))
})
Kind.Checker.equal (Kind.Term.fn8 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7) (Kind.Term.fn8 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 x7))))))))
})
Kind.Checker.equal (Kind.Term.fn9 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8) (Kind.Term.fn9 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 x8)))))))))
})
Kind.Checker.equal (Kind.Term.fn10 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9) (Kind.Term.fn10 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 x9))))))))))
})
Kind.Checker.equal (Kind.Term.fn11 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10) (Kind.Term.fn11 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 x10)))))))))))
})
Kind.Checker.equal (Kind.Term.fn12 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11) (Kind.Term.fn12 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 x11))))))))))))
})
Kind.Checker.equal (Kind.Term.fn13 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12) (Kind.Term.fn13 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 x12)))))))))))))
})
Kind.Checker.equal (Kind.Term.fn14 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13) (Kind.Term.fn14 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask x0 = (Kind.Checker.equal a.x0 b.x0);
 ask x1 = (Kind.Checker.equal a.x1 b.x1);
 ask x2 = (Kind.Checker.equal a.x2 b.x2);
 ask x3 = (Kind.Checker.equal a.x3 b.x3);
 ask x4 = (Kind.Checker.equal a.x4 b.x4);
 ask x5 = (Kind.Checker.equal a.x5 b.x5);
 ask x6 = (Kind.Checker.equal a.x6 b.x6);
 ask x7 = (Kind.Checker.equal a.x7 b.x7);
 ask x8 = (Kind.Checker.equal a.x8 b.x8);
 ask x9 = (Kind.Checker.equal a.x9 b.x9);
 ask x10 = (Kind.Checker.equal a.x10 b.x10);
 ask x11 = (Kind.Checker.equal a.x11 b.x11);
 ask x12 = (Kind.Checker.equal a.x12 b.x12);
 ask x13 = (Kind.Checker.equal a.x13 b.x13);
 return (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 x13))))))))))))))
})
Kind.Checker.equal (Kind.Term.fn15 a.fnid a.orig a.args) (Kind.Term.fn15 b.fnid b.orig b.args) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask xargs = (Kind.Checker.equal a.args b.args);
 return (Bool.and fnid xargs)
})
Kind.Checker.equal (Kind.Term.fn16 a.fnid a.orig a.args) (Kind.Term.fn16 b.fnid b.orig b.args) = (do Kind.Checker {let fnid = (U60.equal (Kind.Axiom.HashOf a.fnid) (Kind.Axiom.HashOf b.fnid));
 ask xargs = (Kind.Checker.equal a.args b.args);
 return (Bool.and fnid xargs)
})
Kind.Checker.equal a b = (do Kind.Checker {ask sub = (Kind.Checker.get_subst);
 (if (Bool.or (Kind.Term.fillable a sub) (Kind.Term.fillable b sub)) {(Kind.Checker.equal (Kind.Term.fill a sub) (Kind.Term.fill b sub))} else {(Kind.Checker.pure (Bool.false))})
})

#axiom
Kind.Term.FN16 (fnid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

#kdl_name = Bool_or
Bool.or (a: (Bool)) (b: (Bool)) : (Bool)
Bool.or (Bool.true) b = (Bool.true)
Bool.or (Bool.false) b = b

Kind.Name.show.go (name: U60) (chrs: (String)) : (String)
Kind.Name.show.go name chrs = (U60.if (== name 0) chrs (let val = (% name 64); (let chr = (U60.if (== val 0) '.' (U60.if (& (<= 1 val) (<= val 10)) (+ (- val 1) '0') (U60.if (& (<= 11 val) (<= val 36)) (+ (- val 11) 'A') (U60.if (& (<= 37 val) (<= val 62)) (+ (- val 37) 'a') (U60.if (== val 63) '_' '?'))))); (Kind.Name.show.go (/ name 64) (String.cons chr chrs)))))

Kind.Coverage.specialize_rules (type_name: (Kind.Name)) (name: (Kind.Name)) (rules: (List (Kind.Rule))) : (Kind.Checker (List (Kind.Rule)))
Kind.Coverage.specialize_rules type_name name (List.cons rule rules) = (do Kind.Checker {let splitted = (Kind.Coverage.split_rule rule);
 (match Maybe splitted { some value => (do Kind.Checker {let params = (Kind.Axiom.Family.Params type_name);
 let row = (Kind.Coverage.specialize_rule name (Pair.fst value) (Pair.snd value));
 ask next = (Kind.Coverage.specialize_rules type_name name rules);
 return (Maybe.match row (name_ => _) next (value => (List.cons (Kind.Coverage.drop_rule params value) next)))
}); none => (Kind.Coverage.specialize_rules type_name name rules); })
})
Kind.Coverage.specialize_rules type_name name (List.nil) = (Kind.Checker.pure (List.nil))

Kind.Coverage.specialize (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Type))) (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.specialize type body (Kind.Coverage.Problem.new cur_type rows) = (let problem = (Kind.Coverage.Problem.new cur_type rows); (Maybe.default (do Maybe {ask type_name = (Kind.Coverage.get_name type);
 ask constructors = (Kind.Axiom.Family.Constructors type_name);
 return (Kind.Coverage.specialize_list type_name constructors type body problem)
}) (Kind.Coverage.intro_or_incomplete type body problem)))

Kind.Coverage.intro_all (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Type))) (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.intro_all type body (Kind.Coverage.Problem.new _ rows) = (do Kind.Checker {ask var = (Kind.Checker.generate_var type);
 let new_type = (body var);
 let new_rows = (List.map rows (x => (Kind.Coverage.Row.intro_all x)));
 let new_problem = (Kind.Coverage.Problem.new new_type new_rows);
 ask term_result = (Kind.Coverage.solve new_problem);
 return (Maybe.map (scrutinee => (List.cons (Kind.Term.Quoted.var 0 63 0) scrutinee)) term_result)
})

#axiom
Kind.Term.FN11 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) : (Kind.Term)

Kind.Checker.with_context <a> (checker: (Kind.Checker a)) (context: (Kind.Context)) : (Kind.Checker a)
Kind.Checker.with_context a checker new_context = (do Kind.Checker {ask old_context = (Kind.Checker.set_context new_context);
 ask got = checker;
 (Kind.Checker.set_context old_context);
return got
})

Kind.Subst.fill (subst: (Kind.Subst)) (depth: U60) (term: (Kind.Term)) : (Kind.Subst)
Kind.Subst.fill (Kind.Subst.end) 0 term = (Kind.Subst.sub term (Kind.Subst.end))
Kind.Subst.fill (Kind.Subst.unfilled rest) 0 term = (Kind.Subst.sub term rest)
Kind.Subst.fill (Kind.Subst.sub lost rest) 0 term = (Kind.Subst.sub term rest)
Kind.Subst.fill (Kind.Subst.end) n term = (Kind.Subst.unfilled (Kind.Subst.fill (Kind.Subst.end) (- n 1) term))
Kind.Subst.fill (Kind.Subst.unfilled rest) n term = (Kind.Subst.unfilled (Kind.Subst.fill rest (- n 1) term))
Kind.Subst.fill (Kind.Subst.sub keep rest) n term = (Kind.Subst.sub keep (Kind.Subst.fill rest (- n 1) term))

Kind.Term.show.sugar.string.go (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.string.go (Kind.Term.ct0 (String.nil.) orig) = (Maybe.some (String.nil))
Kind.Term.show.sugar.string.go (Kind.Term.ct2 (String.cons.) orig (Kind.Term.u60 orig1 x0) x1) = (do Maybe {ask tail = (Kind.Term.show.sugar.string.go x1);
 return (String.cons x0 tail)
})
Kind.Term.show.sugar.string.go other = (Maybe.none)

Kind.Term.eval_let (orig: U60) (name: U60) (expr: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Term))) : (Kind.Term)
Kind.Term.eval_let orig name expr body = (body expr)

Kind.Checker.new_equation (orig: U60) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.new_equation orig left right = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst (List.append eqts (Kind.Equation.new context orig left right)) errs (Unit.new))))))))

Kind.Term.fill (term: (Kind.Term)) (subst: (Kind.Subst)) : (Kind.Term)
Kind.Term.fill term (Kind.Subst.end) = term
Kind.Term.fill (Kind.Term.typ orig) sub = (Kind.Term.typ orig)
Kind.Term.fill (Kind.Term.var orig name index) sub = (Kind.Term.var orig name index)
Kind.Term.fill (Kind.Term.all orig name typ body) sub = (Kind.Term.all orig name (Kind.Term.fill typ sub) (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.lam orig name body) sub = (Kind.Term.lam orig name (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.let orig name expr body) sub = (Kind.Term.eval_let orig name (Kind.Term.fill expr sub) (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.ann orig expr typ) sub = (Kind.Term.eval_ann orig (Kind.Term.fill expr sub) (Kind.Term.fill typ sub))
Kind.Term.fill (Kind.Term.sub orig name indx redx expr) sub = (Kind.Term.eval_sub orig name indx redx (Kind.Term.fill expr sub))
Kind.Term.fill (Kind.Term.app orig expr typ) sub = (Kind.Term.eval_app orig (Kind.Term.fill expr sub) (Kind.Term.fill typ sub))
Kind.Term.fill (Kind.Term.hlp orig) sub = (Kind.Term.hlp orig)
Kind.Term.fill (Kind.Term.U60 orig) sub = (Kind.Term.U60 orig)
Kind.Term.fill (Kind.Term.F60 orig) sub = (Kind.Term.F60 orig)
Kind.Term.fill (Kind.Term.f60 orig num) sub = (Kind.Term.f60 orig num)
Kind.Term.fill (Kind.Term.u60 orig num) sub = (Kind.Term.u60 orig num)
Kind.Term.fill (Kind.Term.op2 orig op left right) sub = (Kind.Term.op2 orig op (Kind.Term.fill left sub) (Kind.Term.fill right sub))
Kind.Term.fill (Kind.Term.ct0 ctid orig) sub = (Kind.Term.ct0 ctid orig)
Kind.Term.fill (Kind.Term.ct1 ctid orig x0) sub = (Kind.Term.ct1 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.ct2 ctid orig x0 x1) sub = (Kind.Term.ct2 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub))
Kind.Term.fill (Kind.Term.ct3 ctid orig x0 x1 x2) sub = (Kind.Term.ct3 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub))
Kind.Term.fill (Kind.Term.ct4 ctid orig x0 x1 x2 x3) sub = (Kind.Term.ct4 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub))
Kind.Term.fill (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) sub = (Kind.Term.ct5 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub))
Kind.Term.fill (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) sub = (Kind.Term.ct6 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub))
Kind.Term.fill (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) sub = (Kind.Term.ct7 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub))
Kind.Term.fill (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Kind.Term.ct8 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub))
Kind.Term.fill (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Kind.Term.ct9 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub))
Kind.Term.fill (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Kind.Term.ct10 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub))
Kind.Term.fill (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Kind.Term.ct11 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub))
Kind.Term.fill (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Kind.Term.ct12 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub))
Kind.Term.fill (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Kind.Term.ct13 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub))
Kind.Term.fill (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Kind.Term.ct14 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub))
Kind.Term.fill (Kind.Term.ct15 ctid orig x0) sub = (Kind.Term.ct15 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.ct16 ctid orig x0) sub = (Kind.Term.ct16 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn0 fnid orig) sub = (Kind.Term.FN0 fnid orig)
Kind.Term.fill (Kind.Term.fn1 fnid orig x0) sub = (Kind.Term.FN1 fnid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn2 fnid orig x0 x1) sub = (Kind.Term.FN2 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub))
Kind.Term.fill (Kind.Term.fn3 fnid orig x0 x1 x2) sub = (Kind.Term.FN3 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub))
Kind.Term.fill (Kind.Term.fn4 fnid orig x0 x1 x2 x3) sub = (Kind.Term.FN4 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub))
Kind.Term.fill (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) sub = (Kind.Term.FN5 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub))
Kind.Term.fill (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) sub = (Kind.Term.FN6 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub))
Kind.Term.fill (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) sub = (Kind.Term.FN7 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub))
Kind.Term.fill (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Kind.Term.FN8 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub))
Kind.Term.fill (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Kind.Term.FN9 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub))
Kind.Term.fill (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Kind.Term.FN10 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub))
Kind.Term.fill (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Kind.Term.FN11 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub))
Kind.Term.fill (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Kind.Term.FN12 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub))
Kind.Term.fill (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Kind.Term.FN13 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub))
Kind.Term.fill (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Kind.Term.FN14 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub))
Kind.Term.fill (Kind.Term.fn15 ctid orig x0) sub = (Kind.Term.FN15 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn16 ctid orig x0) sub = (Kind.Term.FN16 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) sub = (Kind.Term.args15 (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub) (Kind.Term.fill x14 sub))
Kind.Term.fill (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) sub = (Kind.Term.args16 (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub) (Kind.Term.fill x14 sub) (Kind.Term.fill x15 sub))
Kind.Term.fill (Kind.Term.hol orig numb) sub = (let substRes = (Kind.Subst.look sub numb); (match Maybe substRes { none => (Kind.Term.hol orig numb); some value => (Kind.Term.fill value sub); }))

Kind.API.check_function.rules (rules: (List (Kind.Rule))) (type: (Kind.Term)) : (List (Kind.Result (Unit)))
Kind.API.check_function.rules (List.nil t) type = (List.nil)
Kind.API.check_function.rules (List.cons t rule rules) type = (let head = (Kind.Checker.run (Kind.Checker.unify (Kind.Checker.rule rule type)) (Bool.false)); (let tail = (Kind.API.check_function.rules rules type); (List.cons head tail)))

#axiom
Kind.Term.FN14 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) : (Kind.Term)

Kind.Checker.bind.result <a> <b> (result: (Kind.Result a)) (then: (a -> (Kind.Checker b))) : (Kind.Result b)
Kind.Checker.bind.result a b (Kind.Result.checked a1 context depth rhs sub equations errs ret) then = (then ret context depth rhs sub equations errs)
Kind.Checker.bind.result a b (Kind.Result.errored a1 context sub errs) then = (Kind.Result.errored context sub errs)

Kind.Coverage.Maker.make (maker: (Kind.Coverage.Maker)) (type: (Kind.Term)) (and_then: ((Kind.Term) -> (Kind.Coverage.Type))) : (Kind.Coverage.Type)
Kind.Coverage.Maker.make (Kind.Coverage.Maker.Cons name typ body) cur_type and_then = (Kind.Coverage.Type.cons 0 97 typ [] (arg => (Kind.Coverage.Maker.make (body arg) cur_type and_then)))
Kind.Coverage.Maker.make (Kind.Coverage.Maker.End other) cur_type and_then = (let name = (Maybe.bind (Kind.Coverage.get_name cur_type) (x => (let size = (Kind.Axiom.Family.Indices x); (U60.if size (Maybe.some size) (Maybe.none))))); (let result = (and_then other); (match Maybe name with result { some => (Kind.Coverage.Maker.add_constraint result other cur_type); none => result; })))

///  The 60 bits hash of a constructor/function
#axiom
Kind.Axiom.HashOf (u: (Kind.Name)) : U60

type Kind.Operator {
  add
  sub
  mul
  div
  mod
  and
  or
  xor
  shl
  shr
  ltn
  lte
  eql
  gte
  gtn
  neq
}

#kdl_name = List_is_nil
List.is_nil <a> (xs: (List a)) : (Bool)
List.is_nil a (List.nil t) = (Bool.true)
List.is_nil a (List.cons t head tail) = (Bool.false)

#kdl_name = Bool_if
Bool.if <a> (b: (Bool)) (t: a) (f: a) : a
Bool.if a (Bool.true) t f = t
Bool.if a (Bool.false) t f = f

#kdl_name = Bool_and
Bool.and (a: (Bool)) (b: (Bool)) : (Bool)
Bool.and (Bool.true) b = b
Bool.and (Bool.false) b = (Bool.false)

Kind.Operator.equal (left: (Kind.Operator)) (right: (Kind.Operator)) : (Bool)
Kind.Operator.equal (Kind.Operator.and) (Kind.Operator.and) = (Bool.true)
Kind.Operator.equal (Kind.Operator.sub) (Kind.Operator.sub) = (Bool.true)
Kind.Operator.equal (Kind.Operator.mul) (Kind.Operator.mul) = (Bool.true)
Kind.Operator.equal (Kind.Operator.div) (Kind.Operator.div) = (Bool.true)
Kind.Operator.equal (Kind.Operator.mod) (Kind.Operator.mod) = (Bool.true)
Kind.Operator.equal (Kind.Operator.and) (Kind.Operator.and) = (Bool.true)
Kind.Operator.equal (Kind.Operator.or) (Kind.Operator.or) = (Bool.true)
Kind.Operator.equal (Kind.Operator.xor) (Kind.Operator.xor) = (Bool.true)
Kind.Operator.equal (Kind.Operator.shl) (Kind.Operator.shl) = (Bool.true)
Kind.Operator.equal (Kind.Operator.shr) (Kind.Operator.shr) = (Bool.true)
Kind.Operator.equal (Kind.Operator.ltn) (Kind.Operator.ltn) = (Bool.true)
Kind.Operator.equal (Kind.Operator.lte) (Kind.Operator.lte) = (Bool.true)
Kind.Operator.equal (Kind.Operator.eql) (Kind.Operator.eql) = (Bool.true)
Kind.Operator.equal (Kind.Operator.gte) (Kind.Operator.gte) = (Bool.true)
Kind.Operator.equal (Kind.Operator.gtn) (Kind.Operator.gtn) = (Bool.true)
Kind.Operator.equal (Kind.Operator.neq) (Kind.Operator.neq) = (Bool.true)
Kind.Operator.equal a b = (Bool.false)

type Kind.Context {
  empty
  entry (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) (rest: (Kind.Context))
}

Kind.Coverage.specialize_rule (name: (Kind.Name)) (expr: (Kind.Term)) (rest: (Kind.Rule)) : (Maybe (Kind.Rule))
Kind.Coverage.specialize_rule n (Kind.Term.ct0 name orig) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some rule) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct1 name orig x0) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 rule)) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct2 name orig x0 x1) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 rule))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct3 name orig x0 x1 x2) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 rule)))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct4 name orig x0 x1 x2 x3) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 rule))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct5 name orig x0 x1 x2 x3 x4) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 rule)))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct6 name orig x0 x1 x2 x3 x4 x5) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 rule))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct7 name orig x0 x1 x2 x3 x4 x5 x6) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 rule)))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct8 name orig x0 x1 x2 x3 x4 x5 x6 x7) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 rule))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct9 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 rule)))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct10 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 rule))))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct11 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 rule)))))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct12 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 (Kind.Rule.lhs x11 rule))))))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct13 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 (Kind.Rule.lhs x11 (Kind.Rule.lhs x12 rule)))))))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct14 name orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) rule = (Bool.if (Kind.Axiom.Compare n name) (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 (Kind.Rule.lhs x11 (Kind.Rule.lhs x12 (Kind.Rule.lhs x13 rule))))))))))))))) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct15 name orig x0) rule = (Bool.if (Kind.Axiom.Compare n name) (Kind.Coverage.specialize_rule n x0 rule) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.ct16 name orig x0) rule = (Bool.if (Kind.Axiom.Compare n name) (Kind.Coverage.specialize_rule n x0 rule) (Maybe.none))
Kind.Coverage.specialize_rule n (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) rule = (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 (Kind.Rule.lhs x11 (Kind.Rule.lhs x12 (Kind.Rule.lhs x13 (Kind.Rule.lhs x14 rule))))))))))))))))
Kind.Coverage.specialize_rule n (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) rule = (Maybe.some (Kind.Rule.lhs x0 (Kind.Rule.lhs x1 (Kind.Rule.lhs x2 (Kind.Rule.lhs x3 (Kind.Rule.lhs x4 (Kind.Rule.lhs x5 (Kind.Rule.lhs x6 (Kind.Rule.lhs x7 (Kind.Rule.lhs x8 (Kind.Rule.lhs x9 (Kind.Rule.lhs x10 (Kind.Rule.lhs x11 (Kind.Rule.lhs x12 (Kind.Rule.lhs x13 (Kind.Rule.lhs x14 (Kind.Rule.lhs x15 rule)))))))))))))))))
Kind.Coverage.specialize_rule n (Kind.Term.var orig name index) rule = (Maybe.some (Kind.Coverage.craft (Kind.Axiom.ArgsCount n) rule))
Kind.Coverage.specialize_rule n _ rule = (Maybe.none)

Kind.Term.show.sugar.sigma (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.sigma (Kind.Term.ct2 (Sigma.) orig typ (Kind.Term.lam orig_ name body)) = (Maybe.some (Kind.Printer.text ["([" (Kind.Name.show name) ": " (Kind.Term.show typ) "] -> " (Kind.Term.show (body (Kind.Term.var orig_ name 0))) ")"]))
Kind.Term.show.sugar.sigma term = (Maybe.none)

Kind.Term.eval_op (orig: U60) (op: (Kind.Operator)) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_op orig (Kind.Operator.add) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (+ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.sub) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (- a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.mul) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (* a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.div) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (/ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.mod) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (% a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.and) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (& a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.or) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (| a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.xor) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (^ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.shl) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (<< a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.shr) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (>> a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.ltn) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (< a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.lte) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (<= a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.eql) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (== a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.gte) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (>= a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.gtn) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (> a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.neq) (Kind.Term.u60 a.orig a.num) (Kind.Term.u60 b.orig b.num) = (Kind.Term.u60 0 (!= a.num b.num))
Kind.Term.eval_op orig op left right = (Kind.Term.op2 orig op left right)

Kind.Printer.text (ls: (List (String))) : (String)
Kind.Printer.text (List.nil t) = (String.nil)
Kind.Printer.text (List.cons t x xs) = (String.concat x (Kind.Printer.text xs))

Kind.Checker.fail <t> (err: (Kind.Error)) : (Kind.Checker t)
Kind.Checker.fail t err = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.errored context subst (List.cons err errs))))))))

type Kind.Subst {
  end
  unfilled (rest: (Kind.Subst))
  sub (term: (Kind.Term)) (rest: (Kind.Subst))
}

type Kind.Rule {
  lhs (arg: (Kind.Term)) (args: (Kind.Rule))
  rhs (arg: (Kind.Term))
}

Kind.Checker.pure <t> (a: t) : (Kind.Checker t)
Kind.Checker.pure t res = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs res)))))))

Kind.Checker.extended <a> (checker: (Kind.Checker a)) (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) : (Kind.Checker a)
Kind.Checker.extended a checker name type vals = (do Kind.Checker {(Kind.Checker.extend name type vals);
ask got = checker;
 (Kind.Checker.shrink);
return got
})

type Kind.Coverage.Maker {
  Cons (name: U60) (ty: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Maker)))
  End (body: (Kind.Term))
}

Kind.API.check_functions (fnid: (List (Kind.Name))) : (List (Pair (Kind.Name) (List (Kind.Result (Unit)))))
Kind.API.check_functions (List.nil t) = (List.nil)
Kind.API.check_functions (List.cons t f fs) = (let head = (Pair.new f (Kind.API.check_function f)); (let tail = (Kind.API.check_functions fs); (List.cons head tail)))

#axiom
Kind.Term.FN12 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) : (Kind.Term)

Kind.Term.eval_app (orig: U60) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_app orig (Kind.Term.lam orig1 name body) arg = (body arg)
Kind.Term.eval_app orig func arg = (Kind.Term.app orig func arg)

Kind.Checker.bind <a> <b> (checker: (Kind.Checker a)) (then: (a -> (Kind.Checker b))) : (Kind.Checker b)
Kind.Checker.bind a b checker then = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Checker.bind.result (checker context depth rhs subst eqts errs) then)))))))

Kind.Coverage.check (function_id: (Kind.Name)) : (Kind.Checker (Unit))
Kind.Coverage.check fnid = (do Kind.Checker {(Kind.Checker.set_right_hand_side (Bool.false));
let rules = (Kind.Axiom.RuleOf fnid);
 let type = (Kind.Axiom.TypeOf fnid);
 let size = (Kind.Axiom.ArgsCount fnid);
 let new_type = (Kind.Coverage.Type.from_term type size);
 let problem = (Kind.Coverage.Problem.new new_type rules);
 ask result = (Kind.Coverage.solve problem);
 ask ctx = (Kind.Checker.get_context);
 (match Maybe result { some => (Kind.Checker.fail (Kind.Error.uncovered_pattern ctx (Kind.Axiom.OrigOf fnid) result.value)); none => (Kind.Checker.pure (Unit.new)); });
return (Unit.new)
})

Kind.Checker.infer_args (args: (Kind.Term)) : ((Kind.Term) -> U60 -> (Kind.Term))
Kind.Checker.infer_args (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (term => (orig => (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig term x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13) x14)))
Kind.Checker.infer_args (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (term => (orig => (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig term x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13) x14) x15)))
Kind.Checker.infer_args term = (x_ => (orig => term))

Kind.Checker.get_right_hand_side : (Kind.Checker (Bool))
Kind.Checker.get_right_hand_side = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked context depth rhs subst eqts errs rhs)))))))

Kind.Context.extend (prev: (Kind.Context)) (name: U60) (term: (Kind.Term)) (ls: (List (Kind.Term))) : (Kind.Context)
Kind.Context.extend (Kind.Context.empty) name type values = (Kind.Context.entry name type values (Kind.Context.empty))
Kind.Context.extend (Kind.Context.entry n t v rest) name type values = (Kind.Context.entry n t v (Kind.Context.extend rest name type values))

type Kind.Term {
  typ (orig: U60)
  hol (orig: U60) (number: U60)
  var (orig: U60) (name: U60) (index: U60)
  all (orig: U60) (name: U60) (typ: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Term)))
  lam (orig: U60) (name: U60) (body: ((Kind.Term) -> (Kind.Term)))
  app (orig: U60) (func: (Kind.Term)) (arg: (Kind.Term))
  let (orig: U60) (name: U60) (expr: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Term)))
  ann (orig: U60) (expr: (Kind.Term)) (typ: (Kind.Term))
  sub (orig: U60) (name: U60) (indx: U60) (redx: U60) (expr: (Kind.Term))
  ct0 (ctid: (Kind.Name)) (orig: U60)
  ct1 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term))
  ct2 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term))
  ct3 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term))
  ct4 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term))
  ct5 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term))
  ct6 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term))
  ct7 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term))
  ct8 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term))
  ct9 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term))
  ct10 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term))
  ct11 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term))
  ct12 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term))
  ct13 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term))
  ct14 (ctid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term))
  ct15 (ctid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)
  ct16 (ctid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)
  fn0 (fnid: (Kind.Name)) (orig: U60)
  fn1 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term))
  fn2 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term))
  fn3 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term))
  fn4 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term))
  fn5 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term))
  fn6 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term))
  fn7 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term))
  fn8 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term))
  fn9 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term))
  fn10 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term))
  fn11 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term))
  fn12 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term))
  fn13 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term))
  fn14 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term))
  fn15 (fnid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)
  fn16 (fnid: (Kind.Name)) (orig: U60) (args: (Kind.Term)) : (Kind.Term)
  hlp (orig: U60)
  U60 (orig: U60)
  u60 (orig: U60) (num: U60)
  F60 (orig: U60)
  f60 (orig: U60) (num: U60)
  op2 (orig: U60) (operator: (Kind.Operator)) (left: (Kind.Term)) (right: (Kind.Term))
  args15 (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) (x14: (Kind.Term))
  args16 (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) (x14: (Kind.Term)) (x15: (Kind.Term))
}

Kind.Checker.compare (rhs: (Bool)) (term: (Kind.Term)) (type: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.compare rhs term type = (Kind.Term.get_origin term (orig => (term => (Kind.Checker.bind (Kind.Checker.infer term) (term_typ => (let fun = ((if rhs {((term_typ : (Kind.Term)) => ((type : (Kind.Term)) => (Kind.Checker.new_equation orig type term_typ)))} else {((term_typ : (Kind.Term)) => ((type : (Kind.Term)) => (do Kind.Checker {ask is_equal = (Kind.Checker.equal (Kind.Term.eval term_typ) (Kind.Term.eval type));
 (if is_equal {(Kind.Checker.pure (Unit.new))} else {(do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.fail (Kind.Error.impossible_case ctx orig type term_typ))
})})
})))}) :: ((Kind.Term) -> (Kind.Term) -> (Kind.Checker (Unit)))); (fun term_typ type)))))))

#axiom
Kind.Name : Type

#derive[match]
type Bool {
  true
  false
}

#kdl_name = Str_intercal
String.intercalate (sep: (String)) (xs: (List (String))) : (String)
String.intercalate sep xs = (String.flatten (List.intersperse sep xs))

Kind.Term.show.sugar.list (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.list term = (do Maybe {ask res = (Kind.Term.show.sugar.list.go term);
 return (Kind.Printer.text ["[" (String.join " " res) "]"])
})

Kind.Checker.check (term: (Kind.Term)) (type: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.check (Kind.Term.lam orig name body) type = (Kind.Checker.bind (Kind.Checker.get_subst) (subst => (let fun = ((Kind.Term.if_all type (t_orig => (t_name => (t_type => (t_body => ((orig : U60) => ((name : U60) => ((body : ((Kind.Term) -> (Kind.Term))) => (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask chk = (Kind.Checker.extended (Kind.Checker.check (body (Kind.Term.var orig name dep)) (t_body (Kind.Term.var t_orig t_name dep))) name t_type []);
 return (Unit.new)
})))))))) ((orig : U60) => ((name : U60) => ((body : ((Kind.Term) -> (Kind.Term))) => (Kind.Checker.bind (Kind.Checker.get_context) (ctx => (Kind.Checker.fail (Kind.Error.cant_infer_lambda ctx orig)))))))) :: (U60 -> U60 -> ((Kind.Term) -> (Kind.Term)) -> (Kind.Checker (Unit)))); (fun orig name body))))
Kind.Checker.check (Kind.Term.let orig name expr body) type = (do Kind.Checker {ask dep = (Kind.Checker.get_depth);
 ask expr_typ = (Kind.Checker.infer expr);
 ask body_chk = (Kind.Checker.extended (Kind.Checker.check (body (Kind.Term.var orig name dep)) type) name expr_typ [(Kind.Term.eval expr)]);
 return (Unit.new)
})
Kind.Checker.check (Kind.Term.hlp orig) type = (do Kind.Checker {ask ctx = (Kind.Checker.get_context);
 (Kind.Checker.error (Kind.Error.inspection ctx orig type) (Unit.new));
return (Unit.new)
})
Kind.Checker.check (Kind.Term.var orig name idx) type = (do Kind.Checker {ask rhs = (Kind.Checker.get_right_hand_side);
 (if rhs {(Kind.Checker.compare rhs (Kind.Term.var orig name idx) type)} else {(Kind.Checker.extend name type (List.nil))})
})
Kind.Checker.check (Kind.Term.hol orig numb) type = (Kind.Checker.pure (Unit.new))
Kind.Checker.check term type = (do Kind.Checker {ask rhs = (Kind.Checker.get_right_hand_side);
 (Kind.Checker.compare rhs term type)
})

#axiom
Kind.Term.FN10 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) : (Kind.Term)

Kind.Context.add_value (prev: (Kind.Context)) (name: U60) (term: (Kind.Term)) : (Kind.Context)
Kind.Context.add_value (Kind.Context.entry name type vals rest) 0 val = (Kind.Context.entry name type (List.cons val vals) rest)
Kind.Context.add_value (Kind.Context.entry name type vals rest) n val = (Kind.Context.entry name type vals (Kind.Context.add_value rest (- n 1) val))
Kind.Context.add_value (Kind.Context.empty) n val = (Kind.Context.empty)

Kind.Coverage.specialize_list (type_name: (Kind.Name)) (constructors: (List (Kind.Name))) (type: (Kind.Term)) (body: ((Kind.Term) -> (Kind.Coverage.Type))) (problem: (Kind.Coverage.Problem)) : (Kind.Checker (Maybe (List (Kind.Term.Quoted))))
Kind.Coverage.specialize_list type_name (List.nil) type body problem = (Kind.Checker.pure (Maybe.none))
Kind.Coverage.specialize_list type_name (List.cons name rest) type body problem = (do Kind.Checker {ask result = (Kind.Coverage.specialize_on type_name name type body problem);
 (match Maybe result { some => (Kind.Checker.pure (Maybe.some result.value)); none => (Kind.Coverage.specialize_list type_name rest type body problem); })
})

#axiom
Kind.Term.FN6 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) : (Kind.Term)

#axiom
Kind.Axiom.Family.Indices (fnid: (Kind.Name)) : U60

#axiom
List.cons. : (Kind.Name)

Kind.Coverage.Row.catches (row: (Kind.Rule)) : (Bool)
Kind.Coverage.Row.catches (Kind.Rule.lhs (Kind.Term.var _ _ _) _) = (Bool.true)
Kind.Coverage.Row.catches _ = (Bool.false)

Kind.Subst.look (subst: (Kind.Subst)) (depth: U60) : (Maybe (Kind.Term))
Kind.Subst.look (Kind.Subst.end) 0 = (Maybe.none)
Kind.Subst.look (Kind.Subst.unfilled rest) 0 = (Maybe.none)
Kind.Subst.look (Kind.Subst.sub term rest) 0 = (Maybe.some term)
Kind.Subst.look (Kind.Subst.end) n = (Maybe.none)
Kind.Subst.look (Kind.Subst.unfilled rest) n = (Kind.Subst.look rest (- n 1))
Kind.Subst.look (Kind.Subst.sub term rest) n = (Kind.Subst.look rest (- n 1))

#axiom
Kind.Term.FN3 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) : (Kind.Term)

#axiom
Kind.Axiom.Family.Params (fnid: (Kind.Name)) : U60

Kind.Term.quote (term: (Kind.Term)) (sub: (Kind.Subst)) : (Kind.Term.Quoted)
Kind.Term.quote term sub = (Kind.Term.quote.go (Kind.Term.fill term sub))

Kind.Term.eval (term: (Kind.Term)) : (Kind.Term)
Kind.Term.eval (Kind.Term.typ orig) = (Kind.Term.typ orig)
Kind.Term.eval (Kind.Term.var orig name index) = (Kind.Term.var orig name index)
Kind.Term.eval (Kind.Term.hol orig numb) = (Kind.Term.hol orig numb)
Kind.Term.eval (Kind.Term.all orig name typ body) = (Kind.Term.all orig name (Kind.Term.eval typ) (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.lam orig name body) = (Kind.Term.lam orig name (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.let orig name expr body) = (Kind.Term.eval_let orig name (Kind.Term.eval expr) (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.ann orig expr typ) = (Kind.Term.eval_ann orig (Kind.Term.eval expr) (Kind.Term.eval typ))
Kind.Term.eval (Kind.Term.sub orig name indx redx expr) = (Kind.Term.eval_sub orig name indx redx (Kind.Term.eval expr))
Kind.Term.eval (Kind.Term.app orig expr typ) = (Kind.Term.eval_app orig (Kind.Term.eval expr) (Kind.Term.eval typ))
Kind.Term.eval (Kind.Term.hlp orig) = (Kind.Term.hlp orig)
Kind.Term.eval (Kind.Term.U60 orig) = (Kind.Term.U60 orig)
Kind.Term.eval (Kind.Term.u60 orig num) = (Kind.Term.u60 orig num)
Kind.Term.eval (Kind.Term.F60 orig) = (Kind.Term.F60 orig)
Kind.Term.eval (Kind.Term.f60 orig num) = (Kind.Term.f60 orig num)
Kind.Term.eval (Kind.Term.op2 orig op left right) = (Kind.Term.eval_op orig op (Kind.Term.eval left) (Kind.Term.eval right))
Kind.Term.eval (Kind.Term.ct0 ctid orig) = (Kind.Term.ct0 ctid orig)
Kind.Term.eval (Kind.Term.ct1 ctid orig x0) = (Kind.Term.ct1 ctid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Term.ct2 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1))
Kind.Term.eval (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Term.ct3 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2))
Kind.Term.eval (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Term.ct4 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3))
Kind.Term.eval (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Term.ct5 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4))
Kind.Term.eval (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.ct6 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5))
Kind.Term.eval (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.ct7 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6))
Kind.Term.eval (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.ct8 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7))
Kind.Term.eval (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.ct9 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8))
Kind.Term.eval (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.ct10 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9))
Kind.Term.eval (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.ct11 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10))
Kind.Term.eval (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.ct12 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11))
Kind.Term.eval (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.ct13 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12))
Kind.Term.eval (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.ct14 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13))
Kind.Term.eval (Kind.Term.ct15 fnid orig x0) = (Kind.Term.ct15 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.ct16 fnid orig x0) = (Kind.Term.ct16 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn0 fnid orig) = (Kind.Term.FN0 fnid orig)
Kind.Term.eval (Kind.Term.fn1 fnid orig x0) = (Kind.Term.FN1 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Term.FN2 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1))
Kind.Term.eval (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Term.FN3 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2))
Kind.Term.eval (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Term.FN4 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3))
Kind.Term.eval (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Term.FN5 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4))
Kind.Term.eval (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.FN6 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5))
Kind.Term.eval (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.FN7 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6))
Kind.Term.eval (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.FN8 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7))
Kind.Term.eval (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.FN9 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8))
Kind.Term.eval (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.FN10 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9))
Kind.Term.eval (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.FN11 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10))
Kind.Term.eval (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.FN12 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11))
Kind.Term.eval (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.FN13 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12))
Kind.Term.eval (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.FN14 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13))
Kind.Term.eval (Kind.Term.fn15 fnid orig x0) = (Kind.Term.FN15 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn16 fnid orig x0) = (Kind.Term.FN16 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (Kind.Term.args15 (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13) (Kind.Term.eval x14))
Kind.Term.eval (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (Kind.Term.args16 (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13) (Kind.Term.eval x14) (Kind.Term.eval x15))

Kind.Coverage.get_name (name: (Kind.Term)) : (Maybe (Kind.Name))
Kind.Coverage.get_name (Kind.Term.ct0 name _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct1 name _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct2 name _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct3 name _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct4 name _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct5 name _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct6 name _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct8 name _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct7 name _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct9 name _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct10 name _ _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct11 name _ _ _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct12 name _ _ _ _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct13 name _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct14 name _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct15 name _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct16 name _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.ct16 name _ _) = (Maybe.some name)
Kind.Coverage.get_name (Kind.Term.U60 _) = (Maybe.none)
Kind.Coverage.get_name _ = (Maybe.none)

Kind.Coverage.Type.remove_constraints (term: (Kind.Coverage.Type)) : (Pair (Kind.Coverage.Type) (List (Pair (Kind.Term) (Kind.Term))))
Kind.Coverage.Type.remove_constraints (Kind.Coverage.Type.cons orig name typ constraints body) = (Pair.new (Kind.Coverage.Type.cons orig name typ [] body) constraints)
Kind.Coverage.Type.remove_constraints (Kind.Coverage.Type.end constraints body) = (Pair.new (Kind.Coverage.Type.end [] body) constraints)

Kind.Checker.unify.go.fail (equations: (List (Kind.Equation))) : (Kind.Checker (Unit))
Kind.Checker.unify.go.fail (List.nil t) = (Kind.Checker.pure (Unit.new))
Kind.Checker.unify.go.fail (List.cons t (Kind.Equation.new ctx orig left right) eqts) = (do Kind.Checker {(Kind.Checker.error (Kind.Error.type_mismatch ctx orig left right) (Unit.new));
(Kind.Checker.unify.go.fail eqts)
})

Kind.Checker.set_context (new_context: (Kind.Context)) : (Kind.Checker (Kind.Context))
Kind.Checker.set_context new_context = (old_context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked new_context depth rhs subst eqts errs old_context)))))))

#axiom
Kind.Term.FN4 (fnid: (Kind.Name)) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) : (Kind.Term)

#inline
String.pure (x: (Char)) : (String)
String.pure x = (String.cons x (String.nil))

Kind.Term.set_origin (new_origin: U60) (term: (Kind.Term)) : (Kind.Term)
Kind.Term.set_origin new_origin (Kind.Term.typ old_orig) = (Kind.Term.typ new_origin)
Kind.Term.set_origin new_origin (Kind.Term.var old_orig name idx) = (Kind.Term.var new_origin name idx)
Kind.Term.set_origin new_origin (Kind.Term.hol old_orig numb) = (Kind.Term.hol new_origin numb)
Kind.Term.set_origin new_origin (Kind.Term.all old_orig name typ body) = (Kind.Term.all new_origin name typ body)
Kind.Term.set_origin new_origin (Kind.Term.lam old_orig name body) = (Kind.Term.lam new_origin name body)
Kind.Term.set_origin new_origin (Kind.Term.let old_orig name expr body) = (Kind.Term.let new_origin name expr body)
Kind.Term.set_origin new_origin (Kind.Term.ann old_orig expr typ) = (Kind.Term.ann new_origin expr typ)
Kind.Term.set_origin new_origin (Kind.Term.sub old_orig name indx redx expr) = (Kind.Term.sub new_origin name indx redx expr)
Kind.Term.set_origin new_origin (Kind.Term.app old_orig func arg) = (Kind.Term.app new_origin func arg)
Kind.Term.set_origin new_origin (Kind.Term.hlp old_orig) = (Kind.Term.hlp new_origin)
Kind.Term.set_origin new_origin (Kind.Term.U60 old_orig) = (Kind.Term.U60 new_origin)
Kind.Term.set_origin new_origin (Kind.Term.u60 old_orig num) = (Kind.Term.u60 new_origin num)
Kind.Term.set_origin new_origin (Kind.Term.F60 old_orig) = (Kind.Term.F60 new_origin)
Kind.Term.set_origin new_origin (Kind.Term.f60 old_orig num) = (Kind.Term.f60 new_origin num)
Kind.Term.set_origin new_origin (Kind.Term.op2 old_orig op left right) = (Kind.Term.op2 new_origin op left right)
Kind.Term.set_origin new_origin (Kind.Term.ct0 ctid old_orig) = (Kind.Term.ct0 ctid new_origin)
Kind.Term.set_origin new_origin (Kind.Term.ct1 ctid old_orig x0) = (Kind.Term.ct1 ctid new_origin x0)
Kind.Term.set_origin new_origin (Kind.Term.ct2 ctid old_orig x0 x1) = (Kind.Term.ct2 ctid new_origin x0 x1)
Kind.Term.set_origin new_origin (Kind.Term.ct3 ctid old_orig x0 x1 x2) = (Kind.Term.ct3 ctid new_origin x0 x1 x2)
Kind.Term.set_origin new_origin (Kind.Term.ct4 ctid old_orig x0 x1 x2 x3) = (Kind.Term.ct4 ctid new_origin x0 x1 x2 x3)
Kind.Term.set_origin new_origin (Kind.Term.ct5 ctid old_orig x0 x1 x2 x3 x4) = (Kind.Term.ct5 ctid new_origin x0 x1 x2 x3 x4)
Kind.Term.set_origin new_origin (Kind.Term.ct6 ctid old_orig x0 x1 x2 x3 x4 x5) = (Kind.Term.ct6 ctid new_origin x0 x1 x2 x3 x4 x5)
Kind.Term.set_origin new_origin (Kind.Term.ct7 ctid old_orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.ct7 ctid new_origin x0 x1 x2 x3 x4 x5 x6)
Kind.Term.set_origin new_origin (Kind.Term.ct8 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.ct8 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7)
Kind.Term.set_origin new_origin (Kind.Term.ct9 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.ct9 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8)
Kind.Term.set_origin new_origin (Kind.Term.ct10 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.ct10 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9)
Kind.Term.set_origin new_origin (Kind.Term.ct11 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.ct11 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)
Kind.Term.set_origin new_origin (Kind.Term.ct12 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.ct12 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11)
Kind.Term.set_origin new_origin (Kind.Term.ct13 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.ct13 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)
Kind.Term.set_origin new_origin (Kind.Term.ct14 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.ct14 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)
Kind.Term.set_origin new_origin (Kind.Term.ct15 ctid old_orig args) = (Kind.Term.ct15 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.ct16 ctid old_orig args) = (Kind.Term.ct16 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.fn0 fnid old_orig) = (Kind.Term.fn0 fnid new_origin)
Kind.Term.set_origin new_origin (Kind.Term.fn1 fnid old_orig x0) = (Kind.Term.fn1 fnid new_origin x0)
Kind.Term.set_origin new_origin (Kind.Term.fn2 fnid old_orig x0 x1) = (Kind.Term.fn2 fnid new_origin x0 x1)
Kind.Term.set_origin new_origin (Kind.Term.fn3 fnid old_orig x0 x1 x2) = (Kind.Term.fn3 fnid new_origin x0 x1 x2)
Kind.Term.set_origin new_origin (Kind.Term.fn4 fnid old_orig x0 x1 x2 x3) = (Kind.Term.fn4 fnid new_origin x0 x1 x2 x3)
Kind.Term.set_origin new_origin (Kind.Term.fn5 fnid old_orig x0 x1 x2 x3 x4) = (Kind.Term.fn5 fnid new_origin x0 x1 x2 x3 x4)
Kind.Term.set_origin new_origin (Kind.Term.fn6 fnid old_orig x0 x1 x2 x3 x4 x5) = (Kind.Term.fn6 fnid new_origin x0 x1 x2 x3 x4 x5)
Kind.Term.set_origin new_origin (Kind.Term.fn7 fnid old_orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.fn7 fnid new_origin x0 x1 x2 x3 x4 x5 x6)
Kind.Term.set_origin new_origin (Kind.Term.fn8 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.fn8 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7)
Kind.Term.set_origin new_origin (Kind.Term.fn9 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.fn9 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8)
Kind.Term.set_origin new_origin (Kind.Term.fn10 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.fn10 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9)
Kind.Term.set_origin new_origin (Kind.Term.fn11 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.fn11 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)
Kind.Term.set_origin new_origin (Kind.Term.fn12 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.fn12 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11)
Kind.Term.set_origin new_origin (Kind.Term.fn13 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.fn13 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)
Kind.Term.set_origin new_origin (Kind.Term.fn14 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.fn14 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)
Kind.Term.set_origin new_origin (Kind.Term.fn15 ctid old_orig args) = (Kind.Term.fn15 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.fn16 ctid old_orig args) = (Kind.Term.fn16 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)
Kind.Term.set_origin new_origin (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)

String.concat (xs: (String)) (ys: (String)) : (String)
String.concat (String.cons x xs) ys = (String.cons x (String.concat xs ys))
String.concat (String.nil) ys = ys

