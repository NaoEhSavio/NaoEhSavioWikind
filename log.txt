
  [1;42m CHECKING [0m The file './Prop/Isomorphic/_.kind2'
     [1;42m STATS [0m Rewrites: 40655
   [1;42m CHECKED [0m All terms checked. took 0.24s


  [1;42m CHECKING [0m The file './Prop/Decidable/_.kind2'
     [1;42m STATS [0m Rewrites: 15168
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Equal/_.kind2'
     [1;42m STATS [0m Rewrites: 13360
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Equal/and.kind2'
     [1;42m STATS [0m Rewrites: 52861
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Prop/Equal/chain.kind2'
     [1;42m STATS [0m Rewrites: 20545
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Equal/rewrite.kind2'
     [1;42m STATS [0m Rewrites: 19771
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Equal/apply.kind2'
     [1;42m STATS [0m Rewrites: 21653
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Equal/right.kind2'
     [1;42m STATS [0m Rewrites: 34401
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Prop/Equal/mirror.kind2'
     [1;42m STATS [0m Rewrites: 18970
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Prop/Not/_.kind2'
     [1;42m STATS [0m Rewrites: 1386
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Prop/Not/contradict.kind2'
     [1;42m STATS [0m Rewrites: 3617
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './IINS/Ship/th_01.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:55:51][0m
      [2;36m│[0m
   54 [2;36m│[0m    
   55 [2;36m│[0m    Nat.add.succ_right (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.add[0m n (Nat.succ m)) (Nat.succ ([1;31mNat.add[0m n m))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──────[0m                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                      [1;31m│[0m                                  [1;31m└Here![0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   56 [2;36m│[0m    Nat.add.succ_right n m = ?
   57 [2;36m│[0m    
   58 [2;36m│[0m    Nat.add.cancel_left (n: Nat) (m: Nat) (o: Nat) (e: Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m n o)) : Equal Nat m o
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                  [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
   59 [2;36m│[0m    Nat.add.cancel_left n m o e = ?
   60 [2;36m│[0m    
   61 [2;36m│[0m    Nat.add.comm (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m m n)
      [2;36m│[0m                                                [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   62 [2;36m│[0m    Nat.add.comm n m = ?
   63 [2;36m│[0m    
   64 [2;36m│[0m    Nat.add.zero_right (n: Nat) : Equal Nat ([1;31mNat.add[0m n Nat.zero) n
      [2;36m│[0m                                             [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   65 [2;36m│[0m    Nat.add.zero_right n = ?
   66 [2;36m│[0m    
   67 [2;36m│[0m    Nat.add.cancel_right (n: Nat) (m: Nat) (o: Nat) (e: Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m o m)) : Equal Nat n o
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                   [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
   68 [2;36m│[0m    Nat.add.cancel_right n m o e = ?
   69 [2;36m│[0m    
   70 [2;36m│[0m    Nat.add.zero_left (n: Nat) : Equal Nat ([1;31mNat.add[0m Nat.zero n) n
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   71 [2;36m│[0m    Nat.add.zero_left n = ?
   72 [2;36m│[0m    
   73 [2;36m│[0m    Nat.add.assoc (n: Nat) (m: Nat) (o: Nat) : Equal Nat ([1;31mNat.add[0m ([1;31mNat.add[0m n m) o)  ([1;31mNat.add[0m n ([1;31mNat.add[0m m o))
      [2;36m│[0m                                                          [1;31m┬[0m[1;31m──────[0m  [1;31m┬[0m[1;31m──────[0m           [1;31m┬[0m[1;31m──────[0m    [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                          [1;31m│[0m        [1;31m│[0m                 [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                                          [1;31m│[0m        [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                                                          [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                                                          [1;31m└Here![0m
   74 [2;36m│[0m    Nat.add.assoc n m o = ?
      [2;36m┆[0m     
   78 [2;36m│[0m    
   79 [2;36m│[0m    Nat.mul.distrib_left (n: Nat) (m: Nat) (o: Nat) : Equal Nat (Nat.mul n ([1;31mNat.add[0m m o)) ([1;31mNat.add[0m (Nat.mul n m) (Nat.mul n o))
      [2;36m│[0m                                                                            [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                            [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                                            [1;31m└Here![0m
   80 [2;36m│[0m    Nat.mul.distrib_left n m o = ?
      [2;36m┆[0m     
   84 [2;36m│[0m    
   85 [2;36m│[0m    Nat.mul.succ_right (n: Nat) (m: Nat) : Equal Nat (Nat.mul n (Nat.succ m)) ([1;31mNat.add[0m n (Nat.mul n m))
      [2;36m│[0m                                                                               [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                               [1;31m└Here![0m
   86 [2;36m│[0m    Nat.mul.succ_right n m = ?
      [2;36m┆[0m     
   90 [2;36m│[0m    
   91 [2;36m│[0m    Nat.mul.succ_left (n: Nat) (m: Nat) : Equal Nat (Nat.mul (Nat.succ n) m)  ([1;31mNat.add[0m m (Nat.mul n m))
      [2;36m│[0m                                                                               [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                               [1;31m└Here![0m
   92 [2;36m│[0m    Nat.mul.succ_left n m = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.add.zero_left', 'Nat.add.assoc', 'Nat.add.comm'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:10:49][0m
      [2;36m│[0m
    9 [2;36m│[0m    
   10 [2;36m│[0m    Nat.sub.zero_left (n: Nat) : Equal Nat (Nat.sub [1;31mNat.zero[0m n) [1;31mNat.zero[0m
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   11 [2;36m│[0m    Nat.sub.zero_left n = ?
   12 [2;36m│[0m    
   13 [2;36m│[0m    Nat.mod.mod_one_equals_zero (n: Nat) : Equal Nat (Nat.mod n 1n) [1;31mNat.zero[0m
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
   14 [2;36m│[0m    Nat.mod.mod_one_equals_zero n = ?
   15 [2;36m│[0m    
   16 [2;36m│[0m    Nat.mod.zero_mod_equals_zero (n: Nat): Equal Nat (Nat.mod [1;31mNat.zero[0m (Nat.succ n)) [1;31mNat.zero[0m
      [2;36m│[0m                                                              [1;31m┬[0m[1;31m───────[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                              [1;31m│[0m                      [1;31m└Here![0m
      [2;36m│[0m                                                              [1;31m└Here![0m
   17 [2;36m│[0m    Nat.mod.zero_mod_equals_zero n = ?
   18 [2;36m│[0m    
   19 [2;36m│[0m    Nat.mod.go_self (n: Nat) (m: Nat) : Equal Nat (Nat.mod.go n n (Nat.succ m)) [1;31mNat.zero[0m
      [2;36m│[0m                                                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                [1;31m└Here![0m
   20 [2;36m│[0m    Nat.mod.go_self n m = ?
   21 [2;36m│[0m    
   22 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero (n: Nat) : Equal Nat (Nat.mod.go n 1n [1;31mNat.zero[0m) [1;31mNat.zero[0m
      [2;36m│[0m                                                                         [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                         [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                                                         [1;31m└Here![0m
   23 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero n = ?
   24 [2;36m│[0m    
   25 [2;36m│[0m    Nat.mod.self (n: Nat) : Equal Nat (Nat.mod (Nat.succ n) (Nat.succ n)) [1;31mNat.zero[0m
      [2;36m│[0m                                                                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                          [1;31m└Here![0m
   26 [2;36m│[0m    Nat.mod.self n = ?
      [2;36m┆[0m     
   45 [2;36m│[0m    
   46 [2;36m│[0m    Nat.gcd.zero_right (n: Nat) : Equal Nat (Nat.gcd n [1;31mNat.zero[0m) n
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   47 [2;36m│[0m    Nat.gcd.zero_right n = ?
   48 [2;36m│[0m    
   49 [2;36m│[0m    Nat.gcd.zero_left (n: Nat) : Equal Nat (Nat.gcd [1;31mNat.zero[0m n) n
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   50 [2;36m│[0m    Nat.gcd.zero_left n = ?
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: Nat) (e: Equal Bool (Nat.lte n [1;31mNat.zero[0m) Bool.true) : Equal Nat n [1;31mNat.zero[0m
      [2;36m│[0m                                                          [1;31m┬[0m[1;31m───────[0m                           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                          [1;31m│[0m                                  [1;31m└Here![0m
      [2;36m│[0m                                                          [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?
      [2;36m┆[0m     
   63 [2;36m│[0m    
   64 [2;36m│[0m    Nat.add.zero_right (n: Nat) : Equal Nat (Nat.add n [1;31mNat.zero[0m) n
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   65 [2;36m│[0m    Nat.add.zero_right n = ?
      [2;36m┆[0m     
   69 [2;36m│[0m    
   70 [2;36m│[0m    Nat.add.zero_left (n: Nat) : Equal Nat (Nat.add [1;31mNat.zero[0m n) n
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   71 [2;36m│[0m    Nat.add.zero_left n = ?
      [2;36m┆[0m     
   75 [2;36m│[0m    
   76 [2;36m│[0m    Nat.mul.one_right (n: Nat) : Equal Nat (Nat.mul n (Nat.succ [1;31mNat.zero[0m)) n
      [2;36m│[0m                                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                [1;31m└Here![0m
   77 [2;36m│[0m    Nat.mul.one_right n = ?
      [2;36m┆[0m     
   81 [2;36m│[0m    
   82 [2;36m│[0m    Nat.mul.one_left (n: Nat) : Equal Nat (Nat.mul (Nat.succ [1;31mNat.zero[0m) n)  n
      [2;36m│[0m                                                             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                             [1;31m└Here![0m
   83 [2;36m│[0m    Nat.mul.one_left n = ?
      [2;36m┆[0m     
   93 [2;36m│[0m    
   94 [2;36m│[0m    Nat.mul.zero_right (n: Nat) : Equal Nat (Nat.mul n [1;31mNat.zero[0m) [1;31mNat.zero[0m
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                       [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   95 [2;36m│[0m    Nat.mul.zero_right n = ?
   96 [2;36m│[0m    
   97 [2;36m│[0m    Nat.mul.zero_left (n: Nat) : Equal Nat (Nat.mul [1;31mNat.zero[0m n) [1;31mNat.zero[0m
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   98 [2;36m│[0m    Nat.mul.zero_left n = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.gcd.zero_right', 'Nat.add.zero_right', 'Nat.mul.zero_right', 'Nat.sub.zero_left', 'Nat.gcd.zero_left'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.lte'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:52:45][0m
      [2;36m│[0m
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: Nat) (e: Equal Bool ([1;31mNat.lte[0m n Nat.zero) Bool.true) : Equal Nat n Nat.zero
      [2;36m│[0m                                                [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:52:39][0m
      [2;36m│[0m
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: Nat) (e: Equal [1;31mBool[0m (Nat.lte n Nat.zero) Bool.true) : Equal Nat n Nat.zero
      [2;36m│[0m                                          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                          [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.mod'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:13:51][0m
      [2;36m│[0m
   12 [2;36m│[0m    
   13 [2;36m│[0m    Nat.mod.mod_one_equals_zero (n: Nat) : Equal Nat ([1;31mNat.mod[0m n 1n) Nat.zero
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   14 [2;36m│[0m    Nat.mod.mod_one_equals_zero n = ?
   15 [2;36m│[0m    
   16 [2;36m│[0m    Nat.mod.zero_mod_equals_zero (n: Nat): Equal Nat ([1;31mNat.mod[0m Nat.zero (Nat.succ n)) Nat.zero
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   17 [2;36m│[0m    Nat.mod.zero_mod_equals_zero n = ?
      [2;36m┆[0m     
   24 [2;36m│[0m    
   25 [2;36m│[0m    Nat.mod.self (n: Nat) : Equal Nat ([1;31mNat.mod[0m (Nat.succ n) (Nat.succ n)) Nat.zero
      [2;36m│[0m                                       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                       [1;31m└Here![0m
   26 [2;36m│[0m    Nat.mod.self n = ?
      [2;36m┆[0m     
   42 [2;36m│[0m    
   43 [2;36m│[0m    Nat.gcd.succ (n: Nat) (m: Nat) : Equal Nat (Nat.gcd (Nat.succ n) m) (Nat.gcd ([1;31mNat.mod[0m m (Nat.succ n)) (Nat.succ n))
      [2;36m│[0m                                                                                  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                  [1;31m└Here![0m
   44 [2;36m│[0m    Nat.gcd.succ n m = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.mod.go_self', 'Nat.mod.self'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:52:65][0m
      [2;36m│[0m
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: Nat) (e: Equal Bool (Nat.lte n Nat.zero) [1;31mBool.true[0m) : Equal Nat n Nat.zero
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:7:23][0m
      [2;36m│[0m
    6 [2;36m│[0m    
    7 [2;36m│[0m    Nat.sub.succ_both (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.sub (Nat.succ n) (Nat.succ m)) (Nat.sub n m)
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
    8 [2;36m│[0m    Nat.sub.succ_both n m = ?
    9 [2;36m│[0m    
   10 [2;36m│[0m    Nat.sub.zero_left (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.sub Nat.zero n) Nat.zero
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   11 [2;36m│[0m    Nat.sub.zero_left n = ?
   12 [2;36m│[0m    
   13 [2;36m│[0m    Nat.mod.mod_one_equals_zero (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mod n 1n) Nat.zero
      [2;36m│[0m                                    [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                    [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                    [1;31m└Here![0m
   14 [2;36m│[0m    Nat.mod.mod_one_equals_zero n = ?
   15 [2;36m│[0m    
   16 [2;36m│[0m    Nat.mod.zero_mod_equals_zero (n: [1;31mNat[0m): Equal [1;31mNat[0m (Nat.mod Nat.zero (Nat.succ n)) Nat.zero
      [2;36m│[0m                                     [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                     [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   17 [2;36m│[0m    Nat.mod.zero_mod_equals_zero n = ?
   18 [2;36m│[0m    
   19 [2;36m│[0m    Nat.mod.go_self (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mod.go n n (Nat.succ m)) Nat.zero
      [2;36m│[0m                        [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                        [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   20 [2;36m│[0m    Nat.mod.go_self n m = ?
   21 [2;36m│[0m    
   22 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mod.go n 1n Nat.zero) Nat.zero
      [2;36m│[0m                                       [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                       [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                       [1;31m└Here![0m
   23 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero n = ?
   24 [2;36m│[0m    
   25 [2;36m│[0m    Nat.mod.self (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mod (Nat.succ n) (Nat.succ n)) Nat.zero
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   26 [2;36m│[0m    Nat.mod.self n = ?
   27 [2;36m│[0m    
   28 [2;36m│[0m    Nat.succ_inj (n: [1;31mNat[0m) (m: [1;31mNat[0m) (e: Equal [1;31mNat[0m (Nat.succ n) (Nat.succ m)) : Equal [1;31mNat[0m n m
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m                                    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                                      [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   29 [2;36m│[0m    Nat.succ_inj n m e = ?
      [2;36m┆[0m     
   39 [2;36m│[0m    
   40 [2;36m│[0m    Nat.gcd.self (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.gcd n n) n
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   41 [2;36m│[0m    Nat.gcd.self n = ?
   42 [2;36m│[0m    
   43 [2;36m│[0m    Nat.gcd.succ (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.gcd (Nat.succ n) m) (Nat.gcd (Nat.mod m (Nat.succ n)) (Nat.succ n))
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   44 [2;36m│[0m    Nat.gcd.succ n m = ?
   45 [2;36m│[0m    
   46 [2;36m│[0m    Nat.gcd.zero_right (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.gcd n Nat.zero) n
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   47 [2;36m│[0m    Nat.gcd.zero_right n = ?
   48 [2;36m│[0m    
   49 [2;36m│[0m    Nat.gcd.zero_left (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.gcd Nat.zero n) n
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   50 [2;36m│[0m    Nat.gcd.zero_left n = ?
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: [1;31mNat[0m) (e: Equal Bool (Nat.lte n Nat.zero) Bool.true) : Equal [1;31mNat[0m n Nat.zero
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m                                                         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m                                                           [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?
   54 [2;36m│[0m    
   55 [2;36m│[0m    Nat.add.succ_right (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.add n (Nat.succ m)) (Nat.succ (Nat.add n m))
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   56 [2;36m│[0m    Nat.add.succ_right n m = ?
   57 [2;36m│[0m    
   58 [2;36m│[0m    Nat.add.cancel_left (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) (e: Equal [1;31mNat[0m (Nat.add n m) (Nat.add n o)) : Equal [1;31mNat[0m m o
      [2;36m│[0m                            [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m                                      [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                            [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                                        [1;31m└Here![0m
      [2;36m│[0m                            [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                            [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                            [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                            [1;31m└Here![0m
   59 [2;36m│[0m    Nat.add.cancel_left n m o e = ?
   60 [2;36m│[0m    
   61 [2;36m│[0m    Nat.add.comm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.add n m) (Nat.add m n)
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   62 [2;36m│[0m    Nat.add.comm n m = ?
   63 [2;36m│[0m    
   64 [2;36m│[0m    Nat.add.zero_right (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.add n Nat.zero) n
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   65 [2;36m│[0m    Nat.add.zero_right n = ?
   66 [2;36m│[0m    
   67 [2;36m│[0m    Nat.add.cancel_right (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) (e: Equal [1;31mNat[0m (Nat.add n m) (Nat.add o m)) : Equal [1;31mNat[0m n o
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m                                      [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                                        [1;31m└Here![0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                             [1;31m└Here![0m
   68 [2;36m│[0m    Nat.add.cancel_right n m o e = ?
   69 [2;36m│[0m    
   70 [2;36m│[0m    Nat.add.zero_left (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.add Nat.zero n) n
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   71 [2;36m│[0m    Nat.add.zero_left n = ?
   72 [2;36m│[0m    
   73 [2;36m│[0m    Nat.add.assoc (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.add (Nat.add n m) o)  (Nat.add n (Nat.add m o))
      [2;36m│[0m                      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
   74 [2;36m│[0m    Nat.add.assoc n m o = ?
   75 [2;36m│[0m    
   76 [2;36m│[0m    Nat.mul.one_right (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul n (Nat.succ Nat.zero)) n
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   77 [2;36m│[0m    Nat.mul.one_right n = ?
   78 [2;36m│[0m    
   79 [2;36m│[0m    Nat.mul.distrib_left (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul n (Nat.add m o)) (Nat.add (Nat.mul n m) (Nat.mul n o))
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                             [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                             [1;31m└Here![0m
   80 [2;36m│[0m    Nat.mul.distrib_left n m o = ?
   81 [2;36m│[0m    
   82 [2;36m│[0m    Nat.mul.one_left (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul (Nat.succ Nat.zero) n)  n
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   83 [2;36m│[0m    Nat.mul.one_left n = ?
   84 [2;36m│[0m    
   85 [2;36m│[0m    Nat.mul.succ_right (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul n (Nat.succ m)) (Nat.add n (Nat.mul n m))
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   86 [2;36m│[0m    Nat.mul.succ_right n m = ?
   87 [2;36m│[0m    
   88 [2;36m│[0m    Nat.mul.comm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul n m) (Nat.mul m n)
      [2;36m│[0m                     [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   89 [2;36m│[0m    Nat.mul.comm n m = ?
   90 [2;36m│[0m    
   91 [2;36m│[0m    Nat.mul.succ_left (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul (Nat.succ n) m)  (Nat.add m (Nat.mul n m))
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   92 [2;36m│[0m    Nat.mul.succ_left n m = ?
   93 [2;36m│[0m    
   94 [2;36m│[0m    Nat.mul.zero_right (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul n Nat.zero) Nat.zero
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   95 [2;36m│[0m    Nat.mul.zero_right n = ?
   96 [2;36m│[0m    
   97 [2;36m│[0m    Nat.mul.zero_left (n: [1;31mNat[0m) : Equal [1;31mNat[0m (Nat.mul Nat.zero n) Nat.zero
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   98 [2;36m│[0m    Nat.mul.zero_left n = ?
   99 [2;36m│[0m    
  100 [2;36m│[0m    Nat.mul.assoc (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) : Equal [1;31mNat[0m  (Nat.mul n (Nat.mul m o)) (Nat.mul (Nat.mul n m) o)
      [2;36m│[0m                      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m│[0m        [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                      [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
  101 [2;36m│[0m    Nat.mul.assoc n m o = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:7:59][0m
      [2;36m│[0m
    6 [2;36m│[0m    
    7 [2;36m│[0m    Nat.sub.succ_both (n: Nat) (m: Nat) : Equal Nat (Nat.sub ([1;31mNat.succ[0m n) ([1;31mNat.succ[0m m)) (Nat.sub n m)
      [2;36m│[0m                                                              [1;31m┬[0m[1;31m───────[0m     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                              [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                                              [1;31m└Here![0m
    8 [2;36m│[0m    Nat.sub.succ_both n m = ?
      [2;36m┆[0m     
   15 [2;36m│[0m    
   16 [2;36m│[0m    Nat.mod.zero_mod_equals_zero (n: Nat): Equal Nat (Nat.mod Nat.zero ([1;31mNat.succ[0m n)) Nat.zero
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
   17 [2;36m│[0m    Nat.mod.zero_mod_equals_zero n = ?
   18 [2;36m│[0m    
   19 [2;36m│[0m    Nat.mod.go_self (n: Nat) (m: Nat) : Equal Nat (Nat.mod.go n n ([1;31mNat.succ[0m m)) Nat.zero
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
   20 [2;36m│[0m    Nat.mod.go_self n m = ?
      [2;36m┆[0m     
   24 [2;36m│[0m    
   25 [2;36m│[0m    Nat.mod.self (n: Nat) : Equal Nat (Nat.mod ([1;31mNat.succ[0m n) ([1;31mNat.succ[0m n)) Nat.zero
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   26 [2;36m│[0m    Nat.mod.self n = ?
   27 [2;36m│[0m    
   28 [2;36m│[0m    Nat.succ_inj (n: Nat) (m: Nat) (e: Equal Nat ([1;31mNat.succ[0m n) ([1;31mNat.succ[0m m)) : Equal Nat n m
      [2;36m│[0m                                                  [1;31m┬[0m[1;31m───────[0m     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                  [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                                  [1;31m└Here![0m
   29 [2;36m│[0m    Nat.succ_inj n m e = ?
      [2;36m┆[0m     
   42 [2;36m│[0m    
   43 [2;36m│[0m    Nat.gcd.succ (n: Nat) (m: Nat) : Equal Nat (Nat.gcd ([1;31mNat.succ[0m n) m) (Nat.gcd (Nat.mod m ([1;31mNat.succ[0m n)) ([1;31mNat.succ[0m n))
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m───────[0m                            [1;31m┬[0m[1;31m───────[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                         [1;31m│[0m                                   [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                         [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                                         [1;31m└Here![0m
   44 [2;36m│[0m    Nat.gcd.succ n m = ?
      [2;36m┆[0m     
   54 [2;36m│[0m    
   55 [2;36m│[0m    Nat.add.succ_right (n: Nat) (m: Nat) : Equal Nat (Nat.add n ([1;31mNat.succ[0m m)) ([1;31mNat.succ[0m (Nat.add n m))
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m───────[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
   56 [2;36m│[0m    Nat.add.succ_right n m = ?
      [2;36m┆[0m     
   75 [2;36m│[0m    
   76 [2;36m│[0m    Nat.mul.one_right (n: Nat) : Equal Nat (Nat.mul n ([1;31mNat.succ[0m Nat.zero)) n
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   77 [2;36m│[0m    Nat.mul.one_right n = ?
      [2;36m┆[0m     
   81 [2;36m│[0m    
   82 [2;36m│[0m    Nat.mul.one_left (n: Nat) : Equal Nat (Nat.mul ([1;31mNat.succ[0m Nat.zero) n)  n
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   83 [2;36m│[0m    Nat.mul.one_left n = ?
   84 [2;36m│[0m    
   85 [2;36m│[0m    Nat.mul.succ_right (n: Nat) (m: Nat) : Equal Nat (Nat.mul n ([1;31mNat.succ[0m m)) (Nat.add n (Nat.mul n m))
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
   86 [2;36m│[0m    Nat.mul.succ_right n m = ?
      [2;36m┆[0m     
   90 [2;36m│[0m    
   91 [2;36m│[0m    Nat.mul.succ_left (n: Nat) (m: Nat) : Equal Nat (Nat.mul ([1;31mNat.succ[0m n) m)  (Nat.add m (Nat.mul n m))
      [2;36m│[0m                                                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                              [1;31m└Here![0m
   92 [2;36m│[0m    Nat.mul.succ_left n m = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.add.succ_right', 'Nat.sub.succ_both', 'Nat.gcd.succ', 'Nat.succ_inj'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.sub'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:7:50][0m
      [2;36m│[0m
    6 [2;36m│[0m    
    7 [2;36m│[0m    Nat.sub.succ_both (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.sub[0m (Nat.succ n) (Nat.succ m)) ([1;31mNat.sub[0m n m)
      [2;36m│[0m                                                     [1;31m┬[0m[1;31m──────[0m                             [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                     [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                                     [1;31m└Here![0m
    8 [2;36m│[0m    Nat.sub.succ_both n m = ?
    9 [2;36m│[0m    
   10 [2;36m│[0m    Nat.sub.zero_left (n: Nat) : Equal Nat ([1;31mNat.sub[0m Nat.zero n) Nat.zero
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   11 [2;36m│[0m    Nat.sub.zero_left n = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.sub.succ_both', 'Nat.sub.zero_left'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.mod.go'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:19:48][0m
      [2;36m│[0m
   18 [2;36m│[0m    
   19 [2;36m│[0m    Nat.mod.go_self (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.mod.go[0m n n (Nat.succ m)) Nat.zero
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
   20 [2;36m│[0m    Nat.mod.go_self n m = ?
   21 [2;36m│[0m    
   22 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero (n: Nat) : Equal Nat ([1;31mNat.mod.go[0m n 1n Nat.zero) Nat.zero
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                         [1;31m└Here![0m
   23 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero n = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.mod.self', 'Nat.mod.go_self'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.gcd'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:40:36][0m
      [2;36m│[0m
   39 [2;36m│[0m    
   40 [2;36m│[0m    Nat.gcd.self (n: Nat) : Equal Nat ([1;31mNat.gcd[0m n n) n
      [2;36m│[0m                                       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                       [1;31m└Here![0m
   41 [2;36m│[0m    Nat.gcd.self n = ?
   42 [2;36m│[0m    
   43 [2;36m│[0m    Nat.gcd.succ (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.gcd[0m (Nat.succ n) m) ([1;31mNat.gcd[0m (Nat.mod m (Nat.succ n)) (Nat.succ n))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m──────[0m                  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                [1;31m│[0m                        [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   44 [2;36m│[0m    Nat.gcd.succ n m = ?
   45 [2;36m│[0m    
   46 [2;36m│[0m    Nat.gcd.zero_right (n: Nat) : Equal Nat ([1;31mNat.gcd[0m n Nat.zero) n
      [2;36m│[0m                                             [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   47 [2;36m│[0m    Nat.gcd.zero_right n = ?
   48 [2;36m│[0m    
   49 [2;36m│[0m    Nat.gcd.zero_left (n: Nat) : Equal Nat ([1;31mNat.gcd[0m Nat.zero n) n
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   50 [2;36m│[0m    Nat.gcd.zero_left n = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.gcd.zero_left', 'Nat.gcd.self', 'Nat.gcd.succ'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.mul'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:76:41][0m
      [2;36m│[0m
   75 [2;36m│[0m    
   76 [2;36m│[0m    Nat.mul.one_right (n: Nat) : Equal Nat ([1;31mNat.mul[0m n (Nat.succ Nat.zero)) n
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   77 [2;36m│[0m    Nat.mul.one_right n = ?
   78 [2;36m│[0m    
   79 [2;36m│[0m    Nat.mul.distrib_left (n: Nat) (m: Nat) (o: Nat) : Equal Nat ([1;31mNat.mul[0m n (Nat.add m o)) (Nat.add ([1;31mNat.mul[0m n m) ([1;31mNat.mul[0m n o))
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m──────[0m                            [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                 [1;31m│[0m                                  [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m│[0m                                  [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
   80 [2;36m│[0m    Nat.mul.distrib_left n m o = ?
   81 [2;36m│[0m    
   82 [2;36m│[0m    Nat.mul.one_left (n: Nat) : Equal Nat ([1;31mNat.mul[0m (Nat.succ Nat.zero) n)  n
      [2;36m│[0m                                           [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   83 [2;36m│[0m    Nat.mul.one_left n = ?
   84 [2;36m│[0m    
   85 [2;36m│[0m    Nat.mul.succ_right (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.mul[0m n (Nat.succ m)) (Nat.add n ([1;31mNat.mul[0m n m))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──────[0m                             [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                      [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   86 [2;36m│[0m    Nat.mul.succ_right n m = ?
   87 [2;36m│[0m    
   88 [2;36m│[0m    Nat.mul.comm (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.mul[0m n m) ([1;31mNat.mul[0m m n)
      [2;36m│[0m                                                [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   89 [2;36m│[0m    Nat.mul.comm n m = ?
   90 [2;36m│[0m    
   91 [2;36m│[0m    Nat.mul.succ_left (n: Nat) (m: Nat) : Equal Nat ([1;31mNat.mul[0m (Nat.succ n) m)  (Nat.add m ([1;31mNat.mul[0m n m))
      [2;36m│[0m                                                     [1;31m┬[0m[1;31m──────[0m                              [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                     [1;31m│[0m                                    [1;31m└Here![0m
      [2;36m│[0m                                                     [1;31m└Here![0m
   92 [2;36m│[0m    Nat.mul.succ_left n m = ?
   93 [2;36m│[0m    
   94 [2;36m│[0m    Nat.mul.zero_right (n: Nat) : Equal Nat ([1;31mNat.mul[0m n Nat.zero) Nat.zero
      [2;36m│[0m                                             [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   95 [2;36m│[0m    Nat.mul.zero_right n = ?
   96 [2;36m│[0m    
   97 [2;36m│[0m    Nat.mul.zero_left (n: Nat) : Equal Nat ([1;31mNat.mul[0m Nat.zero n) Nat.zero
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   98 [2;36m│[0m    Nat.mul.zero_left n = ?
   99 [2;36m│[0m    
  100 [2;36m│[0m    Nat.mul.assoc (n: Nat) (m: Nat) (o: Nat) : Equal Nat  ([1;31mNat.mul[0m n ([1;31mNat.mul[0m m o)) ([1;31mNat.mul[0m ([1;31mNat.mul[0m n m) o)
      [2;36m│[0m                                                           [1;31m┬[0m[1;31m──────[0m    [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                           [1;31m│[0m          [1;31m│[0m              [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                                                           [1;31m│[0m          [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                           [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                                           [1;31m└Here![0m
  101 [2;36m│[0m    Nat.mul.assoc n m o = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.mul.one_right', 'Nat.mul.succ_left', 'Nat.mul.zero_left', 'Nat.mul.one_left', 'Nat.mul.assoc'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/th_01.kind2:7:39][0m
      [2;36m│[0m
    6 [2;36m│[0m    
    7 [2;36m│[0m    Nat.sub.succ_both (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.sub (Nat.succ n) (Nat.succ m)) (Nat.sub n m)
      [2;36m│[0m                                          [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
    8 [2;36m│[0m    Nat.sub.succ_both n m = ?
    9 [2;36m│[0m    
   10 [2;36m│[0m    Nat.sub.zero_left (n: Nat) : [1;31mEqual[0m Nat (Nat.sub Nat.zero n) Nat.zero
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   11 [2;36m│[0m    Nat.sub.zero_left n = ?
   12 [2;36m│[0m    
   13 [2;36m│[0m    Nat.mod.mod_one_equals_zero (n: Nat) : [1;31mEqual[0m Nat (Nat.mod n 1n) Nat.zero
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   14 [2;36m│[0m    Nat.mod.mod_one_equals_zero n = ?
   15 [2;36m│[0m    
   16 [2;36m│[0m    Nat.mod.zero_mod_equals_zero (n: Nat): [1;31mEqual[0m Nat (Nat.mod Nat.zero (Nat.succ n)) Nat.zero
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   17 [2;36m│[0m    Nat.mod.zero_mod_equals_zero n = ?
   18 [2;36m│[0m    
   19 [2;36m│[0m    Nat.mod.go_self (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.mod.go n n (Nat.succ m)) Nat.zero
      [2;36m│[0m                                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                        [1;31m└Here![0m
   20 [2;36m│[0m    Nat.mod.go_self n m = ?
   21 [2;36m│[0m    
   22 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero (n: Nat) : [1;31mEqual[0m Nat (Nat.mod.go n 1n Nat.zero) Nat.zero
      [2;36m│[0m                                              [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
   23 [2;36m│[0m    Nat.mod.go_mod_one_equals_zero n = ?
   24 [2;36m│[0m    
   25 [2;36m│[0m    Nat.mod.self (n: Nat) : [1;31mEqual[0m Nat (Nat.mod (Nat.succ n) (Nat.succ n)) Nat.zero
      [2;36m│[0m                            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                            [1;31m└Here![0m
   26 [2;36m│[0m    Nat.mod.self n = ?
   27 [2;36m│[0m    
   28 [2;36m│[0m    Nat.succ_inj (n: Nat) (m: Nat) (e: [1;31mEqual[0m Nat (Nat.succ n) (Nat.succ m)) : [1;31mEqual[0m Nat n m
      [2;36m│[0m                                       [1;31m┬[0m[1;31m────[0m                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                       [1;31m│[0m                                      [1;31m└Here![0m
      [2;36m│[0m                                       [1;31m└Here![0m
   29 [2;36m│[0m    Nat.succ_inj n m e = ?
      [2;36m┆[0m     
   39 [2;36m│[0m    
   40 [2;36m│[0m    Nat.gcd.self (n: Nat) : [1;31mEqual[0m Nat (Nat.gcd n n) n
      [2;36m│[0m                            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                            [1;31m└Here![0m
   41 [2;36m│[0m    Nat.gcd.self n = ?
   42 [2;36m│[0m    
   43 [2;36m│[0m    Nat.gcd.succ (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.gcd (Nat.succ n) m) (Nat.gcd (Nat.mod m (Nat.succ n)) (Nat.succ n))
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   44 [2;36m│[0m    Nat.gcd.succ n m = ?
   45 [2;36m│[0m    
   46 [2;36m│[0m    Nat.gcd.zero_right (n: Nat) : [1;31mEqual[0m Nat (Nat.gcd n Nat.zero) n
      [2;36m│[0m                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
   47 [2;36m│[0m    Nat.gcd.zero_right n = ?
   48 [2;36m│[0m    
   49 [2;36m│[0m    Nat.gcd.zero_left (n: Nat) : [1;31mEqual[0m Nat (Nat.gcd Nat.zero n) n
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   50 [2;36m│[0m    Nat.gcd.zero_left n = ?
   51 [2;36m│[0m    
   52 [2;36m│[0m    Nat.lte.zero_right (n: Nat) (e: [1;31mEqual[0m Bool (Nat.lte n Nat.zero) Bool.true) : [1;31mEqual[0m Nat n Nat.zero
      [2;36m│[0m                                    [1;31m┬[0m[1;31m────[0m                                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                    [1;31m│[0m                                            [1;31m└Here![0m
      [2;36m│[0m                                    [1;31m└Here![0m
   53 [2;36m│[0m    Nat.lte.zero_right n e = ?
   54 [2;36m│[0m    
   55 [2;36m│[0m    Nat.add.succ_right (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.add n (Nat.succ m)) (Nat.succ (Nat.add n m))
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   56 [2;36m│[0m    Nat.add.succ_right n m = ?
   57 [2;36m│[0m    
   58 [2;36m│[0m    Nat.add.cancel_left (n: Nat) (m: Nat) (o: Nat) (e: [1;31mEqual[0m Nat (Nat.add n m) (Nat.add n o)) : [1;31mEqual[0m Nat m o
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m────[0m                                    [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                       [1;31m│[0m                                        [1;31m└Here![0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   59 [2;36m│[0m    Nat.add.cancel_left n m o e = ?
   60 [2;36m│[0m    
   61 [2;36m│[0m    Nat.add.comm (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.add n m) (Nat.add m n)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   62 [2;36m│[0m    Nat.add.comm n m = ?
   63 [2;36m│[0m    
   64 [2;36m│[0m    Nat.add.zero_right (n: Nat) : [1;31mEqual[0m Nat (Nat.add n Nat.zero) n
      [2;36m│[0m                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
   65 [2;36m│[0m    Nat.add.zero_right n = ?
   66 [2;36m│[0m    
   67 [2;36m│[0m    Nat.add.cancel_right (n: Nat) (m: Nat) (o: Nat) (e: [1;31mEqual[0m Nat (Nat.add n m) (Nat.add o m)) : [1;31mEqual[0m Nat n o
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m────[0m                                    [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                        [1;31m│[0m                                        [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   68 [2;36m│[0m    Nat.add.cancel_right n m o e = ?
   69 [2;36m│[0m    
   70 [2;36m│[0m    Nat.add.zero_left (n: Nat) : [1;31mEqual[0m Nat (Nat.add Nat.zero n) n
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   71 [2;36m│[0m    Nat.add.zero_left n = ?
   72 [2;36m│[0m    
   73 [2;36m│[0m    Nat.add.assoc (n: Nat) (m: Nat) (o: Nat) : [1;31mEqual[0m Nat (Nat.add (Nat.add n m) o)  (Nat.add n (Nat.add m o))
      [2;36m│[0m                                               [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                               [1;31m└Here![0m
   74 [2;36m│[0m    Nat.add.assoc n m o = ?
   75 [2;36m│[0m    
   76 [2;36m│[0m    Nat.mul.one_right (n: Nat) : [1;31mEqual[0m Nat (Nat.mul n (Nat.succ Nat.zero)) n
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   77 [2;36m│[0m    Nat.mul.one_right n = ?
   78 [2;36m│[0m    
   79 [2;36m│[0m    Nat.mul.distrib_left (n: Nat) (m: Nat) (o: Nat) : [1;31mEqual[0m Nat (Nat.mul n (Nat.add m o)) (Nat.add (Nat.mul n m) (Nat.mul n o))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   80 [2;36m│[0m    Nat.mul.distrib_left n m o = ?
   81 [2;36m│[0m    
   82 [2;36m│[0m    Nat.mul.one_left (n: Nat) : [1;31mEqual[0m Nat (Nat.mul (Nat.succ Nat.zero) n)  n
      [2;36m│[0m                                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                [1;31m└Here![0m
   83 [2;36m│[0m    Nat.mul.one_left n = ?
   84 [2;36m│[0m    
   85 [2;36m│[0m    Nat.mul.succ_right (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.mul n (Nat.succ m)) (Nat.add n (Nat.mul n m))
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   86 [2;36m│[0m    Nat.mul.succ_right n m = ?
   87 [2;36m│[0m    
   88 [2;36m│[0m    Nat.mul.comm (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.mul n m) (Nat.mul m n)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   89 [2;36m│[0m    Nat.mul.comm n m = ?
   90 [2;36m│[0m    
   91 [2;36m│[0m    Nat.mul.succ_left (n: Nat) (m: Nat) : [1;31mEqual[0m Nat (Nat.mul (Nat.succ n) m)  (Nat.add m (Nat.mul n m))
      [2;36m│[0m                                          [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
   92 [2;36m│[0m    Nat.mul.succ_left n m = ?
   93 [2;36m│[0m    
   94 [2;36m│[0m    Nat.mul.zero_right (n: Nat) : [1;31mEqual[0m Nat (Nat.mul n Nat.zero) Nat.zero
      [2;36m│[0m                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
   95 [2;36m│[0m    Nat.mul.zero_right n = ?
   96 [2;36m│[0m    
   97 [2;36m│[0m    Nat.mul.zero_left (n: Nat) : [1;31mEqual[0m Nat (Nat.mul Nat.zero n) Nat.zero
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   98 [2;36m│[0m    Nat.mul.zero_left n = ?
   99 [2;36m│[0m    
  100 [2;36m│[0m    Nat.mul.assoc (n: Nat) (m: Nat) (o: Nat) : [1;31mEqual[0m Nat  (Nat.mul n (Nat.mul m o)) (Nat.mul (Nat.mul n m) o)
      [2;36m│[0m                                               [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                               [1;31m└Here![0m
  101 [2;36m│[0m    Nat.mul.assoc n m o = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 13 errors


  [1;42m CHECKING [0m The file './IINS/Ship/savio.kind2'
  [1;41m ERROR [0m [1mUnexpected token ')'.[0m

[2;36m      ┌──[IINS/Ship/savio.kind2:72:66][0m
      [2;36m│[0m
   71 [2;36m│[0m                                            let ind = Jogas.List a xs.tail
   72 [2;36m│[0m                                            let aux1 = Problems.t17 ([1;31m)[0m
      [2;36m│[0m                                                                     [1;31m┬[0m[1;31m[0m
      [2;36m│[0m                                                                     [1;31m└Here![0m
   73 [2;36m│[0m    


    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Ship/parity.kind2'
  [1;41m ERROR [0m [1mUnexpected token ':'.[0m

[2;36m      ┌──[IINS/Ship/parity.kind2:90:15][0m
      [2;36m│[0m
   89 [2;36m│[0m    
   90 [2;36m│[0m    Nat.to_bits (n[1;31m:[0m Nat) : Bits
      [2;36m│[0m                  [1;31m┬[0m[1;31m[0m
      [2;36m│[0m                  [1;31m└Here![0m
   91 [2;36m│[0m    Nat.to_bits n = 


    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Ship/Prova_02.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:2:32][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
    2 [2;36m│[0m    Revers_length (List.nil Nat) = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n Nat.zero))
   23 [2;36m│[0m    Plus_n_Z Nat.zero = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = Equal.apply (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m┆[0m     
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = [1;31mEqual.refl[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                           [1;31m└Here![0m
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = Equal.apply (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m┆[0m     
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
   35 [2;36m│[0m    App_length a (List.nil l) l2 = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:8:64][0m
      [2;36m│[0m
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat ([1;31mNat.add[0m (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                   																[1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                   																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n ([1;31mNat.add[0m n Nat.zero))
      [2;36m│[0m                                      [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ ([1;31mNat.add[0m n m)) ([1;31mNat.add[0m n (Nat.succ m)))
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m m n))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) ([1;31mNat.add[0m (List.length l1) (List.length l2)))
      [2;36m│[0m                                                                                                   [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                                   [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:7:76][0m
      [2;36m│[0m
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ [1;31mNat.zero[0m)
      [2;36m│[0m                                                               																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                               																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ [1;31mNat.zero[0m)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                                                                     																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                                     																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n [1;31mNat.zero[0m))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
      [2;36m┆[0m     
   23 [2;36m│[0m    Plus_n_Z [1;31mNat.zero[0m = Equal.refl
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m└Here![0m
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = Equal.apply (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m┆[0m     
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   27 [2;36m│[0m    Plus_n_Sm [1;31mNat.zero[0m m = Equal.refl
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = Equal.apply (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m┆[0m     
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
   31 [2;36m│[0m    Plus_comm [1;31mNat.zero[0m m = Plus_n_Z m
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = Equal.chain (Equal.apply (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.cons'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:4:16][0m
      [2;36m│[0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
    4 [2;36m│[0m    Revers_length ([1;31mList.cons[0m Nat head tail) = // livro 
      [2;36m│[0m                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    5 [2;36m│[0m    																let ind = Revers_length tail 
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) ([1;31mList.cons[0m _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                                                              																[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                                              																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
   20 [2;36m│[0m    Revers a ([1;31mList.cons[0m l head tail) = List.concat (Revers tail) [head]
      [2;36m│[0m              [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m              [1;31m└Here![0m
   21 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a ([1;31mList.cons[0m l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)
      [2;36m│[0m                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.cons'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:1:19][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: [1;31mList[0m Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                      [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    Revers <a: Type>(l: [1;31mList[0m a) : [1;31mList[0m a
      [2;36m│[0m                        [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                        [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: [1;31mList[0m a) (l2: [1;31mList[0m a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                              [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                              [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                              [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: [1;31mList[0m a): Equal Nat (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.length'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:1:39][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal ([1;31mList.length[0m (Revers l)) ([1;31mList.length[0m l)) //meu video
      [2;36m│[0m                                          [1;31m┬[0m[1;31m──────────[0m              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                          [1;31m│[0m                        [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm ([1;31mList.length[0m (Revers tail)) (Nat.succ Nat.zero)
      [2;36m│[0m                          																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                          																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add ([1;31mList.length[0m Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                            																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                            																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ ([1;31mList.length[0m _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                  																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                  																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat ([1;31mList.length[0m (List.concat l1 l2)) (Nat.add ([1;31mList.length[0m l1) ([1;31mList.length[0m l2)))
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m──────────[0m                                [1;31m┬[0m[1;31m──────────[0m      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                 [1;31m│[0m                                          [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m│[0m                                          [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): Equal Nat ([1;31mList.length[0m (Revers xs)) ([1;31mList.length[0m xs)
      [2;36m│[0m                                               [1;31m┬[0m[1;31m──────────[0m               [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                               [1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                               [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:7:67][0m
      [2;36m│[0m
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) ([1;31mNat.succ[0m Nat.zero)
      [2;36m│[0m                                                      																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                      																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) ([1;31mNat.succ[0m Nat.zero)) ([1;31mNat.succ[0m x))) aux2			
      [2;36m│[0m                                                                                            																[1;31m┬[0m[1;31m───────[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                            																[1;31m│[0m                    [1;31m└Here![0m
      [2;36m│[0m                                                                                            																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
   24 [2;36m│[0m    Plus_n_Z ([1;31mNat.succ[0m n.pred) = Equal.apply (x => [1;31mNat.succ[0m x) (Plus_n_Z n.pred)
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m                             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m│[0m                                    [1;31m└Here![0m
      [2;36m│[0m              [1;31m└Here![0m
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.succ[0m (Nat.add n m)) (Nat.add n ([1;31mNat.succ[0m m)))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───────[0m                            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                              [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
   28 [2;36m│[0m    Plus_n_Sm ([1;31mNat.succ[0m n) m = Equal.apply (x => [1;31mNat.succ[0m x) (Plus_n_Sm n m)
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                                 [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   29 [2;36m│[0m    
      [2;36m┆[0m     
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm ([1;31mNat.succ[0m n.pred) m = Equal.chain (Equal.apply (x => [1;31mNat.succ[0m x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                                            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                                                   [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   33 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => [1;31mNat.succ[0m x) (App_length l tail l2)
      [2;36m│[0m                                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:1:24][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List [1;31mNat[0m) : (Equal (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m└Here![0m
      [2;36m┆[0m     
    2 [2;36m│[0m    Revers_length (List.nil [1;31mNat[0m) = Equal.refl
      [2;36m│[0m                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                            [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
    4 [2;36m│[0m    Revers_length (List.cons [1;31mNat[0m head tail) = // livro 
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m└Here![0m
    5 [2;36m│[0m    																let ind = Revers_length tail 
      [2;36m┆[0m     
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal [1;31mNat[0m (Nat.add (List.length [1;31mNat[0m (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                              																[1;31m┬[0m[1;31m──[0m                       [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                              																[1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                              																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: [1;31mNat[0m) : (Equal [1;31mNat[0m n (Nat.add n Nat.zero))
      [2;36m│[0m                 [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal [1;31mNat[0m (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                            [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): Equal [1;31mNat[0m (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                          [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.concat'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:9:78][0m
      [2;36m│[0m
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ ([1;31mList.concat[0m _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                                 																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                 																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
   20 [2;36m│[0m    Revers a (List.cons l head tail) = [1;31mList.concat[0m (Revers tail) [head]
      [2;36m│[0m                                       [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                       [1;31m└Here![0m
   21 [2;36m│[0m    
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length ([1;31mList.concat[0m l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                                              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                              [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:24:30][0m
      [2;36m│[0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = [1;31mEqual.apply[0m (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   25 [2;36m│[0m    
      [2;36m┆[0m     
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = [1;31mEqual.apply[0m (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m│[0m                               [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                               [1;31m└Here![0m
   29 [2;36m│[0m    
      [2;36m┆[0m     
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = Equal.chain ([1;31mEqual.apply[0m (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                 [1;31m└Here![0m
   33 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = [1;31mEqual.apply[0m (x => Nat.succ x) (App_length l tail l2)
      [2;36m│[0m                                              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.nil'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:2:16][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
    2 [2;36m│[0m    Revers_length ([1;31mList.nil[0m Nat) = Equal.refl
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head ([1;31mList.nil[0m _)))) x )) aux1				
      [2;36m│[0m                                                                                                                																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                                                																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   18 [2;36m│[0m    Revers <a: Type>(l: List a) : List a
   19 [2;36m│[0m    Revers a ([1;31mList.nil[0m l) = [1;31mList.nil[0m a
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m              [1;31m└Here![0m
   20 [2;36m│[0m    Revers a (List.cons l head tail) = List.concat (Revers tail) [head]
      [2;36m┆[0m     
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
   35 [2;36m│[0m    App_length a ([1;31mList.nil[0m l) l2 = Equal.refl
      [2;36m│[0m                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.nil'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.rewrite'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:8:28][0m
      [2;36m│[0m
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = [1;31mEqual.rewrite[0m ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m               																[1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m               																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = [1;31mEqual.rewrite[0m rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m               																[1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m               																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:1:32][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : ([1;31mEqual[0m (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => ([1;31mEqual[0m Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                        																[1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                        																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => ([1;31mEqual[0m _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                         																[1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                         																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : ([1;31mEqual[0m Nat n (Nat.add n Nat.zero))
      [2;36m│[0m                         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                         [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : ([1;31mEqual[0m Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): [1;31mEqual[0m Nat (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                                    [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                    [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.chain'.[0m

[2;36m      ┌──[IINS/Ship/Prova_02.kind2:32:33][0m
      [2;36m│[0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = [1;31mEqual.chain[0m (Equal.apply (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m                                    [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                    [1;31m└Here![0m
   33 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 14 errors


  [1;42m CHECKING [0m The file './IINS/Ship/savio03.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Ship/savio03.kind2:37:10][0m
      [2;36m│[0m
   36 [2;36m│[0m    Pred_1 : Equal (Pred Zero) (Zero)
   37 [2;36m│[0m    Pred_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   38 [2;36m│[0m    
   39 [2;36m│[0m    Pred_2 : Equal (Pred Two) (One)
   40 [2;36m│[0m    Pred_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   41 [2;36m│[0m    
   42 [2;36m│[0m    Pred_3 : Equal (Pred Three) (Two)
   43 [2;36m│[0m    Pred_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   44 [2;36m│[0m    
      [2;36m┆[0m     
   48 [2;36m│[0m    Sub_1 : Equal (Sub One Zero) (One)
   49 [2;36m│[0m    Sub_1 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
   50 [2;36m│[0m    
   51 [2;36m│[0m    Sub_2 : Equal (Sub Two Two) (Sub One One)
   52 [2;36m│[0m    Sub_2 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
   53 [2;36m│[0m    
      [2;36m┆[0m     
   58 [2;36m│[0m    Succ_1 : Equal (Succ Zero) (One)
   59 [2;36m│[0m    Succ_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   60 [2;36m│[0m    
   61 [2;36m│[0m    Succ_2 : Equal (Succ One) (Two)
   62 [2;36m│[0m    Succ_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   63 [2;36m│[0m    
   64 [2;36m│[0m    Succ_3 : Equal (Succ Two) (Three)
   65 [2;36m│[0m    Succ_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   66 [2;36m│[0m    
      [2;36m┆[0m     
   74 [2;36m│[0m    Plus_1 : Equal (Plus One Zero) (One)
   75 [2;36m│[0m    Plus_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   76 [2;36m│[0m    // plus'_1 : plus' zero one = one
      [2;36m┆[0m     
   79 [2;36m│[0m    Plus_2 : Equal (Plus Two One) (Plus One Two)
   80 [2;36m│[0m    Plus_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   81 [2;36m│[0m    
      [2;36m┆[0m     
   88 [2;36m│[0m    Plus_3 : Equal (Plus (Plus Two Two) Three) (Plus One (Plus Three Three))
   89 [2;36m│[0m    Plus_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   90 [2;36m│[0m    
      [2;36m┆[0m     
   97 [2;36m│[0m    Mult_1 : Equal (Mult One One) One
   98 [2;36m│[0m    Mult_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
   99 [2;36m│[0m    // mult'_1 : mult' one one = one
      [2;36m┆[0m     
  102 [2;36m│[0m    Mult_2 : Equal (Mult Zero (Plus Three Three)) Zero
  103 [2;36m│[0m    Mult_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  104 [2;36m│[0m    // mult'_2 : mult' zero (plus' three three) = zero
      [2;36m┆[0m     
  107 [2;36m│[0m    Mult_3 : Equal (Mult Two Three) (Plus Three Three)
  108 [2;36m│[0m    Mult_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  109 [2;36m│[0m    // mult'_3 : mult' two three = plus' three three
      [2;36m┆[0m     
  123 [2;36m│[0m    Exp_1 : Equal (Exp Two Two) (Plus Two Two)
  124 [2;36m│[0m    Exp_1 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  125 [2;36m│[0m    // -- exp'_1 : exp' two two = plus' two two
      [2;36m┆[0m     
  127 [2;36m│[0m    Exp_2 : Equal (Exp Three Two) (Plus (Mult Two (Mult Two Two)) One)
  128 [2;36m│[0m    Exp_2 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  129 [2;36m│[0m    // exp'_2 : exp' three two = plus' (mult' two (mult' two two)) one
      [2;36m┆[0m     
  131 [2;36m│[0m    Exp_3 : Equal (Exp Three Zero) One
  132 [2;36m│[0m    Exp_3 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/savio03.kind2:36:10][0m
      [2;36m│[0m
   35 [2;36m│[0m    // λn.λf.λx. n (λg.λh. h (g f)) (λu. x) (λu. u)
   36 [2;36m│[0m    Pred_1 : [1;31mEqual[0m (Pred Zero) (Zero)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   37 [2;36m│[0m    Pred_1 = Equal.refl
   38 [2;36m│[0m    
   39 [2;36m│[0m    Pred_2 : [1;31mEqual[0m (Pred Two) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   40 [2;36m│[0m    Pred_2 = Equal.refl
   41 [2;36m│[0m    
   42 [2;36m│[0m    Pred_3 : [1;31mEqual[0m (Pred Three) (Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   43 [2;36m│[0m    Pred_3 = Equal.refl
      [2;36m┆[0m     
   47 [2;36m│[0m    
   48 [2;36m│[0m    Sub_1 : [1;31mEqual[0m (Sub One Zero) (One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
   49 [2;36m│[0m    Sub_1 = Equal.refl
   50 [2;36m│[0m    
   51 [2;36m│[0m    Sub_2 : [1;31mEqual[0m (Sub Two Two) (Sub One One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
   52 [2;36m│[0m    Sub_2 = Equal.refl
      [2;36m┆[0m     
   57 [2;36m│[0m    // λn.λf.λx. f (n f x).
   58 [2;36m│[0m    Succ_1 : [1;31mEqual[0m (Succ Zero) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   59 [2;36m│[0m    Succ_1 = Equal.refl
   60 [2;36m│[0m    
   61 [2;36m│[0m    Succ_2 : [1;31mEqual[0m (Succ One) (Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   62 [2;36m│[0m    Succ_2 = Equal.refl
   63 [2;36m│[0m    
   64 [2;36m│[0m    Succ_3 : [1;31mEqual[0m (Succ Two) (Three)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   65 [2;36m│[0m    Succ_3 = Equal.refl
      [2;36m┆[0m     
   73 [2;36m│[0m    
   74 [2;36m│[0m    Plus_1 : [1;31mEqual[0m (Plus One Zero) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   75 [2;36m│[0m    Plus_1 = Equal.refl
      [2;36m┆[0m     
   78 [2;36m│[0m    
   79 [2;36m│[0m    Plus_2 : [1;31mEqual[0m (Plus Two One) (Plus One Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   80 [2;36m│[0m    Plus_2 = Equal.refl
      [2;36m┆[0m     
   87 [2;36m│[0m    
   88 [2;36m│[0m    Plus_3 : [1;31mEqual[0m (Plus (Plus Two Two) Three) (Plus One (Plus Three Three))
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   89 [2;36m│[0m    Plus_3 = Equal.refl
      [2;36m┆[0m     
   96 [2;36m│[0m    
   97 [2;36m│[0m    Mult_1 : [1;31mEqual[0m (Mult One One) One
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
   98 [2;36m│[0m    Mult_1 = Equal.refl
      [2;36m┆[0m     
  101 [2;36m│[0m    
  102 [2;36m│[0m    Mult_2 : [1;31mEqual[0m (Mult Zero (Plus Three Three)) Zero
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  103 [2;36m│[0m    Mult_2 = Equal.refl
      [2;36m┆[0m     
  106 [2;36m│[0m    
  107 [2;36m│[0m    Mult_3 : [1;31mEqual[0m (Mult Two Three) (Plus Three Three)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  108 [2;36m│[0m    Mult_3 = Equal.refl
      [2;36m┆[0m     
  122 [2;36m│[0m    // This won’t typecheck under this signature of exp because of 2 instances of two
  123 [2;36m│[0m    Exp_1 : [1;31mEqual[0m (Exp Two Two) (Plus Two Two)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  124 [2;36m│[0m    Exp_1 = Equal.refl
      [2;36m┆[0m     
  126 [2;36m│[0m    // -- exp'_1 = ?exp__1_rhs
  127 [2;36m│[0m    Exp_2 : [1;31mEqual[0m (Exp Three Two) (Plus (Mult Two (Mult Two Two)) One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  128 [2;36m│[0m    Exp_2 = Equal.refl
      [2;36m┆[0m     
  130 [2;36m│[0m    // exp'_2 = ?exp__2_rhs
  131 [2;36m│[0m    Exp_3 : [1;31mEqual[0m (Exp Three Zero) One
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  132 [2;36m│[0m    Exp_3 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 2 errors


  [1;42m CHECKING [0m The file './IINS/Ship/th_00.kind2'
     [1;42m STATS [0m Rewrites: 547793
   [1;42m CHECKED [0m All terms checked. took 0.27s


  [1;42m CHECKING [0m The file './IINS/Ship/th_02.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:97][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: List a) (l1: List a) : Equal Nat (List.length (List.concat l0 l1)) ([1;31mNat.add[0m (List.length l0) (List.length l1))
      [2;36m│[0m                                                                                                    [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                                    [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.cons'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:16:15][0m
      [2;36m│[0m
   15 [2;36m│[0m    List.reverse List.nil = List.nil 
   16 [2;36m│[0m    List.reverse ([1;31mList.cons[0m a head tail) = List.concat (List.reverse tail) [head]
      [2;36m│[0m                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   17 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'List.map.concat', 'List.concat.assoc', 'Data.List.cons'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.lte'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:39:66][0m
      [2;36m│[0m
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> Bool) : Equal Bool ([1;31mNat.lte[0m (List.length (List.filter l0 f)) (List.length l0)) Bool.true
      [2;36m│[0m                                                                     [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                     [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:29][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: [1;31mList[0m a) (l1: [1;31mList[0m a) : Equal Nat (List.length (List.concat l0 l1)) (Nat.add (List.length l0) (List.length l1))
      [2;36m│[0m                                [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?
    5 [2;36m│[0m    
    6 [2;36m│[0m    List.length.concat.comm <a> (l0: [1;31mList[0m a) (l1: [1;31mList[0m a) : Equal Nat (List.length (List.concat l0 l1)) (List.length (List.concat l1 l0))
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                     [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
    7 [2;36m│[0m    List.length.concat.comm l0 l1 = ?
    8 [2;36m│[0m    
    9 [2;36m│[0m    List.concat.assoc <a> (l0: [1;31mList[0m a) (l1: [1;31mList[0m a) (l2: [1;31mList[0m a) : Equal ([1;31mList[0m a) (List.concat (List.concat l0 l1) l2) (List.concat l0 (List.concat l1 l2))
      [2;36m│[0m                               [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m             [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                               [1;31m│[0m            [1;31m│[0m            [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                               [1;31m│[0m            [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                               [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                               [1;31m└Here![0m
   10 [2;36m│[0m    List.concat.assoc l0 l1 l2 = ?
      [2;36m┆[0m     
   13 [2;36m│[0m    // // try this definition first instead of the one in base.
   14 [2;36m│[0m    List.reverse <a> (l: [1;31mList[0m a) : [1;31mList[0m a
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   15 [2;36m│[0m    List.reverse List.nil = List.nil 
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    List.length.reverse <a> (l0: [1;31mList[0m a) : Equal Nat (List.length l0) (List.length (List.reverse l0))
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   19 [2;36m│[0m    List.length.reverse l0 = ?
   20 [2;36m│[0m    
   21 [2;36m│[0m    List.reverse.involutive <a> (l0: [1;31mList[0m a ) : Equal ([1;31mList[0m a) (List.reverse (List.reverse l0)) l0
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───[0m              [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                     [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   22 [2;36m│[0m    List.reverse.involutive l0 = ?
   23 [2;36m│[0m     
   24 [2;36m│[0m    List.reverse.concat <a> (l0: [1;31mList[0m a) (l1: [1;31mList[0m a ) :  Equal ([1;31mList[0m a) (List.concat (List.reverse l0) (List.reverse l1)) (List.reverse (List.concat l0 l1)) 
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m               [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                 [1;31m│[0m            [1;31m│[0m                  [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m└Here![0m
   25 [2;36m│[0m    List.reverse.concat l0 l1 = ?
   26 [2;36m│[0m    
   27 [2;36m│[0m    List.length.map <a> <b> (l0: [1;31mList[0m a) (f: a -> b) : Equal Nat (List.length (List.map l0 f)) (List.length l0)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   28 [2;36m│[0m    List.length.map f l0 = ?
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.map.concat <a> <b> (l0: [1;31mList[0m a) (l1: [1;31mList[0m a) (f: a -> b) : Equal ([1;31mList[0m b) (List.concat (List.map l0 f) (List.map l1 f)) (List.map (List.concat l0 l1) f)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                 [1;31m│[0m            [1;31m│[0m                            [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m└Here![0m
   31 [2;36m│[0m    List.map.concat l0 l1 f = ?
   32 [2;36m│[0m    
   33 [2;36m│[0m    List.map.comp <a> <b> <c> (l0: [1;31mList[0m a) (f: a -> b) (g: b -> c) : Equal ([1;31mList[0m c) (List.map (List.map l0 f) g) (List.map l0 (x => g (f x)))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m───[0m                                     [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                   [1;31m│[0m                                        [1;31m└Here![0m
      [2;36m│[0m                                   [1;31m└Here![0m
   34 [2;36m│[0m    List.map.comp l0 f g = ?
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: Nat) (l0: [1;31mList[0m a) : Equal ([1;31mList[0m a) (List.concat (List.take l0 n) (List.drop l0 n)) l0
      [2;36m│[0m                                            [1;31m┬[0m[1;31m───[0m             [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                            [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                            [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: [1;31mList[0m a) (f: a -> Bool) : Equal Bool (Nat.lte (List.length (List.filter l0 f)) (List.length l0)) Bool.true
      [2;36m│[0m                                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:39:46][0m
      [2;36m│[0m
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> [1;31mBool[0m) : Equal [1;31mBool[0m (Nat.lte (List.length (List.filter l0 f)) (List.length l0)) Bool.true
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m───[0m          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                 [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:39:125][0m
      [2;36m│[0m
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> Bool) : Equal Bool (Nat.lte (List.length (List.filter l0 f)) (List.length l0)) [1;31mBool.true[0m
      [2;36m│[0m                                                                                                                                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                                                                                [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.concat'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:76][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: List a) (l1: List a) : Equal Nat (List.length ([1;31mList.concat[0m l0 l1)) (Nat.add (List.length l0) (List.length l1))
      [2;36m│[0m                                                                               [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                               [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?
    5 [2;36m│[0m    
    6 [2;36m│[0m    List.length.concat.comm <a> (l0: List a) (l1: List a) : Equal Nat (List.length ([1;31mList.concat[0m l0 l1)) (List.length ([1;31mList.concat[0m l1 l0))
      [2;36m│[0m                                                                                    [1;31m┬[0m[1;31m──────────[0m                       [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                                    [1;31m│[0m                                 [1;31m└Here![0m
      [2;36m│[0m                                                                                    [1;31m└Here![0m
    7 [2;36m│[0m    List.length.concat.comm l0 l1 = ?
    8 [2;36m│[0m    
    9 [2;36m│[0m    List.concat.assoc <a> (l0: List a) (l1: List a) (l2: List a) : Equal (List a) ([1;31mList.concat[0m ([1;31mList.concat[0m l0 l1) l2) ([1;31mList.concat[0m l0 ([1;31mList.concat[0m l1 l2))
      [2;36m│[0m                                                                                   [1;31m┬[0m[1;31m──────────[0m  [1;31m┬[0m[1;31m──────────[0m             [1;31m┬[0m[1;31m──────────[0m     [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                                   [1;31m│[0m            [1;31m│[0m                       [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                                                                                   [1;31m│[0m            [1;31m│[0m                       [1;31m└Here![0m
      [2;36m│[0m                                                                                   [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                                                                   [1;31m└Here![0m
   10 [2;36m│[0m    List.concat.assoc l0 l1 l2 = ?
      [2;36m┆[0m     
   15 [2;36m│[0m    List.reverse List.nil = List.nil 
   16 [2;36m│[0m    List.reverse (List.cons a head tail) = [1;31mList.concat[0m (List.reverse tail) [head]
      [2;36m│[0m                                           [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   17 [2;36m│[0m    
      [2;36m┆[0m     
   23 [2;36m│[0m     
   24 [2;36m│[0m    List.reverse.concat <a> (l0: List a) (l1: List a ) :  Equal (List a) ([1;31mList.concat[0m (List.reverse l0) (List.reverse l1)) (List.reverse ([1;31mList.concat[0m l0 l1)) 
      [2;36m│[0m                                                                          [1;31m┬[0m[1;31m──────────[0m                                                     [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                          [1;31m│[0m                                                               [1;31m└Here![0m
      [2;36m│[0m                                                                          [1;31m└Here![0m
   25 [2;36m│[0m    List.reverse.concat l0 l1 = ?
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.map.concat <a> <b> (l0: List a) (l1: List a) (f: a -> b) : Equal (List b) ([1;31mList.concat[0m (List.map l0 f) (List.map l1 f)) (List.map ([1;31mList.concat[0m l0 l1) f)
      [2;36m│[0m                                                                                    [1;31m┬[0m[1;31m──────────[0m                                             [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                                    [1;31m│[0m                                                       [1;31m└Here![0m
      [2;36m│[0m                                                                                    [1;31m└Here![0m
   31 [2;36m│[0m    List.map.concat l0 l1 f = ?
      [2;36m┆[0m     
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: Nat) (l0: List a) : Equal (List a) ([1;31mList.concat[0m (List.take l0 n) (List.drop l0 n)) l0
      [2;36m│[0m                                                                      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                      [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'List.length.concat', 'List.concat.take_drop', 'List.reverse.concat', 'List.map.concat', 'List.concat.assoc'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.map'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:27:76][0m
      [2;36m│[0m
   26 [2;36m│[0m    
   27 [2;36m│[0m    List.length.map <a> <b> (l0: List a) (f: a -> b) : Equal Nat (List.length ([1;31mList.map[0m l0 f)) (List.length l0)
      [2;36m│[0m                                                                               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                               [1;31m└Here![0m
   28 [2;36m│[0m    List.length.map f l0 = ?
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.map.concat <a> <b> (l0: List a) (l1: List a) (f: a -> b) : Equal (List b) (List.concat ([1;31mList.map[0m l0 f) ([1;31mList.map[0m l1 f)) ([1;31mList.map[0m (List.concat l0 l1) f)
      [2;36m│[0m                                                                                                 [1;31m┬[0m[1;31m───────[0m        [1;31m┬[0m[1;31m───────[0m         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                                 [1;31m│[0m               [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                                                                 [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                                                                                                 [1;31m└Here![0m
   31 [2;36m│[0m    List.map.concat l0 l1 f = ?
   32 [2;36m│[0m    
   33 [2;36m│[0m    List.map.comp <a> <b> <c> (l0: List a) (f: a -> b) (g: b -> c) : Equal (List c) ([1;31mList.map[0m ([1;31mList.map[0m l0 f) g) ([1;31mList.map[0m l0 (x => g (f x)))
      [2;36m│[0m                                                                                     [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                     [1;31m│[0m         [1;31m│[0m                  [1;31m└Here![0m
      [2;36m│[0m                                                                                     [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                                                                     [1;31m└Here![0m
   34 [2;36m│[0m    List.map.comp l0 f g = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'List.map.concat', 'List.map.comp'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:52][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: List a) (l1: List a) : [1;31mEqual[0m Nat (List.length (List.concat l0 l1)) (Nat.add (List.length l0) (List.length l1))
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?
    5 [2;36m│[0m    
    6 [2;36m│[0m    List.length.concat.comm <a> (l0: List a) (l1: List a) : [1;31mEqual[0m Nat (List.length (List.concat l0 l1)) (List.length (List.concat l1 l0))
      [2;36m│[0m                                                            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                            [1;31m└Here![0m
    7 [2;36m│[0m    List.length.concat.comm l0 l1 = ?
    8 [2;36m│[0m    
    9 [2;36m│[0m    List.concat.assoc <a> (l0: List a) (l1: List a) (l2: List a) : [1;31mEqual[0m (List a) (List.concat (List.concat l0 l1) l2) (List.concat l0 (List.concat l1 l2))
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
   10 [2;36m│[0m    List.concat.assoc l0 l1 l2 = ?
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    List.length.reverse <a> (l0: List a) : [1;31mEqual[0m Nat (List.length l0) (List.length (List.reverse l0))
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
   19 [2;36m│[0m    List.length.reverse l0 = ?
   20 [2;36m│[0m    
   21 [2;36m│[0m    List.reverse.involutive <a> (l0: List a ) : [1;31mEqual[0m (List a) (List.reverse (List.reverse l0)) l0
      [2;36m│[0m                                                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
   22 [2;36m│[0m    List.reverse.involutive l0 = ?
   23 [2;36m│[0m     
   24 [2;36m│[0m    List.reverse.concat <a> (l0: List a) (l1: List a ) :  [1;31mEqual[0m (List a) (List.concat (List.reverse l0) (List.reverse l1)) (List.reverse (List.concat l0 l1)) 
      [2;36m│[0m                                                          [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                          [1;31m└Here![0m
   25 [2;36m│[0m    List.reverse.concat l0 l1 = ?
   26 [2;36m│[0m    
   27 [2;36m│[0m    List.length.map <a> <b> (l0: List a) (f: a -> b) : [1;31mEqual[0m Nat (List.length (List.map l0 f)) (List.length l0)
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
   28 [2;36m│[0m    List.length.map f l0 = ?
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.map.concat <a> <b> (l0: List a) (l1: List a) (f: a -> b) : [1;31mEqual[0m (List b) (List.concat (List.map l0 f) (List.map l1 f)) (List.map (List.concat l0 l1) f)
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
   31 [2;36m│[0m    List.map.concat l0 l1 f = ?
   32 [2;36m│[0m    
   33 [2;36m│[0m    List.map.comp <a> <b> <c> (l0: List a) (f: a -> b) (g: b -> c) : [1;31mEqual[0m (List c) (List.map (List.map l0 f) g) (List.map l0 (x => g (f x)))
      [2;36m│[0m                                                                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                     [1;31m└Here![0m
   34 [2;36m│[0m    List.map.comp l0 f g = ?
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: Nat) (l0: List a) : [1;31mEqual[0m (List a) (List.concat (List.take l0 n) (List.drop l0 n)) l0
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> Bool) : [1;31mEqual[0m Bool (Nat.lte (List.length (List.filter l0 f)) (List.length l0)) Bool.true
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                         [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.take'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:36:80][0m
      [2;36m│[0m
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: Nat) (l0: List a) : Equal (List a) (List.concat ([1;31mList.take[0m l0 n) (List.drop l0 n)) l0
      [2;36m│[0m                                                                                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                                   [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.length'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:63][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: List a) (l1: List a) : Equal Nat ([1;31mList.length[0m (List.concat l0 l1)) (Nat.add ([1;31mList.length[0m l0) ([1;31mList.length[0m l1))
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m──────────[0m                                [1;31m┬[0m[1;31m──────────[0m      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                  [1;31m│[0m                                          [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                                  [1;31m│[0m                                          [1;31m└Here![0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?
    5 [2;36m│[0m    
    6 [2;36m│[0m    List.length.concat.comm <a> (l0: List a) (l1: List a) : Equal Nat ([1;31mList.length[0m (List.concat l0 l1)) ([1;31mList.length[0m (List.concat l1 l0))
      [2;36m│[0m                                                                       [1;31m┬[0m[1;31m──────────[0m                       [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                       [1;31m│[0m                                 [1;31m└Here![0m
      [2;36m│[0m                                                                       [1;31m└Here![0m
    7 [2;36m│[0m    List.length.concat.comm l0 l1 = ?
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    List.length.reverse <a> (l0: List a) : Equal Nat ([1;31mList.length[0m l0) ([1;31mList.length[0m (List.reverse l0))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──────────[0m      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                      [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   19 [2;36m│[0m    List.length.reverse l0 = ?
      [2;36m┆[0m     
   26 [2;36m│[0m    
   27 [2;36m│[0m    List.length.map <a> <b> (l0: List a) (f: a -> b) : Equal Nat ([1;31mList.length[0m (List.map l0 f)) ([1;31mList.length[0m l0)
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m──────────[0m                   [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                  [1;31m│[0m                             [1;31m└Here![0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
   28 [2;36m│[0m    List.length.map f l0 = ?
      [2;36m┆[0m     
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> Bool) : Equal Bool (Nat.lte ([1;31mList.length[0m (List.filter l0 f)) ([1;31mList.length[0m l0)) Bool.true
      [2;36m│[0m                                                                              [1;31m┬[0m[1;31m──────────[0m                      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                              [1;31m│[0m                                [1;31m└Here![0m
      [2;36m│[0m                                                                              [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'List.length.concat.comm', 'List.length.reverse', 'List.length.concat', 'List.length.filter', 'List.length.map'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:3:58][0m
      [2;36m│[0m
    2 [2;36m│[0m    //Most of these aren't in base yet, please send us a PR if you solve one of them.
    3 [2;36m│[0m    List.length.concat <a> (l0: List a) (l1: List a) : Equal [1;31mNat[0m (List.length (List.concat l0 l1)) (Nat.add (List.length l0) (List.length l1))
      [2;36m│[0m                                                             [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                             [1;31m└Here![0m
    4 [2;36m│[0m    List.length.concat l0 l1 = ?
    5 [2;36m│[0m    
    6 [2;36m│[0m    List.length.concat.comm <a> (l0: List a) (l1: List a) : Equal [1;31mNat[0m (List.length (List.concat l0 l1)) (List.length (List.concat l1 l0))
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
    7 [2;36m│[0m    List.length.concat.comm l0 l1 = ?
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    List.length.reverse <a> (l0: List a) : Equal [1;31mNat[0m (List.length l0) (List.length (List.reverse l0))
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                 [1;31m└Here![0m
   19 [2;36m│[0m    List.length.reverse l0 = ?
      [2;36m┆[0m     
   26 [2;36m│[0m    
   27 [2;36m│[0m    List.length.map <a> <b> (l0: List a) (f: a -> b) : Equal [1;31mNat[0m (List.length (List.map l0 f)) (List.length l0)
      [2;36m│[0m                                                             [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                             [1;31m└Here![0m
   28 [2;36m│[0m    List.length.map f l0 = ?
      [2;36m┆[0m     
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: [1;31mNat[0m) (l0: List a) : Equal (List a) (List.concat (List.take l0 n) (List.drop l0 n)) l0
      [2;36m│[0m                                  [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                  [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.nil'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:15:14][0m
      [2;36m│[0m
   14 [2;36m│[0m    List.reverse <a> (l: List a) : List a
   15 [2;36m│[0m    List.reverse [1;31mList.nil[0m = [1;31mList.nil[0m 
      [2;36m│[0m                 [1;31m┬[0m[1;31m───────[0m   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                 [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   16 [2;36m│[0m    List.reverse (List.cons a head tail) = List.concat (List.reverse tail) [head]

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.nil'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.filter'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:39:88][0m
      [2;36m│[0m
   38 [2;36m│[0m    
   39 [2;36m│[0m    List.length.filter <a> (l0: List a) (f: a -> Bool) : Equal Bool (Nat.lte (List.length ([1;31mList.filter[0m l0 f)) (List.length l0)) Bool.true
      [2;36m│[0m                                                                                           [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                                           [1;31m└Here![0m
   40 [2;36m│[0m    List.length.filter l0 f = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'List.length.filter'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.drop'.[0m

[2;36m      ┌──[IINS/Ship/th_02.kind2:36:97][0m
      [2;36m│[0m
   35 [2;36m│[0m    
   36 [2;36m│[0m    List.concat.take_drop <a> (n: Nat) (l0: List a) : Equal (List a) (List.concat (List.take l0 n) ([1;31mList.drop[0m l0 n)) l0
      [2;36m│[0m                                                                                                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                                                    [1;31m└Here![0m
   37 [2;36m│[0m    List.concat.take_drop n l0 = ?

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 15 errors


  [1;42m CHECKING [0m The file './IINS/Ship/Prova_03.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:2:32][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
    2 [2;36m│[0m    Revers_length (List.nil Nat) = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n Nat.zero))
   23 [2;36m│[0m    Plus_n_Z Nat.zero = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = Equal.apply (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m┆[0m     
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = [1;31mEqual.refl[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                           [1;31m└Here![0m
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = Equal.apply (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m┆[0m     
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
   35 [2;36m│[0m    App_length a (List.nil l) l2 = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:8:64][0m
      [2;36m│[0m
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat ([1;31mNat.add[0m (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                   																[1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                   																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n ([1;31mNat.add[0m n Nat.zero))
      [2;36m│[0m                                      [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ ([1;31mNat.add[0m n m)) ([1;31mNat.add[0m n (Nat.succ m)))
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m m n))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) ([1;31mNat.add[0m (List.length l1) (List.length l2)))
      [2;36m│[0m                                                                                                   [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                                   [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:7:76][0m
      [2;36m│[0m
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ [1;31mNat.zero[0m)
      [2;36m│[0m                                                               																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                               																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ [1;31mNat.zero[0m)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                                                                     																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                                     																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n [1;31mNat.zero[0m))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
      [2;36m┆[0m     
   23 [2;36m│[0m    Plus_n_Z [1;31mNat.zero[0m = Equal.refl
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m└Here![0m
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = Equal.apply (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m┆[0m     
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   27 [2;36m│[0m    Plus_n_Sm [1;31mNat.zero[0m m = Equal.refl
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = Equal.apply (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m┆[0m     
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
   31 [2;36m│[0m    Plus_comm [1;31mNat.zero[0m m = Plus_n_Z m
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = Equal.chain (Equal.apply (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.cons'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:4:16][0m
      [2;36m│[0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
    4 [2;36m│[0m    Revers_length ([1;31mList.cons[0m Nat head tail) = // livro 
      [2;36m│[0m                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    5 [2;36m│[0m    																let ind = Revers_length tail 
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) ([1;31mList.cons[0m _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                                                              																[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                                              																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
   20 [2;36m│[0m    Revers a ([1;31mList.cons[0m l head tail) = List.concat (Revers tail) [head]
      [2;36m│[0m              [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m              [1;31m└Here![0m
   21 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a ([1;31mList.cons[0m l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)
      [2;36m│[0m                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.cons'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:1:19][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: [1;31mList[0m Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                      [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
   17 [2;36m│[0m    
   18 [2;36m│[0m    Revers <a: Type>(l: [1;31mList[0m a) : [1;31mList[0m a
      [2;36m│[0m                        [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                        [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: [1;31mList[0m a) (l2: [1;31mList[0m a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                              [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                              [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                              [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: [1;31mList[0m a): Equal Nat (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.length'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:1:39][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal ([1;31mList.length[0m (Revers l)) ([1;31mList.length[0m l)) //meu video
      [2;36m│[0m                                          [1;31m┬[0m[1;31m──────────[0m              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                          [1;31m│[0m                        [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm ([1;31mList.length[0m (Revers tail)) (Nat.succ Nat.zero)
      [2;36m│[0m                          																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                          																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add ([1;31mList.length[0m Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                                            																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                            																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ ([1;31mList.length[0m _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                  																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                  																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat ([1;31mList.length[0m (List.concat l1 l2)) (Nat.add ([1;31mList.length[0m l1) ([1;31mList.length[0m l2)))
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m──────────[0m                                [1;31m┬[0m[1;31m──────────[0m      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                 [1;31m│[0m                                          [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m│[0m                                          [1;31m└Here![0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): Equal Nat ([1;31mList.length[0m (Revers xs)) ([1;31mList.length[0m xs)
      [2;36m│[0m                                               [1;31m┬[0m[1;31m──────────[0m               [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                               [1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                               [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:7:67][0m
      [2;36m│[0m
    6 [2;36m│[0m    																let aux1 = App_length (Revers tail) [head]
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) ([1;31mNat.succ[0m Nat.zero)
      [2;36m│[0m                                                      																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                      																[1;31m└Here![0m
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) ([1;31mNat.succ[0m Nat.zero)) ([1;31mNat.succ[0m x))) aux2			
      [2;36m│[0m                                                                                            																[1;31m┬[0m[1;31m───────[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                            																[1;31m│[0m                    [1;31m└Here![0m
      [2;36m│[0m                                                                                            																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
   24 [2;36m│[0m    Plus_n_Z ([1;31mNat.succ[0m n.pred) = Equal.apply (x => [1;31mNat.succ[0m x) (Plus_n_Z n.pred)
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m                             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m│[0m                                    [1;31m└Here![0m
      [2;36m│[0m              [1;31m└Here![0m
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.succ[0m (Nat.add n m)) (Nat.add n ([1;31mNat.succ[0m m)))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───────[0m                            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                              [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
   28 [2;36m│[0m    Plus_n_Sm ([1;31mNat.succ[0m n) m = Equal.apply (x => [1;31mNat.succ[0m x) (Plus_n_Sm n m)
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                                 [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   29 [2;36m│[0m    
      [2;36m┆[0m     
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm ([1;31mNat.succ[0m n.pred) m = Equal.chain (Equal.apply (x => [1;31mNat.succ[0m x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                                            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                                                   [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   33 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => [1;31mNat.succ[0m x) (App_length l tail l2)
      [2;36m│[0m                                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:1:24][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List [1;31mNat[0m) : (Equal (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m└Here![0m
      [2;36m┆[0m     
    2 [2;36m│[0m    Revers_length (List.nil [1;31mNat[0m) = Equal.refl
      [2;36m│[0m                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                            [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
    4 [2;36m│[0m    Revers_length (List.cons [1;31mNat[0m head tail) = // livro 
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m└Here![0m
    5 [2;36m│[0m    																let ind = Revers_length tail 
      [2;36m┆[0m     
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal [1;31mNat[0m (Nat.add (List.length [1;31mNat[0m (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                              																[1;31m┬[0m[1;31m──[0m                       [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                              																[1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                              																[1;31m└Here![0m
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: [1;31mNat[0m) : (Equal [1;31mNat[0m n (Nat.add n Nat.zero))
      [2;36m│[0m                 [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal [1;31mNat[0m (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                            [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): Equal [1;31mNat[0m (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                          [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.concat'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:9:78][0m
      [2;36m│[0m
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ ([1;31mList.concat[0m _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                                                 																[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                 																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   19 [2;36m│[0m    Revers a (List.nil l) = List.nil a
   20 [2;36m│[0m    Revers a (List.cons l head tail) = [1;31mList.concat[0m (Revers tail) [head]
      [2;36m│[0m                                       [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                       [1;31m└Here![0m
   21 [2;36m│[0m    
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length ([1;31mList.concat[0m l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                                              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                              [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:24:30][0m
      [2;36m│[0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
   24 [2;36m│[0m    Plus_n_Z (Nat.succ n.pred) = [1;31mEqual.apply[0m (x => Nat.succ x) (Plus_n_Z n.pred)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   25 [2;36m│[0m    
      [2;36m┆[0m     
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
   28 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m = [1;31mEqual.apply[0m (x => Nat.succ x) (Plus_n_Sm n m)
      [2;36m│[0m                               [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                               [1;31m└Here![0m
   29 [2;36m│[0m    
      [2;36m┆[0m     
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = Equal.chain ([1;31mEqual.apply[0m (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                 [1;31m└Here![0m
   33 [2;36m│[0m    
      [2;36m┆[0m     
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = [1;31mEqual.apply[0m (x => Nat.succ x) (App_length l tail l2)
      [2;36m│[0m                                              [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
   37 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.nil'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:2:16][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : (Equal (List.length (Revers l)) (List.length l)) //meu video
    2 [2;36m│[0m    Revers_length ([1;31mList.nil[0m Nat) = Equal.refl
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head ([1;31mList.nil[0m _)))) x )) aux1				
      [2;36m│[0m                                                                                                                																[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                                                																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   18 [2;36m│[0m    Revers <a: Type>(l: List a) : List a
   19 [2;36m│[0m    Revers a ([1;31mList.nil[0m l) = [1;31mList.nil[0m a
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m              [1;31m└Here![0m
   20 [2;36m│[0m    Revers a (List.cons l head tail) = List.concat (Revers tail) [head]
      [2;36m┆[0m     
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : (Equal Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
   35 [2;36m│[0m    App_length a ([1;31mList.nil[0m l) l2 = Equal.refl
      [2;36m│[0m                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   36 [2;36m│[0m    App_length a (List.cons l head tail) l2 = Equal.apply (x => Nat.succ x) (App_length l tail l2)

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.nil'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.rewrite'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:8:28][0m
      [2;36m│[0m
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = [1;31mEqual.rewrite[0m ind (x => (Equal Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m               																[1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m               																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = [1;31mEqual.rewrite[0m rrt1 (x => (Equal _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m               																[1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m               																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:1:32][0m
      [2;36m│[0m
    1 [2;36m│[0m    Revers_length (l: List Nat) : ([1;31mEqual[0m (List.length (Revers l)) (List.length l)) //meu video
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
    2 [2;36m│[0m    Revers_length (List.nil Nat) = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal _ Nat.zero Nat.zero)
      [2;36m┆[0m     
    7 [2;36m│[0m    																let aux2 = Plus_comm (List.length (Revers tail)) (Nat.succ Nat.zero)
    8 [2;36m│[0m    																let rrt1 = Equal.rewrite ind (x => ([1;31mEqual[0m Nat (Nat.add (List.length Nat (Revers tail)) (Nat.succ Nat.zero)) (Nat.succ x))) aux2			
      [2;36m│[0m                                        																[1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                        																[1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    																let rrt2 = Equal.rewrite rrt1 (x => ([1;31mEqual[0m _ (List.length _ (List.concat _ (Revers tail) (List.cons _ head (List.nil _)))) x )) aux1				
      [2;36m│[0m                                         																[1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                         																[1;31m└Here![0m
   10 [2;36m│[0m    																rrt2
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_n_Z (n: Nat) : ([1;31mEqual[0m Nat n (Nat.add n Nat.zero))
      [2;36m│[0m                         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                         [1;31m└Here![0m
   23 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   27 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    App_length <a: Type> (l1: List a) (l2: List a) : ([1;31mEqual[0m Nat (List.length (List.concat l1 l2)) (Nat.add (List.length l1) (List.length l2)))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   35 [2;36m│[0m    App_length a (List.nil l) l2 = Equal.refl
      [2;36m┆[0m     
   48 [2;36m│[0m    // Theorem: For all lists l, List.length (revers l) = List.length l
   49 [2;36m│[0m    Theorem <a: Type> (xs: List a): [1;31mEqual[0m Nat (List.length (Revers xs)) (List.length xs)
      [2;36m│[0m                                    [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                    [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.chain'.[0m

[2;36m      ┌──[IINS/Ship/Prova_03.kind2:32:33][0m
      [2;36m│[0m
   31 [2;36m│[0m    Plus_comm Nat.zero m = Plus_n_Z m
   32 [2;36m│[0m    Plus_comm (Nat.succ n.pred) m = [1;31mEqual.chain[0m (Equal.apply (x => Nat.succ x) (Plus_comm n.pred m )) (Plus_n_Sm m n.pred)
      [2;36m│[0m                                    [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                    [1;31m└Here![0m
   33 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 14 errors


  [1;42m CHECKING [0m The file './IINS/Ship/Prova_01.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:2:21][0m
      [2;36m│[0m
    1 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n Nat.zero))
    2 [2;36m│[0m    Plus_n_Z Nat.zero = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
      [2;36m┆[0m     
   12 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   13 [2;36m│[0m    Plus_n_Sm Nat.zero m = [1;31mEqual.refl[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                           [1;31m└Here![0m
   14 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m =
      [2;36m┆[0m     
   40 [2;36m│[0m    Plus_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
   41 [2;36m│[0m    Plus_assoc Nat.zero m p = [1;31mEqual.refl[0m
      [2;36m│[0m                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                              [1;31m└Here![0m
   42 [2;36m│[0m    // - Goal: (Equal Nat (Nat.add m p) (Nat.add m p))
      [2;36m┆[0m     
   65 [2;36m│[0m    Theorem (a: Nat) (b: Nat) (c: Nat) : (Equal Nat (Nat.mul (Nat.add a b) c) (Nat.add (Nat.mul a c) (Nat.mul b c)))
   66 [2;36m│[0m    Theorem Nat.zero b c = [1;31mEqual.refl[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                           [1;31m└Here![0m
   67 [2;36m│[0m    // - Goal: (Equal Nat (Nat.mul b c) (Nat.mul b c))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:1:35][0m
      [2;36m│[0m
    1 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n ([1;31mNat.add[0m n Nat.zero))
      [2;36m│[0m                                      [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
    2 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
      [2;36m┆[0m     
   11 [2;36m│[0m    
   12 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ ([1;31mNat.add[0m n m)) ([1;31mNat.add[0m n (Nat.succ m)))
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   13 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m m n))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   23 [2;36m│[0m    Plus_comm Nat.zero m = 
      [2;36m┆[0m     
   39 [2;36m│[0m    
   40 [2;36m│[0m    Plus_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat ([1;31mNat.add[0m n ([1;31mNat.add[0m m p)) ([1;31mNat.add[0m ([1;31mNat.add[0m n m) p))
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m    [1;31m┬[0m[1;31m──────[0m        [1;31m┬[0m[1;31m──────[0m  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m│[0m          [1;31m│[0m              [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m│[0m          [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   41 [2;36m│[0m    Plus_assoc Nat.zero m p = Equal.refl
      [2;36m┆[0m     
   64 [2;36m│[0m    
   65 [2;36m│[0m    Theorem (a: Nat) (b: Nat) (c: Nat) : (Equal Nat (Nat.mul ([1;31mNat.add[0m a b) c) ([1;31mNat.add[0m (Nat.mul a c) (Nat.mul b c)))
      [2;36m│[0m                                                              [1;31m┬[0m[1;31m──────[0m          [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                              [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                              [1;31m└Here![0m
   66 [2;36m│[0m    Theorem Nat.zero b c = Equal.refl
      [2;36m┆[0m     
   69 [2;36m│[0m    										let ind = Theorem a b c 
   70 [2;36m│[0m    										let app = Equal.apply (x => [1;31mNat.add[0m x c) ind
      [2;36m│[0m                                										[1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                										[1;31m└Here![0m
   71 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) c (Nat.mul b c)
   72 [2;36m│[0m    										let com = Plus_comm c (Nat.mul b c)
   73 [2;36m│[0m    										let rrt = Equal.rewrite com (x => (Equal Nat ([1;31mNat.add[0m (Nat.mul a c) (x)) ([1;31mNat.add[0m ([1;31mNat.add[0m (Nat.mul a c) c) (Nat.mul b c)))) asc
      [2;36m│[0m                                                  										[1;31m┬[0m[1;31m──────[0m                     [1;31m┬[0m[1;31m──────[0m  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                  										[1;31m│[0m                           [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                                                  										[1;31m│[0m                           [1;31m└Here![0m
      [2;36m│[0m                                                  										[1;31m└Here![0m
   74 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) (Nat.mul b c) c

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:1:45][0m
      [2;36m│[0m
    1 [2;36m│[0m    Plus_n_Z (n: Nat) : (Equal Nat n (Nat.add n [1;31mNat.zero[0m))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
      [2;36m┆[0m     
    2 [2;36m│[0m    Plus_n_Z [1;31mNat.zero[0m = Equal.refl
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m└Here![0m
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
      [2;36m┆[0m     
   12 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
   13 [2;36m│[0m    Plus_n_Sm [1;31mNat.zero[0m m = Equal.refl
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   14 [2;36m│[0m    Plus_n_Sm (Nat.succ n) m =
      [2;36m┆[0m     
   22 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : (Equal Nat (Nat.add n m) (Nat.add m n))
   23 [2;36m│[0m    Plus_comm [1;31mNat.zero[0m m = 
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
   24 [2;36m│[0m                      let ind = Plus_n_Z m
      [2;36m┆[0m     
   40 [2;36m│[0m    Plus_assoc (n: Nat) (m: Nat) (p: Nat) : (Equal Nat (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
   41 [2;36m│[0m    Plus_assoc [1;31mNat.zero[0m m p = Equal.refl
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m└Here![0m
   42 [2;36m│[0m    // - Goal: (Equal Nat (Nat.add m p) (Nat.add m p))
      [2;36m┆[0m     
   65 [2;36m│[0m    Theorem (a: Nat) (b: Nat) (c: Nat) : (Equal Nat (Nat.mul (Nat.add a b) c) (Nat.add (Nat.mul a c) (Nat.mul b c)))
   66 [2;36m│[0m    Theorem [1;31mNat.zero[0m b c = Equal.refl
      [2;36m│[0m            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m            [1;31m└Here![0m
   67 [2;36m│[0m    // - Goal: (Equal Nat (Nat.mul b c) (Nat.mul b c))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.mirror'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:75:21][0m
      [2;36m│[0m
   74 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) (Nat.mul b c) c
   75 [2;36m│[0m    										let mir = [1;31mEqual.mirror[0m asc
      [2;36m│[0m              										[1;31m┬[0m[1;31m───────────[0m
      [2;36m│[0m              										[1;31m└Here![0m
   76 [2;36m│[0m    										let chn = Equal.chain mir rrt

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:4:11][0m
      [2;36m│[0m
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
    4 [2;36m│[0m    Plus_n_Z ([1;31mNat.succ[0m n.pred) =
      [2;36m│[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m              [1;31m└Here![0m
    5 [2;36m│[0m                            let ind = Plus_n_Z n.pred
    6 [2;36m│[0m                            let app = Equal.apply (x => [1;31mNat.succ[0m x) ind 
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                        [1;31m└Here![0m
    7 [2;36m│[0m                            app
      [2;36m┆[0m     
   11 [2;36m│[0m    
   12 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : (Equal Nat ([1;31mNat.succ[0m (Nat.add n m)) (Nat.add n ([1;31mNat.succ[0m m)))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───────[0m                            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                              [1;31m│[0m                                   [1;31m└Here![0m
      [2;36m│[0m                                              [1;31m└Here![0m
   13 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
   14 [2;36m│[0m    Plus_n_Sm ([1;31mNat.succ[0m n) m =
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m└Here![0m
   15 [2;36m│[0m                          let ind = Plus_n_Sm n m
   16 [2;36m│[0m                          let app = Equal.apply (x => [1;31mNat.succ[0m x) ind
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   17 [2;36m│[0m                          app
      [2;36m┆[0m     
   27 [2;36m│[0m    // - Goal: (Equal Nat m (Nat.add m Nat.zero))
   28 [2;36m│[0m    Plus_comm ([1;31mNat.succ[0m n.pred) m = 
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m└Here![0m
   29 [2;36m│[0m                              let ind = Plus_comm n.pred m 
   30 [2;36m│[0m                              let app = Equal.apply (x => [1;31mNat.succ[0m x) ind 
      [2;36m│[0m                                                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                          [1;31m└Here![0m
   31 [2;36m│[0m                              let aux = Plus_n_Sm m n.pred
      [2;36m┆[0m     
   42 [2;36m│[0m    // - Goal: (Equal Nat (Nat.add m p) (Nat.add m p))
   43 [2;36m│[0m    Plus_assoc ([1;31mNat.succ[0m n.pred) m p = 
      [2;36m│[0m                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                [1;31m└Here![0m
   44 [2;36m│[0m                                  let ind = Plus_assoc n.pred m p
   45 [2;36m│[0m                                  let app = Equal.apply (x => [1;31mNat.succ[0m x) ind
      [2;36m│[0m                                                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                              [1;31m└Here![0m
   46 [2;36m│[0m                                  app
      [2;36m┆[0m     
   67 [2;36m│[0m    // - Goal: (Equal Nat (Nat.mul b c) (Nat.mul b c))
   68 [2;36m│[0m    Theorem ([1;31mNat.succ[0m a) b c = 
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m└Here![0m
   69 [2;36m│[0m    										let ind = Theorem a b c 

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.chain'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:32:37][0m
      [2;36m│[0m
   31 [2;36m│[0m                              let aux = Plus_n_Sm m n.pred
   32 [2;36m│[0m                              let chn = [1;31mEqual.chain[0m app aux
      [2;36m│[0m                                        [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                        [1;31m└Here![0m
   33 [2;36m│[0m                              chn
      [2;36m┆[0m     
   75 [2;36m│[0m    										let mir = Equal.mirror asc
   76 [2;36m│[0m    										let chn = [1;31mEqual.chain[0m mir rrt
      [2;36m│[0m              										[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m              										[1;31m└Here![0m
      [2;36m┆[0m     
   77 [2;36m│[0m    										let chn = [1;31mEqual.chain[0m app chn
      [2;36m│[0m              										[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m              										[1;31m└Here![0m
   78 [2;36m│[0m    										chn

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:1:14][0m
      [2;36m│[0m
    1 [2;36m│[0m    Plus_n_Z (n: [1;31mNat[0m) : (Equal [1;31mNat[0m n (Nat.add n Nat.zero))
      [2;36m│[0m                 [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
    2 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
      [2;36m┆[0m     
   11 [2;36m│[0m    
   12 [2;36m│[0m    Plus_n_Sm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   13 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_comm (n: [1;31mNat[0m) (m: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   23 [2;36m│[0m    Plus_comm Nat.zero m = 
      [2;36m┆[0m     
   39 [2;36m│[0m    
   40 [2;36m│[0m    Plus_assoc (n: [1;31mNat[0m) (m: [1;31mNat[0m) (p: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
      [2;36m│[0m                   [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                   [1;31m│[0m        [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                   [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                   [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                   [1;31m└Here![0m
   41 [2;36m│[0m    Plus_assoc Nat.zero m p = Equal.refl
      [2;36m┆[0m     
   64 [2;36m│[0m    
   65 [2;36m│[0m    Theorem (a: [1;31mNat[0m) (b: [1;31mNat[0m) (c: [1;31mNat[0m) : (Equal [1;31mNat[0m (Nat.mul (Nat.add a b) c) (Nat.add (Nat.mul a c) (Nat.mul b c)))
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m│[0m        [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   66 [2;36m│[0m    Theorem Nat.zero b c = Equal.refl
      [2;36m┆[0m     
   72 [2;36m│[0m    										let com = Plus_comm c (Nat.mul b c)
   73 [2;36m│[0m    										let rrt = Equal.rewrite com (x => (Equal [1;31mNat[0m (Nat.add (Nat.mul a c) (x)) (Nat.add (Nat.add (Nat.mul a c) c) (Nat.mul b c)))) asc
      [2;36m│[0m                                             										[1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                             										[1;31m└Here![0m
   74 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) (Nat.mul b c) c

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:6:35][0m
      [2;36m│[0m
    5 [2;36m│[0m                            let ind = Plus_n_Z n.pred
    6 [2;36m│[0m                            let app = [1;31mEqual.apply[0m (x => Nat.succ x) ind 
      [2;36m│[0m                                      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
    7 [2;36m│[0m                            app
      [2;36m┆[0m     
   15 [2;36m│[0m                          let ind = Plus_n_Sm n m
   16 [2;36m│[0m                          let app = [1;31mEqual.apply[0m (x => Nat.succ x) ind
      [2;36m│[0m                                    [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                    [1;31m└Here![0m
   17 [2;36m│[0m                          app
      [2;36m┆[0m     
   29 [2;36m│[0m                              let ind = Plus_comm n.pred m 
   30 [2;36m│[0m                              let app = [1;31mEqual.apply[0m (x => Nat.succ x) ind 
      [2;36m│[0m                                        [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                        [1;31m└Here![0m
   31 [2;36m│[0m                              let aux = Plus_n_Sm m n.pred
      [2;36m┆[0m     
   44 [2;36m│[0m                                  let ind = Plus_assoc n.pred m p
   45 [2;36m│[0m                                  let app = [1;31mEqual.apply[0m (x => Nat.succ x) ind
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   46 [2;36m│[0m                                  app
      [2;36m┆[0m     
   69 [2;36m│[0m    										let ind = Theorem a b c 
   70 [2;36m│[0m    										let app = [1;31mEqual.apply[0m (x => Nat.add x c) ind
      [2;36m│[0m              										[1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m              										[1;31m└Here![0m
   71 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) c (Nat.mul b c)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.rewrite'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:73:21][0m
      [2;36m│[0m
   72 [2;36m│[0m    										let com = Plus_comm c (Nat.mul b c)
   73 [2;36m│[0m    										let rrt = [1;31mEqual.rewrite[0m com (x => (Equal Nat (Nat.add (Nat.mul a c) (x)) (Nat.add (Nat.add (Nat.mul a c) c) (Nat.mul b c)))) asc
      [2;36m│[0m              										[1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m              										[1;31m└Here![0m
   74 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) (Nat.mul b c) c

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.mul'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:65:50][0m
      [2;36m│[0m
   64 [2;36m│[0m    
   65 [2;36m│[0m    Theorem (a: Nat) (b: Nat) (c: Nat) : (Equal Nat ([1;31mNat.mul[0m (Nat.add a b) c) (Nat.add ([1;31mNat.mul[0m a c) ([1;31mNat.mul[0m b c)))
      [2;36m│[0m                                                     [1;31m┬[0m[1;31m──────[0m                            [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                     [1;31m│[0m                                  [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                     [1;31m│[0m                                  [1;31m└Here![0m
      [2;36m│[0m                                                     [1;31m└Here![0m
   66 [2;36m│[0m    Theorem Nat.zero b c = Equal.refl
      [2;36m┆[0m     
   70 [2;36m│[0m    										let app = Equal.apply (x => Nat.add x c) ind
   71 [2;36m│[0m    										let asc = Plus_assoc ([1;31mNat.mul[0m a c) c ([1;31mNat.mul[0m b c)
      [2;36m│[0m                          										[1;31m┬[0m[1;31m──────[0m         [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                          										[1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                          										[1;31m└Here![0m
      [2;36m┆[0m     
   72 [2;36m│[0m    										let com = Plus_comm c ([1;31mNat.mul[0m b c)
      [2;36m│[0m                           										[1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                           										[1;31m└Here![0m
      [2;36m┆[0m     
   73 [2;36m│[0m    										let rrt = Equal.rewrite com (x => (Equal Nat (Nat.add ([1;31mNat.mul[0m a c) (x)) (Nat.add (Nat.add ([1;31mNat.mul[0m a c) c) ([1;31mNat.mul[0m b c)))) asc
      [2;36m│[0m                                                           										[1;31m┬[0m[1;31m──────[0m                              [1;31m┬[0m[1;31m──────[0m          [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                           										[1;31m│[0m                                    [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                                                           										[1;31m│[0m                                    [1;31m└Here![0m
      [2;36m│[0m                                                           										[1;31m└Here![0m
      [2;36m┆[0m     
   74 [2;36m│[0m    										let asc = Plus_assoc ([1;31mNat.mul[0m a c) ([1;31mNat.mul[0m b c) c
      [2;36m│[0m                          										[1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                          										[1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                          										[1;31m└Here![0m
   75 [2;36m│[0m    										let mir = Equal.mirror asc

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Ship/Prova_01.kind2:1:22][0m
      [2;36m│[0m
    1 [2;36m│[0m    Plus_n_Z (n: Nat) : ([1;31mEqual[0m Nat n (Nat.add n Nat.zero))
      [2;36m│[0m                         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                         [1;31m└Here![0m
    2 [2;36m│[0m    Plus_n_Z Nat.zero = Equal.refl
    3 [2;36m│[0m    // - Goal: (Equal Nat Nat.zero Nat.zero)
      [2;36m┆[0m     
   11 [2;36m│[0m    
   12 [2;36m│[0m    Plus_n_Sm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.succ (Nat.add n m)) (Nat.add n (Nat.succ m)))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   13 [2;36m│[0m    Plus_n_Sm Nat.zero m = Equal.refl
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    Plus_comm (n: Nat) (m: Nat) : ([1;31mEqual[0m Nat (Nat.add n m) (Nat.add m n))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   23 [2;36m│[0m    Plus_comm Nat.zero m = 
      [2;36m┆[0m     
   39 [2;36m│[0m    
   40 [2;36m│[0m    Plus_assoc (n: Nat) (m: Nat) (p: Nat) : ([1;31mEqual[0m Nat (Nat.add n (Nat.add m p)) (Nat.add (Nat.add n m) p))
      [2;36m│[0m                                             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   41 [2;36m│[0m    Plus_assoc Nat.zero m p = Equal.refl
      [2;36m┆[0m     
   64 [2;36m│[0m    
   65 [2;36m│[0m    Theorem (a: Nat) (b: Nat) (c: Nat) : ([1;31mEqual[0m Nat (Nat.mul (Nat.add a b) c) (Nat.add (Nat.mul a c) (Nat.mul b c)))
      [2;36m│[0m                                          [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
   66 [2;36m│[0m    Theorem Nat.zero b c = Equal.refl
      [2;36m┆[0m     
   72 [2;36m│[0m    										let com = Plus_comm c (Nat.mul b c)
   73 [2;36m│[0m    										let rrt = Equal.rewrite com (x => ([1;31mEqual[0m Nat (Nat.add (Nat.mul a c) (x)) (Nat.add (Nat.add (Nat.mul a c) c) (Nat.mul b c)))) asc
      [2;36m│[0m                                       										[1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                       										[1;31m└Here![0m
   74 [2;36m│[0m    										let asc = Plus_assoc (Nat.mul a c) (Nat.mul b c) c

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 11 errors


  [1;42m CHECKING [0m The file './IINS/Book/ch_04.kind2'
  [1;41m ERROR [0m [1mUnexpected token ':'.[0m

[2;36m      ┌──[IINS/Book/ch_04.kind2:473:18][0m
      [2;36m│[0m
  472 [2;36m│[0m    
  473 [2;36m│[0m    Rev_involutive (l[1;31m:[0m Data.NatData.List) : (Prop.Equal Data.NatData.List (Rev (Rev l)) l)
      [2;36m│[0m                     [1;31m┬[0m[1;31m[0m
      [2;36m│[0m                     [1;31m└Here![0m
  474 [2;36m│[0m    Rev_involutive (Data.List.nil Data.Nat) = Prop.Equal.refl


    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Book/ch_02.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:82:98][0m
      [2;36m│[0m
   81 [2;36m│[0m    // 8.0.1. Exercise: 1 star (plus_id_exercise). Fill in the proof.
   82 [2;36m│[0m    Plus_id_exercise (n: Nat) (m: Nat) (o: Nat) (e: Equal Nat n m)  (p: Equal Nat m o) : (Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m m o)) 
      [2;36m│[0m                                                                                                     [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                                     [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                                                     [1;31m└Here![0m
   83 [2;36m│[0m    Plus_id_exercise n m o e p = 
   84 [2;36m│[0m                            let app = Equal.apply (x => [1;31mNat.add[0m n x) p
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m└Here![0m
      [2;36m┆[0m     
   85 [2;36m│[0m                            let rrt = Equal.rewrite e (x => (Equal Nat ([1;31mNat.add[0m n m) ([1;31mNat.add[0m x o))) app
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m──────[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
   86 [2;36m│[0m                            rrt

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.mirror'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:98:23][0m
      [2;36m│[0m
   97 [2;36m│[0m                let app = Equal.apply (x => Nat.mul m x) e
   98 [2;36m│[0m                let mir = [1;31mEqual.mirror[0m app
      [2;36m│[0m                          [1;31m┬[0m[1;31m───────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
   99 [2;36m│[0m                mir
      [2;36m┆[0m     
  132 [2;36m│[0m                                let g_b = (g b) 
  133 [2;36m│[0m                                let mir = [1;31mEqual.mirror[0m g_b
      [2;36m│[0m                                          [1;31m┬[0m[1;31m───────────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
  134 [2;36m│[0m                                let rrt = Equal.rewrite mir (x => (Equal Bool (f x) b)) g_b

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.to_nat'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:53:41][0m
      [2;36m│[0m
   52 [2;36m│[0m    
   53 [2;36m│[0m    TestFactorial1 : (Equal Nat (Factorial ([1;31mU60.to_nat[0m 3)) ([1;31mU60.to_nat[0m 6))
      [2;36m│[0m                                            [1;31m┬[0m[1;31m─────────[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                            [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                                            [1;31m└Here![0m
   54 [2;36m│[0m    TestFactorial1 = Equal.refl
      [2;36m┆[0m     
   56 [2;36m│[0m    //                     (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))))
   57 [2;36m│[0m    TestFactorial2 : (Equal Nat (Factorial ([1;31mU60.to_nat[0m 5)) ([1;31mU60.to_nat[0m (* 10 12)))
      [2;36m│[0m                                            [1;31m┬[0m[1;31m─────────[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                            [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                                            [1;31m└Here![0m
   58 [2;36m│[0m    TestFactorial2 = Equal.refl
      [2;36m┆[0m     
   70 [2;36m│[0m    
   71 [2;36m│[0m    Test_blt_nat_1 : Equal Bool (Blt_nat ([1;31mU60.to_nat[0m 2) ([1;31mU60.to_nat[0m 2)) Bool.false
      [2;36m│[0m                                          [1;31m┬[0m[1;31m─────────[0m     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                          [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
   72 [2;36m│[0m    Test_blt_nat_1 = Equal.refl
   73 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   74 [2;36m│[0m    Test_blt_nat_2 : Equal Bool (Blt_nat ([1;31mU60.to_nat[0m 2) ([1;31mU60.to_nat[0m 4)) Bool.true
      [2;36m│[0m                                          [1;31m┬[0m[1;31m─────────[0m     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                          [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
   75 [2;36m│[0m    Test_blt_nat_2 = Equal.refl
   76 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   77 [2;36m│[0m    Test_blt_nat_3 : Equal Bool (Blt_nat ([1;31mU60.to_nat[0m 4) ([1;31mU60.to_nat[0m 2)) Bool.false
      [2;36m│[0m                                          [1;31m┬[0m[1;31m─────────[0m     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                          [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
   78 [2;36m│[0m    Test_blt_nat_3 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:7:13][0m
      [2;36m│[0m
    6 [2;36m│[0m    // Nandb ( Bool.false ) ( Bool.false ) -> Bool.true
    7 [2;36m│[0m    Nandb (b1 : [1;31mBool[0m) (b2 : [1;31mBool[0m) : [1;31mBool[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                [1;31m│[0m           [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
    8 [2;36m│[0m    Nandb Bool.true Bool.true = Bool.false 
      [2;36m┆[0m     
   10 [2;36m│[0m    
   11 [2;36m│[0m    Test_nandb1 : (Equal [1;31mBool[0m (Nandb Bool.true Bool.false) Bool.true)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   12 [2;36m│[0m    Test_nandb1 = Equal.refl
   13 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   14 [2;36m│[0m    Test_nandb2 : (Equal [1;31mBool[0m (Nandb Bool.false Bool.false) Bool.true)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   15 [2;36m│[0m    Test_nandb2 = Equal.refl
   16 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   17 [2;36m│[0m    Test_nandb3 : (Equal [1;31mBool[0m (Nandb Bool.false Bool.true) Bool.true)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   18 [2;36m│[0m    Test_nandb3 = Equal.refl
   19 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   20 [2;36m│[0m    Test_nandb4 : (Equal [1;31mBool[0m (Nandb Bool.true Bool.true) Bool.false)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   21 [2;36m│[0m    Test_nandb4 = Equal.refl
      [2;36m┆[0m     
   26 [2;36m│[0m    
   27 [2;36m│[0m    Andb3 (b1: [1;31mBool[0m) (b2: [1;31mBool[0m) (b3: [1;31mBool[0m) : [1;31mBool[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m───[0m       [1;31m┬[0m[1;31m───[0m       [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m               [1;31m│[0m          [1;31m│[0m          [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m          [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   28 [2;36m│[0m    Andb3 b1 b2 b3 = (Bool.and b1 (Bool.and b2 b3))
   29 [2;36m│[0m    
   30 [2;36m│[0m    Test_andb31 : (Equal [1;31mBool[0m (Andb3 Bool.true Bool.true Bool.true) Bool.true)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   31 [2;36m│[0m    Test_andb31 = Equal.refl
   32 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   33 [2;36m│[0m    Test_andb32 : (Equal [1;31mBool[0m (Andb3 Bool.false Bool.true Bool.true) Bool.false)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   34 [2;36m│[0m    Test_andb32 = Equal.refl
   35 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   36 [2;36m│[0m    Test_andb33 : (Equal [1;31mBool[0m (Andb3 Bool.true Bool.false Bool.true) Bool.false)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   37 [2;36m│[0m    Test_andb33 = Equal.refl
   38 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   39 [2;36m│[0m    Test_andb34 : (Equal [1;31mBool[0m (Andb3 Bool.true Bool.true Bool.false) Bool.false)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
   40 [2;36m│[0m    Test_andb34 = Equal.refl
      [2;36m┆[0m     
   64 [2;36m│[0m    
   65 [2;36m│[0m    Blt_nat (n: Nat) (m: Nat) : [1;31mBool[0m
      [2;36m│[0m                                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                [1;31m└Here![0m
   66 [2;36m│[0m    Blt_nat Nat.zero Nat.zero = Bool.false
      [2;36m┆[0m     
   70 [2;36m│[0m    
   71 [2;36m│[0m    Test_blt_nat_1 : Equal [1;31mBool[0m (Blt_nat (U60.to_nat 2) (U60.to_nat 2)) Bool.false
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
   72 [2;36m│[0m    Test_blt_nat_1 = Equal.refl
   73 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   74 [2;36m│[0m    Test_blt_nat_2 : Equal [1;31mBool[0m (Blt_nat (U60.to_nat 2) (U60.to_nat 4)) Bool.true
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
   75 [2;36m│[0m    Test_blt_nat_2 = Equal.refl
   76 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   77 [2;36m│[0m    Test_blt_nat_3 : Equal [1;31mBool[0m (Blt_nat (U60.to_nat 4) (U60.to_nat 2)) Bool.false
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
   78 [2;36m│[0m    Test_blt_nat_3 = Equal.refl
      [2;36m┆[0m     
  107 [2;36m│[0m    // cases (and subcases) to lemmas when case split.
  108 [2;36m│[0m    Andb_true_elim_2 (b: [1;31mBool[0m) (c: [1;31mBool[0m) (e: Equal [1;31mBool[0m (Bool.and b c) Bool.true) : (Equal [1;31mBool[0m c Bool.true)
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m            [1;31m┬[0m[1;31m───[0m                                    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m│[0m         [1;31m│[0m               [1;31m│[0m                                       [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m         [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
  109 [2;36m│[0m    Andb_true_elim_2 Bool.true Bool.true prf = Equal.refl
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal [1;31mBool[0m (Nat.equal Nat.zero (Nat.succ n)) Bool.false)
      [2;36m│[0m                                       [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                       [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl
      [2;36m┆[0m     
  129 [2;36m│[0m    // so far to prove the following theorem about boolean functions.
  130 [2;36m│[0m    Identity_fn_applied_twice (f: [1;31mBool[0m ->  [1;31mBool[0m) (e: (x: [1;31mBool[0m) -> Equal [1;31mBool[0m (f x) x) (b: [1;31mBool[0m) : (Equal [1;31mBool[0m (f (f b)) b)
      [2;36m│[0m                                  [1;31m┬[0m[1;31m───[0m     [1;31m┬[0m[1;31m───[0m          [1;31m┬[0m[1;31m───[0m           [1;31m┬[0m[1;31m───[0m              [1;31m┬[0m[1;31m───[0m           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                  [1;31m│[0m        [1;31m│[0m             [1;31m│[0m              [1;31m│[0m                 [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m│[0m        [1;31m│[0m             [1;31m│[0m              [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m│[0m        [1;31m│[0m             [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m│[0m        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m└Here![0m
  131 [2;36m│[0m    Identity_fn_applied_twice f g b =
      [2;36m┆[0m     
  133 [2;36m│[0m                                let mir = Equal.mirror g_b
  134 [2;36m│[0m                                let rrt = Equal.rewrite mir (x => (Equal [1;31mBool[0m (f x) b)) g_b
      [2;36m│[0m                                                                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                                         [1;31m└Here![0m
  135 [2;36m│[0m                                rrt
      [2;36m┆[0m     
  146 [2;36m│[0m    // you do not have to introduce all hypotheses at the same time.)
  147 [2;36m│[0m    Andb_eq_orb (b: [1;31mBool[0m) (c: [1;31mBool[0m) (e: Equal [1;31mBool[0m (Bool.and b c) (Bool.or b c)) : (Equal [1;31mBool[0m b c)
      [2;36m│[0m                    [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m            [1;31m┬[0m[1;31m───[0m                                        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                    [1;31m│[0m         [1;31m│[0m               [1;31m│[0m                                           [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m         [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                    [1;31m└Here![0m
  148 [2;36m│[0m    Andb_eq_orb Bool.true Bool.true prf = Equal.refl // prf

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:8:7][0m
      [2;36m│[0m
    7 [2;36m│[0m    Nandb (b1 : Bool) (b2 : Bool) : Bool
    8 [2;36m│[0m    Nandb [1;31mBool.true[0m [1;31mBool.true[0m = Bool.false 
      [2;36m│[0m          [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m          [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m          [1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m    Nandb a b = [1;31mBool.true[0m 
      [2;36m│[0m                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                [1;31m└Here![0m
   10 [2;36m│[0m    
   11 [2;36m│[0m    Test_nandb1 : (Equal Bool (Nandb [1;31mBool.true[0m Bool.false) [1;31mBool.true[0m)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────────[0m             [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                     [1;31m│[0m                     [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   12 [2;36m│[0m    Test_nandb1 = Equal.refl
   13 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   14 [2;36m│[0m    Test_nandb2 : (Equal Bool (Nandb Bool.false Bool.false) [1;31mBool.true[0m)
      [2;36m│[0m                                                            [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                            [1;31m└Here![0m
   15 [2;36m│[0m    Test_nandb2 = Equal.refl
   16 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   17 [2;36m│[0m    Test_nandb3 : (Equal Bool (Nandb Bool.false [1;31mBool.true[0m) [1;31mBool.true[0m)
      [2;36m│[0m                                                [1;31m┬[0m[1;31m────────[0m  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   18 [2;36m│[0m    Test_nandb3 = Equal.refl
   19 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   20 [2;36m│[0m    Test_nandb4 : (Equal Bool (Nandb [1;31mBool.true[0m [1;31mBool.true[0m) Bool.false)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                     [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   21 [2;36m│[0m    Test_nandb4 = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Test_andb31 : (Equal Bool (Andb3 [1;31mBool.true[0m [1;31mBool.true[0m [1;31mBool.true[0m) [1;31mBool.true[0m)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                     [1;31m│[0m         [1;31m│[0m         [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m│[0m         [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   31 [2;36m│[0m    Test_andb31 = Equal.refl
   32 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   33 [2;36m│[0m    Test_andb32 : (Equal Bool (Andb3 Bool.false [1;31mBool.true[0m [1;31mBool.true[0m) Bool.false)
      [2;36m│[0m                                                [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   34 [2;36m│[0m    Test_andb32 = Equal.refl
   35 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   36 [2;36m│[0m    Test_andb33 : (Equal Bool (Andb3 [1;31mBool.true[0m Bool.false [1;31mBool.true[0m) Bool.false)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────────[0m            [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                     [1;31m│[0m                    [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   37 [2;36m│[0m    Test_andb33 = Equal.refl
   38 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   39 [2;36m│[0m    Test_andb34 : (Equal Bool (Andb3 [1;31mBool.true[0m [1;31mBool.true[0m Bool.false) Bool.false)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                     [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   40 [2;36m│[0m    Test_andb34 = Equal.refl
      [2;36m┆[0m     
   67 [2;36m│[0m    Blt_nat n        Nat.zero = Bool.false
   68 [2;36m│[0m    Blt_nat Nat.zero m        = [1;31mBool.true[0m
      [2;36m│[0m                                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
   69 [2;36m│[0m    Blt_nat (Nat.succ n) (Nat.succ m) = (Blt_nat n m)
      [2;36m┆[0m     
   73 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   74 [2;36m│[0m    Test_blt_nat_2 : Equal Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 4)) [1;31mBool.true[0m
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
   75 [2;36m│[0m    Test_blt_nat_2 = Equal.refl
      [2;36m┆[0m     
  107 [2;36m│[0m    // cases (and subcases) to lemmas when case split.
  108 [2;36m│[0m    Andb_true_elim_2 (b: Bool) (c: Bool) (e: Equal Bool (Bool.and b c) [1;31mBool.true[0m) : (Equal Bool c [1;31mBool.true[0m)
      [2;36m│[0m                                                                       [1;31m┬[0m[1;31m────────[0m                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                       [1;31m│[0m                          [1;31m└Here![0m
      [2;36m│[0m                                                                       [1;31m└Here![0m
      [2;36m┆[0m     
  109 [2;36m│[0m    Andb_true_elim_2 [1;31mBool.true[0m [1;31mBool.true[0m prf = Equal.refl
      [2;36m│[0m                     [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                     [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
  110 [2;36m│[0m    // - prf : (Equal Bool Bool.true Bool.true)
      [2;36m┆[0m     
  114 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.true)
  115 [2;36m│[0m    Andb_true_elim_2 Bool.false [1;31mBool.true[0m prf = Equal.refl
      [2;36m│[0m                                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
  116 [2;36m│[0m    // - prf : (Equal Bool Bool.false Bool.true)
      [2;36m┆[0m     
  147 [2;36m│[0m    Andb_eq_orb (b: Bool) (c: Bool) (e: Equal Bool (Bool.and b c) (Bool.or b c)) : (Equal Bool b c)
  148 [2;36m│[0m    Andb_eq_orb [1;31mBool.true[0m [1;31mBool.true[0m prf = Equal.refl // prf
      [2;36m│[0m                [1;31m┬[0m[1;31m────────[0m [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
  149 [2;36m│[0m    // - prf : (Equal Bool Bool.true Bool.true)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.false'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:8:29][0m
      [2;36m│[0m
    7 [2;36m│[0m    Nandb (b1 : Bool) (b2 : Bool) : Bool
    8 [2;36m│[0m    Nandb Bool.true Bool.true = [1;31mBool.false[0m 
      [2;36m│[0m                                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
    9 [2;36m│[0m    Nandb a b = Bool.true 
   10 [2;36m│[0m    
   11 [2;36m│[0m    Test_nandb1 : (Equal Bool (Nandb Bool.true [1;31mBool.false[0m) Bool.true)
      [2;36m│[0m                                               [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                               [1;31m└Here![0m
   12 [2;36m│[0m    Test_nandb1 = Equal.refl
   13 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   14 [2;36m│[0m    Test_nandb2 : (Equal Bool (Nandb [1;31mBool.false[0m [1;31mBool.false[0m) Bool.true)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m─────────[0m [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                     [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   15 [2;36m│[0m    Test_nandb2 = Equal.refl
   16 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   17 [2;36m│[0m    Test_nandb3 : (Equal Bool (Nandb [1;31mBool.false[0m Bool.true) Bool.true)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   18 [2;36m│[0m    Test_nandb3 = Equal.refl
   19 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   20 [2;36m│[0m    Test_nandb4 : (Equal Bool (Nandb Bool.true Bool.true) [1;31mBool.false[0m)
      [2;36m│[0m                                                          [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                          [1;31m└Here![0m
   21 [2;36m│[0m    Test_nandb4 = Equal.refl
      [2;36m┆[0m     
   32 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   33 [2;36m│[0m    Test_andb32 : (Equal Bool (Andb3 [1;31mBool.false[0m Bool.true Bool.true) [1;31mBool.false[0m)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m─────────[0m                      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                     [1;31m│[0m                               [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
   34 [2;36m│[0m    Test_andb32 = Equal.refl
   35 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   36 [2;36m│[0m    Test_andb33 : (Equal Bool (Andb3 Bool.true [1;31mBool.false[0m Bool.true) [1;31mBool.false[0m)
      [2;36m│[0m                                               [1;31m┬[0m[1;31m─────────[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                               [1;31m│[0m                     [1;31m└Here![0m
      [2;36m│[0m                                               [1;31m└Here![0m
   37 [2;36m│[0m    Test_andb33 = Equal.refl
   38 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   39 [2;36m│[0m    Test_andb34 : (Equal Bool (Andb3 Bool.true Bool.true [1;31mBool.false[0m) [1;31mBool.false[0m)
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m─────────[0m  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                         [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                                         [1;31m└Here![0m
   40 [2;36m│[0m    Test_andb34 = Equal.refl
      [2;36m┆[0m     
   65 [2;36m│[0m    Blt_nat (n: Nat) (m: Nat) : Bool
   66 [2;36m│[0m    Blt_nat Nat.zero Nat.zero = [1;31mBool.false[0m
      [2;36m│[0m                                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
      [2;36m┆[0m     
   67 [2;36m│[0m    Blt_nat n        Nat.zero = [1;31mBool.false[0m
      [2;36m│[0m                                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
   68 [2;36m│[0m    Blt_nat Nat.zero m        = Bool.true
      [2;36m┆[0m     
   70 [2;36m│[0m    
   71 [2;36m│[0m    Test_blt_nat_1 : Equal Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 2)) [1;31mBool.false[0m
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
   72 [2;36m│[0m    Test_blt_nat_1 = Equal.refl
      [2;36m┆[0m     
   76 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   77 [2;36m│[0m    Test_blt_nat_3 : Equal Bool (Blt_nat (U60.to_nat 4) (U60.to_nat 2)) [1;31mBool.false[0m
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
   78 [2;36m│[0m    Test_blt_nat_3 = Equal.refl
      [2;36m┆[0m     
  114 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.true)
  115 [2;36m│[0m    Andb_true_elim_2 [1;31mBool.false[0m Bool.true prf = Equal.refl
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
  116 [2;36m│[0m    // - prf : (Equal Bool Bool.false Bool.true)
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal Bool (Nat.equal Nat.zero (Nat.succ n)) [1;31mBool.false[0m)
      [2;36m│[0m                                                                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                              [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl
      [2;36m┆[0m     
  156 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.true)
  157 [2;36m│[0m    Andb_eq_orb [1;31mBool.false[0m [1;31mBool.false[0m prf = Equal.refl // prf
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
  158 [2;36m│[0m    // - prf : (Equal Bool Bool.false Bool.false)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:50:12][0m
      [2;36m│[0m
   49 [2;36m│[0m    Factorial (n: Nat) : Nat
   50 [2;36m│[0m    Factorial  [1;31mNat.zero[0m    = (Nat.succ ([1;31mNat.zero[0m))
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                 [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                        [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   51 [2;36m│[0m    Factorial (Nat.succ n) = (Nat.mul (Factorial n) (Nat.succ n))
      [2;36m┆[0m     
   65 [2;36m│[0m    Blt_nat (n: Nat) (m: Nat) : Bool
   66 [2;36m│[0m    Blt_nat [1;31mNat.zero[0m [1;31mNat.zero[0m = Bool.false
      [2;36m│[0m            [1;31m┬[0m[1;31m───────[0m [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m            [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m            [1;31m└Here![0m
      [2;36m┆[0m     
   67 [2;36m│[0m    Blt_nat n        [1;31mNat.zero[0m = Bool.false
      [2;36m│[0m                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                     [1;31m└Here![0m
      [2;36m┆[0m     
   68 [2;36m│[0m    Blt_nat [1;31mNat.zero[0m m        = Bool.true
      [2;36m│[0m            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m            [1;31m└Here![0m
   69 [2;36m│[0m    Blt_nat (Nat.succ n) (Nat.succ m) = (Blt_nat n m)
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal Bool (Nat.equal [1;31mNat.zero[0m (Nat.succ n)) Bool.false)
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:50:27][0m
      [2;36m│[0m
   49 [2;36m│[0m    Factorial (n: Nat) : Nat
   50 [2;36m│[0m    Factorial  Nat.zero    = ([1;31mNat.succ[0m (Nat.zero))
      [2;36m│[0m                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                              [1;31m└Here![0m
      [2;36m┆[0m     
   51 [2;36m│[0m    Factorial ([1;31mNat.succ[0m n) = (Nat.mul (Factorial n) ([1;31mNat.succ[0m n))
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m                                     [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   52 [2;36m│[0m    
      [2;36m┆[0m     
   68 [2;36m│[0m    Blt_nat Nat.zero m        = Bool.true
   69 [2;36m│[0m    Blt_nat ([1;31mNat.succ[0m n) ([1;31mNat.succ[0m m) = (Blt_nat n m)
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m             [1;31m└Here![0m
   70 [2;36m│[0m    
      [2;36m┆[0m     
   94 [2;36m│[0m    // 8.0.2. Exercise: 2 starts (mult_S_1).
   95 [2;36m│[0m    Mult_S_1 (n: Nat) (m: Nat) (e: Equal Nat m ([1;31mNat.succ[0m n)) : (Equal Nat (Nat.mul m ([1;31mNat.succ[0m n)) (Nat.mul m m))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m│[0m                                     [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   96 [2;36m│[0m    Mult_S_1 n m e = 
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal Bool (Nat.equal Nat.zero ([1;31mNat.succ[0m n)) Bool.false)
      [2;36m│[0m                                                                 [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                 [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:84:35][0m
      [2;36m│[0m
   83 [2;36m│[0m    Plus_id_exercise n m o e p = 
   84 [2;36m│[0m                            let app = [1;31mEqual.apply[0m (x => Nat.add n x) p
      [2;36m│[0m                                      [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
   85 [2;36m│[0m                            let rrt = Equal.rewrite e (x => (Equal Nat (Nat.add n m) (Nat.add x o))) app
      [2;36m┆[0m     
   96 [2;36m│[0m    Mult_S_1 n m e = 
   97 [2;36m│[0m                let app = [1;31mEqual.apply[0m (x => Nat.mul m x) e
      [2;36m│[0m                          [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
   98 [2;36m│[0m                let mir = Equal.mirror app

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.or'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:147:64][0m
      [2;36m│[0m
  146 [2;36m│[0m    // you do not have to introduce all hypotheses at the same time.)
  147 [2;36m│[0m    Andb_eq_orb (b: Bool) (c: Bool) (e: Equal Bool (Bool.and b c) ([1;31mBool.or[0m b c)) : (Equal Bool b c)
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
  148 [2;36m│[0m    Andb_eq_orb Bool.true Bool.true prf = Equal.refl // prf

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.mul'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:51:27][0m
      [2;36m│[0m
   50 [2;36m│[0m    Factorial  Nat.zero    = (Nat.succ (Nat.zero))
   51 [2;36m│[0m    Factorial (Nat.succ n) = ([1;31mNat.mul[0m (Factorial n) (Nat.succ n))
      [2;36m│[0m                              [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                              [1;31m└Here![0m
   52 [2;36m│[0m    
      [2;36m┆[0m     
   94 [2;36m│[0m    // 8.0.2. Exercise: 2 starts (mult_S_1).
   95 [2;36m│[0m    Mult_S_1 (n: Nat) (m: Nat) (e: Equal Nat m (Nat.succ n)) : (Equal Nat ([1;31mNat.mul[0m m (Nat.succ n)) ([1;31mNat.mul[0m m m))
      [2;36m│[0m                                                                           [1;31m┬[0m[1;31m──────[0m                  [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                           [1;31m│[0m                        [1;31m└Here![0m
      [2;36m│[0m                                                                           [1;31m└Here![0m
   96 [2;36m│[0m    Mult_S_1 n m e = 
   97 [2;36m│[0m                let app = Equal.apply (x => [1;31mNat.mul[0m m x) e
      [2;36m│[0m                                            [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
   98 [2;36m│[0m                let mir = Equal.mirror app

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:11:16][0m
      [2;36m│[0m
   10 [2;36m│[0m    
   11 [2;36m│[0m    Test_nandb1 : ([1;31mEqual[0m Bool (Nandb Bool.true Bool.false) Bool.true)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   12 [2;36m│[0m    Test_nandb1 = Equal.refl
   13 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   14 [2;36m│[0m    Test_nandb2 : ([1;31mEqual[0m Bool (Nandb Bool.false Bool.false) Bool.true)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   15 [2;36m│[0m    Test_nandb2 = Equal.refl
   16 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   17 [2;36m│[0m    Test_nandb3 : ([1;31mEqual[0m Bool (Nandb Bool.false Bool.true) Bool.true)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   18 [2;36m│[0m    Test_nandb3 = Equal.refl
   19 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   20 [2;36m│[0m    Test_nandb4 : ([1;31mEqual[0m Bool (Nandb Bool.true Bool.true) Bool.false)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   21 [2;36m│[0m    Test_nandb4 = Equal.refl
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    Test_andb31 : ([1;31mEqual[0m Bool (Andb3 Bool.true Bool.true Bool.true) Bool.true)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   31 [2;36m│[0m    Test_andb31 = Equal.refl
   32 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   33 [2;36m│[0m    Test_andb32 : ([1;31mEqual[0m Bool (Andb3 Bool.false Bool.true Bool.true) Bool.false)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   34 [2;36m│[0m    Test_andb32 = Equal.refl
   35 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   36 [2;36m│[0m    Test_andb33 : ([1;31mEqual[0m Bool (Andb3 Bool.true Bool.false Bool.true) Bool.false)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   37 [2;36m│[0m    Test_andb33 = Equal.refl
   38 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   39 [2;36m│[0m    Test_andb34 : ([1;31mEqual[0m Bool (Andb3 Bool.true Bool.true Bool.false) Bool.false)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   40 [2;36m│[0m    Test_andb34 = Equal.refl
      [2;36m┆[0m     
   52 [2;36m│[0m    
   53 [2;36m│[0m    TestFactorial1 : ([1;31mEqual[0m Nat (Factorial (U60.to_nat 3)) (U60.to_nat 6))
      [2;36m│[0m                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                      [1;31m└Here![0m
   54 [2;36m│[0m    TestFactorial1 = Equal.refl
      [2;36m┆[0m     
   56 [2;36m│[0m    //                     (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))))
   57 [2;36m│[0m    TestFactorial2 : ([1;31mEqual[0m Nat (Factorial (U60.to_nat 5)) (U60.to_nat (* 10 12)))
      [2;36m│[0m                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                      [1;31m└Here![0m
   58 [2;36m│[0m    TestFactorial2 = Equal.refl
      [2;36m┆[0m     
   70 [2;36m│[0m    
   71 [2;36m│[0m    Test_blt_nat_1 : [1;31mEqual[0m Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 2)) Bool.false
      [2;36m│[0m                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   72 [2;36m│[0m    Test_blt_nat_1 = Equal.refl
   73 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   74 [2;36m│[0m    Test_blt_nat_2 : [1;31mEqual[0m Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 4)) Bool.true
      [2;36m│[0m                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   75 [2;36m│[0m    Test_blt_nat_2 = Equal.refl
   76 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   77 [2;36m│[0m    Test_blt_nat_3 : [1;31mEqual[0m Bool (Blt_nat (U60.to_nat 4) (U60.to_nat 2)) Bool.false
      [2;36m│[0m                     [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   78 [2;36m│[0m    Test_blt_nat_3 = Equal.refl
      [2;36m┆[0m     
   81 [2;36m│[0m    // 8.0.1. Exercise: 1 star (plus_id_exercise). Fill in the proof.
   82 [2;36m│[0m    Plus_id_exercise (n: Nat) (m: Nat) (o: Nat) (e: [1;31mEqual[0m Nat n m)  (p: [1;31mEqual[0m Nat m o) : ([1;31mEqual[0m Nat (Nat.add n m) (Nat.add m o)) 
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m────[0m               [1;31m┬[0m[1;31m────[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                    [1;31m│[0m                   [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                                                    [1;31m│[0m                   [1;31m└Here![0m
      [2;36m│[0m                                                    [1;31m└Here![0m
   83 [2;36m│[0m    Plus_id_exercise n m o e p = 
   84 [2;36m│[0m                            let app = Equal.apply (x => Nat.add n x) p
   85 [2;36m│[0m                            let rrt = Equal.rewrite e (x => ([1;31mEqual[0m Nat (Nat.add n m) (Nat.add x o))) app
      [2;36m│[0m                                                             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                             [1;31m└Here![0m
   86 [2;36m│[0m                            rrt
      [2;36m┆[0m     
   94 [2;36m│[0m    // 8.0.2. Exercise: 2 starts (mult_S_1).
   95 [2;36m│[0m    Mult_S_1 (n: Nat) (m: Nat) (e: [1;31mEqual[0m Nat m (Nat.succ n)) : ([1;31mEqual[0m Nat (Nat.mul m (Nat.succ n)) (Nat.mul m m))
      [2;36m│[0m                                   [1;31m┬[0m[1;31m────[0m                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                   [1;31m│[0m                            [1;31m└Here![0m
      [2;36m│[0m                                   [1;31m└Here![0m
   96 [2;36m│[0m    Mult_S_1 n m e = 
      [2;36m┆[0m     
  107 [2;36m│[0m    // cases (and subcases) to lemmas when case split.
  108 [2;36m│[0m    Andb_true_elim_2 (b: Bool) (c: Bool) (e: [1;31mEqual[0m Bool (Bool.and b c) Bool.true) : ([1;31mEqual[0m Bool c Bool.true)
      [2;36m│[0m                                             [1;31m┬[0m[1;31m────[0m                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                             [1;31m│[0m                                       [1;31m└Here![0m
      [2;36m│[0m                                             [1;31m└Here![0m
  109 [2;36m│[0m    Andb_true_elim_2 Bool.true Bool.true prf = Equal.refl
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :([1;31mEqual[0m Bool (Nat.equal Nat.zero (Nat.succ n)) Bool.false)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl
      [2;36m┆[0m     
  129 [2;36m│[0m    // so far to prove the following theorem about boolean functions.
  130 [2;36m│[0m    Identity_fn_applied_twice (f: Bool ->  Bool) (e: (x: Bool) -> [1;31mEqual[0m Bool (f x) x) (b: Bool) : ([1;31mEqual[0m Bool (f (f b)) b)
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m────[0m                            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                  [1;31m│[0m                                [1;31m└Here![0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
  131 [2;36m│[0m    Identity_fn_applied_twice f g b =
      [2;36m┆[0m     
  133 [2;36m│[0m                                let mir = Equal.mirror g_b
  134 [2;36m│[0m                                let rrt = Equal.rewrite mir (x => ([1;31mEqual[0m Bool (f x) b)) g_b
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
  135 [2;36m│[0m                                rrt
      [2;36m┆[0m     
  146 [2;36m│[0m    // you do not have to introduce all hypotheses at the same time.)
  147 [2;36m│[0m    Andb_eq_orb (b: Bool) (c: Bool) (e: [1;31mEqual[0m Bool (Bool.and b c) (Bool.or b c)) : ([1;31mEqual[0m Bool b c)
      [2;36m│[0m                                        [1;31m┬[0m[1;31m────[0m                                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                        [1;31m│[0m                                           [1;31m└Here![0m
      [2;36m│[0m                                        [1;31m└Here![0m
  148 [2;36m│[0m    Andb_eq_orb Bool.true Bool.true prf = Equal.refl // prf

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:12:15][0m
      [2;36m│[0m
   11 [2;36m│[0m    Test_nandb1 : (Equal Bool (Nandb Bool.true Bool.false) Bool.true)
   12 [2;36m│[0m    Test_nandb1 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   13 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   14 [2;36m│[0m    Test_nandb2 : (Equal Bool (Nandb Bool.false Bool.false) Bool.true)
   15 [2;36m│[0m    Test_nandb2 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   16 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   17 [2;36m│[0m    Test_nandb3 : (Equal Bool (Nandb Bool.false Bool.true) Bool.true)
   18 [2;36m│[0m    Test_nandb3 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   19 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   20 [2;36m│[0m    Test_nandb4 : (Equal Bool (Nandb Bool.true Bool.true) Bool.false)
   21 [2;36m│[0m    Test_nandb4 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   22 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
      [2;36m┆[0m     
   30 [2;36m│[0m    Test_andb31 : (Equal Bool (Andb3 Bool.true Bool.true Bool.true) Bool.true)
   31 [2;36m│[0m    Test_andb31 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   32 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   33 [2;36m│[0m    Test_andb32 : (Equal Bool (Andb3 Bool.false Bool.true Bool.true) Bool.false)
   34 [2;36m│[0m    Test_andb32 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   35 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   36 [2;36m│[0m    Test_andb33 : (Equal Bool (Andb3 Bool.true Bool.false Bool.true) Bool.false)
   37 [2;36m│[0m    Test_andb33 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   38 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   39 [2;36m│[0m    Test_andb34 : (Equal Bool (Andb3 Bool.true Bool.true Bool.false) Bool.false)
   40 [2;36m│[0m    Test_andb34 = [1;31mEqual.refl[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   41 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
      [2;36m┆[0m     
   53 [2;36m│[0m    TestFactorial1 : (Equal Nat (Factorial (U60.to_nat 3)) (U60.to_nat 6))
   54 [2;36m│[0m    TestFactorial1 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   55 [2;36m│[0m    // - Goal: (Equal  Nat (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))) 
      [2;36m┆[0m     
   57 [2;36m│[0m    TestFactorial2 : (Equal Nat (Factorial (U60.to_nat 5)) (U60.to_nat (* 10 12)))
   58 [2;36m│[0m    TestFactorial2 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   59 [2;36m│[0m    // - Goal: Só Odin sabe !!!!
      [2;36m┆[0m     
   71 [2;36m│[0m    Test_blt_nat_1 : Equal Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 2)) Bool.false
   72 [2;36m│[0m    Test_blt_nat_1 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   73 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
   74 [2;36m│[0m    Test_blt_nat_2 : Equal Bool (Blt_nat (U60.to_nat 2) (U60.to_nat 4)) Bool.true
   75 [2;36m│[0m    Test_blt_nat_2 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   76 [2;36m│[0m    // - Goal: (Equal Bool Bool.true Bool.true)
   77 [2;36m│[0m    Test_blt_nat_3 : Equal Bool (Blt_nat (U60.to_nat 4) (U60.to_nat 2)) Bool.false
   78 [2;36m│[0m    Test_blt_nat_3 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
   79 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.false)
      [2;36m┆[0m     
  108 [2;36m│[0m    Andb_true_elim_2 (b: Bool) (c: Bool) (e: Equal Bool (Bool.and b c) Bool.true) : (Equal Bool c Bool.true)
  109 [2;36m│[0m    Andb_true_elim_2 Bool.true Bool.true prf = [1;31mEqual.refl[0m
      [2;36m│[0m                                               [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                               [1;31m└Here![0m
  110 [2;36m│[0m    // - prf : (Equal Bool Bool.true Bool.true)
      [2;36m┆[0m     
  114 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.true)
  115 [2;36m│[0m    Andb_true_elim_2 Bool.false Bool.true prf = [1;31mEqual.refl[0m
      [2;36m│[0m                                                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
  116 [2;36m│[0m    // - prf : (Equal Bool Bool.false Bool.true)
      [2;36m┆[0m     
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal Bool (Nat.equal Nat.zero (Nat.succ n)) Bool.false)
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = [1;31mEqual.refl[0m
      [2;36m│[0m                          [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
  125 [2;36m│[0m    
      [2;36m┆[0m     
  147 [2;36m│[0m    Andb_eq_orb (b: Bool) (c: Bool) (e: Equal Bool (Bool.and b c) (Bool.or b c)) : (Equal Bool b c)
  148 [2;36m│[0m    Andb_eq_orb Bool.true Bool.true prf = [1;31mEqual.refl[0m // prf
      [2;36m│[0m                                          [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
  149 [2;36m│[0m    // - prf : (Equal Bool Bool.true Bool.true)
      [2;36m┆[0m     
  156 [2;36m│[0m    // - Goal: (Equal Bool Bool.false Bool.true)
  157 [2;36m│[0m    Andb_eq_orb Bool.false Bool.false prf = [1;31mEqual.refl[0m // prf
      [2;36m│[0m                                            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                            [1;31m└Here![0m
  158 [2;36m│[0m    // - prf : (Equal Bool Bool.false Bool.false)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.and'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:28:19][0m
      [2;36m│[0m
   27 [2;36m│[0m    Andb3 (b1: Bool) (b2: Bool) (b3: Bool) : Bool
   28 [2;36m│[0m    Andb3 b1 b2 b3 = ([1;31mBool.and[0m b1 ([1;31mBool.and[0m b2 b3))
      [2;36m│[0m                      [1;31m┬[0m[1;31m───────[0m     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                      [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
   29 [2;36m│[0m    
      [2;36m┆[0m     
  107 [2;36m│[0m    // cases (and subcases) to lemmas when case split.
  108 [2;36m│[0m    Andb_true_elim_2 (b: Bool) (c: Bool) (e: Equal Bool ([1;31mBool.and[0m b c) Bool.true) : (Equal Bool c Bool.true)
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                         [1;31m└Here![0m
  109 [2;36m│[0m    Andb_true_elim_2 Bool.true Bool.true prf = Equal.refl
      [2;36m┆[0m     
  146 [2;36m│[0m    // you do not have to introduce all hypotheses at the same time.)
  147 [2;36m│[0m    Andb_eq_orb (b: Bool) (c: Bool) (e: Equal Bool ([1;31mBool.and[0m b c) (Bool.or b c)) : (Equal Bool b c)
      [2;36m│[0m                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                    [1;31m└Here![0m
  148 [2;36m│[0m    Andb_eq_orb Bool.true Bool.true prf = Equal.refl // prf

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:49:15][0m
      [2;36m│[0m
   48 [2;36m│[0m    
   49 [2;36m│[0m    Factorial (n: [1;31mNat[0m) : [1;31mNat[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                  [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   50 [2;36m│[0m    Factorial  Nat.zero    = (Nat.succ (Nat.zero))
      [2;36m┆[0m     
   52 [2;36m│[0m    
   53 [2;36m│[0m    TestFactorial1 : (Equal [1;31mNat[0m (Factorial (U60.to_nat 3)) (U60.to_nat 6))
      [2;36m│[0m                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                            [1;31m└Here![0m
   54 [2;36m│[0m    TestFactorial1 = Equal.refl
      [2;36m┆[0m     
   56 [2;36m│[0m    //                     (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))))
   57 [2;36m│[0m    TestFactorial2 : (Equal [1;31mNat[0m (Factorial (U60.to_nat 5)) (U60.to_nat (* 10 12)))
      [2;36m│[0m                            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                            [1;31m└Here![0m
   58 [2;36m│[0m    TestFactorial2 = Equal.refl
      [2;36m┆[0m     
   64 [2;36m│[0m    
   65 [2;36m│[0m    Blt_nat (n: [1;31mNat[0m) (m: [1;31mNat[0m) : Bool
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   66 [2;36m│[0m    Blt_nat Nat.zero Nat.zero = Bool.false
      [2;36m┆[0m     
   81 [2;36m│[0m    // 8.0.1. Exercise: 1 star (plus_id_exercise). Fill in the proof.
   82 [2;36m│[0m    Plus_id_exercise (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) (e: Equal [1;31mNat[0m n m)  (p: Equal [1;31mNat[0m m o) : (Equal [1;31mNat[0m (Nat.add n m) (Nat.add m o)) 
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m                 [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                   [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                   [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   83 [2;36m│[0m    Plus_id_exercise n m o e p = 
   84 [2;36m│[0m                            let app = Equal.apply (x => Nat.add n x) p
   85 [2;36m│[0m                            let rrt = Equal.rewrite e (x => (Equal [1;31mNat[0m (Nat.add n m) (Nat.add x o))) app
      [2;36m│[0m                                                                   [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                                   [1;31m└Here![0m
   86 [2;36m│[0m                            rrt
      [2;36m┆[0m     
   94 [2;36m│[0m    // 8.0.2. Exercise: 2 starts (mult_S_1).
   95 [2;36m│[0m    Mult_S_1 (n: [1;31mNat[0m) (m: [1;31mNat[0m) (e: Equal [1;31mNat[0m m (Nat.succ n)) : (Equal [1;31mNat[0m (Nat.mul m (Nat.succ n)) (Nat.mul m m))
      [2;36m│[0m                 [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                 [1;31m│[0m        [1;31m│[0m              [1;31m│[0m                            [1;31m└Here![0m
      [2;36m│[0m                 [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                 [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   96 [2;36m│[0m    Mult_S_1 n m e = 
      [2;36m┆[0m     
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : [1;31mNat[0m) :(Equal Bool (Nat.equal Nat.zero (Nat.succ n)) Bool.false)
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.rewrite'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:85:35][0m
      [2;36m│[0m
   84 [2;36m│[0m                            let app = Equal.apply (x => Nat.add n x) p
   85 [2;36m│[0m                            let rrt = [1;31mEqual.rewrite[0m e (x => (Equal Nat (Nat.add n m) (Nat.add x o))) app
      [2;36m│[0m                                      [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
   86 [2;36m│[0m                            rrt
      [2;36m┆[0m     
  133 [2;36m│[0m                                let mir = Equal.mirror g_b
  134 [2;36m│[0m                                let rrt = [1;31mEqual.rewrite[0m mir (x => (Equal Bool (f x) b)) g_b
      [2;36m│[0m                                          [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
  135 [2;36m│[0m                                rrt

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.equal'.[0m

[2;36m      ┌──[IINS/Book/ch_02.kind2:123:42][0m
      [2;36m│[0m
  122 [2;36m│[0m    // 9.0.2. Exercise: 1 star (zero_nbeq_plus_1).
  123 [2;36m│[0m    Zero_nbeq_plus_1 (n : Nat) :(Equal Bool ([1;31mNat.equal[0m Nat.zero (Nat.succ n)) Bool.false)
      [2;36m│[0m                                             [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
  124 [2;36m│[0m    Zero_nbeq_plus_1 n  = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 17 errors


  [1;42m CHECKING [0m The file './IINS/Book/book.kind2'
     [1;42m STATS [0m Rewrites: 463910
   [1;42m CHECKED [0m All terms checked. took 0.28s


  [1;42m CHECKING [0m The file './IINS/Book/ch_03.kind2'
     [1;42m STATS [0m Rewrites: 429158
   [1;42m CHECKED [0m All terms checked. took 0.24s


  [1;42m CHECKING [0m The file './IINS/Book/ch_05.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Bool.match'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:231:3][0m
      [2;36m│[0m
  230 [2;36m│[0m    Filter x test (List.cons l head tail) = 
  231 [2;36m│[0m      [1;31mBool.match[0m (test head) ( x => _ ) (List.cons head (Filter test tail)) (Filter test tail)
      [2;36m│[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m      [1;31m└Here![0m
  232 [2;36m│[0m        // if (func head) {List.cons head (Filter func tail)}

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:93:77][0m
      [2;36m│[0m
   92 [2;36m│[0m    // app_length l1 l2 = ?app_length_rhs
   93 [2;36m│[0m    App_length <x> (l1: List x) (l2: List x) : (Equal Nat (Length (App l1 l2)) ([1;31mNat.add[0m (Length l1) (Length l2)))
      [2;36m│[0m                                                                                [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                [1;31m└Here![0m
   94 [2;36m│[0m    
      [2;36m┆[0m     
  452 [2;36m│[0m    Plus3 : Nat -> Nat
  453 [2;36m│[0m    Plus3 = n => [1;31mNat.add[0m 3n n
      [2;36m│[0m                 [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                 [1;31m└Here![0m
  454 [2;36m│[0m    
      [2;36m┆[0m     
  460 [2;36m│[0m    
  461 [2;36m│[0m    Test_plus3_3 : Equal (Doit3times (x => [1;31mNat.add[0m 3n x) 0n) 9n
      [2;36m│[0m                                           [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
  462 [2;36m│[0m    Test_plus3_3 = ?

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.odd'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:19:15][0m
      [2;36m│[0m
   18 [2;36m│[0m    Repeat <x_ty: Type> (x: x_ty) (count: Nat) : List x_ty
   19 [2;36m│[0m    Repeat x_ty x [1;31mNat.zero[0m = (List.nil x_ty)
      [2;36m│[0m                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   20 [2;36m│[0m    Repeat x_ty x (Nat.succ count) = List.cons x (Repeat x_ty x count)
      [2;36m┆[0m     
   66 [2;36m│[0m    Length <x> (l: List x) : Nat
   67 [2;36m│[0m    Length List.nil = [1;31mNat.zero[0m
      [2;36m│[0m                      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                      [1;31m└Here![0m
   68 [2;36m│[0m    Length (List.cons x head tail) = Nat.succ (Length tail)
      [2;36m┆[0m     
   78 [2;36m│[0m    // test_length1 = Refl
   79 [2;36m│[0m    Test_length1 : Equal (Length (List.nil)) ([1;31mNat.zero[0m)
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
   80 [2;36m│[0m    Test_length1 = Equal.refl
      [2;36m┆[0m     
  170 [2;36m│[0m    Nth_error x List.nil n = (Maybe.none x)
  171 [2;36m│[0m    Nth_error x (List.cons l head tail) [1;31mNat.zero[0m = Maybe.some head
      [2;36m│[0m                                        [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                        [1;31m└Here![0m
  172 [2;36m│[0m    Nth_error x (List.cons l head tail) (Nat.succ n) = Nth_error tail n
      [2;36m┆[0m     
  208 [2;36m│[0m    Numbers.minusTwo (n: Nat) : Nat
  209 [2;36m│[0m    Numbers.minusTwo [1;31mNat.zero[0m = [1;31mNat.zero[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m───────[0m   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                     [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
      [2;36m┆[0m     
  210 [2;36m│[0m    Numbers.minusTwo (Nat.succ [1;31mNat.zero[0m) = [1;31mNat.zero[0m
      [2;36m│[0m                               [1;31m┬[0m[1;31m───────[0m    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                               [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                               [1;31m└Here![0m
  211 [2;36m│[0m    Numbers.minusTwo (Nat.succ (Nat.succ k)) = k
      [2;36m┆[0m     
  244 [2;36m│[0m    Length_is_1 <x> (l: List x ) : Bool
  245 [2;36m│[0m    Length_is_1 l = Nat.equal (Length l) (Nat.succ [1;31mNat.zero[0m)
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
  246 [2;36m│[0m    
      [2;36m┆[0m     
  249 [2;36m│[0m    Nat.odd (n: Nat) : Bool
  250 [2;36m│[0m    Nat.odd [1;31mNat.zero[0m = Bool.false
      [2;36m│[0m            [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m            [1;31m└Here![0m
      [2;36m┆[0m     
  251 [2;36m│[0m    Nat.odd (Nat.succ [1;31mNat.zero[0m) = Bool.true
      [2;36m│[0m                      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  252 [2;36m│[0m    Nat.odd (Nat.succ (Nat.succ k)) = Nat.odd k
      [2;36m┆[0m     
  536 [2;36m│[0m    Nth_error_informal List.nil n = Maybe.none 
  537 [2;36m│[0m    Nth_error_informal (List.cons head tail) [1;31mNat.zero[0m =  Maybe.some head 
      [2;36m│[0m                                             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                             [1;31m└Here![0m
  538 [2;36m│[0m    Nth_error_informal (List.cons head tail) (Nat.succ n) =  Nth_error tail n

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:220:57][0m
      [2;36m│[0m
  219 [2;36m│[0m    // test_doit3times' = Refl
  220 [2;36m│[0m    Test_doit3times2 : (Equal (Doit3times (x => Bool.not x) [1;31mBool.true[0m) Bool.false)
      [2;36m│[0m                                                            [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                            [1;31m└Here![0m
  221 [2;36m│[0m    Test_doit3times2 = Equal.refl
      [2;36m┆[0m     
  250 [2;36m│[0m    Nat.odd Nat.zero = Bool.false
  251 [2;36m│[0m    Nat.odd (Nat.succ Nat.zero) = [1;31mBool.true[0m
      [2;36m│[0m                                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  252 [2;36m│[0m    Nat.odd (Nat.succ (Nat.succ k)) = Nat.odd k
      [2;36m┆[0m     
  443 [2;36m│[0m    Ftrue : Nat -> Bool
  444 [2;36m│[0m    Ftrue = Constfun [1;31mBool.true[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
  445 [2;36m│[0m    
  446 [2;36m│[0m    Constfun_example1 : Equal Bool ((Ftrue) 0n) [1;31mBool.true[0m
      [2;36m│[0m                                                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
  447 [2;36m│[0m    Constfun_example1 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:6:18][0m
      [2;36m│[0m
    5 [2;36m│[0m    BoolList : Type
    6 [2;36m│[0m    BoolList = (List [1;31mBool[0m)
      [2;36m│[0m                     [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                     [1;31m└Here![0m
    7 [2;36m│[0m    
      [2;36m┆[0m     
   28 [2;36m│[0m    // test_repeat2 = Refl
   29 [2;36m│[0m    Test_repeat2 : Equal BoolList (Repeat [1;31mBool[0m (Bool.false) (U60.to_nat 1)) (List.cons (Bool.false) (List.nil [1;31mBool[0m))
      [2;36m│[0m                                          [1;31m┬[0m[1;31m───[0m                                                                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                          [1;31m│[0m                                                                   [1;31m└Here![0m
      [2;36m│[0m                                          [1;31m└Here![0m
   30 [2;36m│[0m    Test_repeat2 = Equal.refl
      [2;36m┆[0m     
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : (Equal (Pair (List U60) (List [1;31mBool[0m)) (Split [(Pair.new 1 Bool.false),(Pair.new 2 Bool.false)]) (Pair.new [1,2] [Bool.false,Bool.false]))
      [2;36m│[0m                                               [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                               [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  227 [2;36m│[0m    
  228 [2;36m│[0m    Filter <x> (test: x -> [1;31mBool[0m) (l: (List x)) : (List x)
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
  229 [2;36m│[0m    Filter x test (List.nil l) = (List.nil)
      [2;36m┆[0m     
  243 [2;36m│[0m    // length_is_1 l = length l తథ 1
  244 [2;36m│[0m    Length_is_1 <x> (l: List x ) : [1;31mBool[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                   [1;31m└Here![0m
  245 [2;36m│[0m    Length_is_1 l = Nat.equal (Length l) (Nat.succ Nat.zero)
      [2;36m┆[0m     
  248 [2;36m│[0m    // test_filter2 = Refl
  249 [2;36m│[0m    Nat.odd (n: Nat) : [1;31mBool[0m
      [2;36m│[0m                       [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                       [1;31m└Here![0m
  250 [2;36m│[0m    Nat.odd Nat.zero = Bool.false
      [2;36m┆[0m     
  300 [2;36m│[0m    // 2.3.2. Exercise: 3 stars (partition). Use filter to write an Idris function partition:
  301 [2;36m│[0m    Partition <x> (test: x -> [1;31mBool[0m) (l : List x) : Pair (List x) (List x)
      [2;36m│[0m                              [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                              [1;31m└Here![0m
  302 [2;36m│[0m    Partition test List.nil = Pair.new List.nil List.nil
      [2;36m┆[0m     
  442 [2;36m│[0m    
  443 [2;36m│[0m    Ftrue : Nat -> [1;31mBool[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                   [1;31m└Here![0m
  444 [2;36m│[0m    Ftrue = Constfun Bool.true
  445 [2;36m│[0m    
  446 [2;36m│[0m    Constfun_example1 : Equal [1;31mBool[0m ((Ftrue) 0n) Bool.true
      [2;36m│[0m                              [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                              [1;31m└Here![0m
  447 [2;36m│[0m    Constfun_example1 = Equal.refl

      [1;36mHint:[0m [36mMaybe you're looking for 'BoolList'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe.none'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:170:27][0m
      [2;36m│[0m
  169 [2;36m│[0m    Nth_error <x> (l: List x) (n: Nat) : Option x
  170 [2;36m│[0m    Nth_error x List.nil n = ([1;31mMaybe.none[0m x)
      [2;36m│[0m                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                              [1;31m└Here![0m
  171 [2;36m│[0m    Nth_error x (List.cons l head tail) Nat.zero = Maybe.some head
      [2;36m┆[0m     
  189 [2;36m│[0m    Hd_error <x> (l: List x) :  Option x
  190 [2;36m│[0m    Hd_error x (List.nil l) = ([1;31mMaybe.none[0m x)
      [2;36m│[0m                               [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                               [1;31m└Here![0m
  191 [2;36m│[0m    Hd_error x (List.cons l head tail) = (Maybe.some head)
      [2;36m┆[0m     
  396 [2;36m│[0m    Maybe_map <x> <y> (f:x -> y) (m: Maybe x) : Maybe y
  397 [2;36m│[0m    Maybe_map f [1;31mMaybe.none[0m = [1;31mMaybe.none[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
  398 [2;36m│[0m    Maybe_map f (Maybe.some x) = Maybe.some (f x)
      [2;36m┆[0m     
  535 [2;36m│[0m    Nth_error_informal <x> (l: List x) (n: Nat) : Maybe x
  536 [2;36m│[0m    Nth_error_informal List.nil n = [1;31mMaybe.none[0m 
      [2;36m│[0m                                    [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                    [1;31m└Here![0m
  537 [2;36m│[0m    Nth_error_informal (List.cons head tail) Nat.zero =  Maybe.some head 

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.false'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:29:45][0m
      [2;36m│[0m
   28 [2;36m│[0m    // test_repeat2 = Refl
   29 [2;36m│[0m    Test_repeat2 : Equal BoolList (Repeat Bool ([1;31mBool.false[0m) (U60.to_nat 1)) (List.cons ([1;31mBool.false[0m) (List.nil Bool))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m─────────[0m                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                [1;31m│[0m                                       [1;31m└Here![0m
      [2;36m│[0m                                                [1;31m└Here![0m
   30 [2;36m│[0m    Test_repeat2 = Equal.refl
      [2;36m┆[0m     
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : (Equal (Pair (List U60) (List Bool)) (Split [(Pair.new 1 [1;31mBool.false[0m),(Pair.new 2 [1;31mBool.false[0m)]) (Pair.new [1,2] [[1;31mBool.false[0m,[1;31mBool.false[0m]))
      [2;36m│[0m                                                                          [1;31m┬[0m[1;31m─────────[0m              [1;31m┬[0m[1;31m─────────[0m                     [1;31m┬[0m[1;31m─────────[0m [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                          [1;31m│[0m                       [1;31m│[0m                              [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                                                          [1;31m│[0m                       [1;31m│[0m                              [1;31m└Here![0m
      [2;36m│[0m                                                                          [1;31m│[0m                       [1;31m└Here![0m
      [2;36m│[0m                                                                          [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  219 [2;36m│[0m    // test_doit3times' = Refl
  220 [2;36m│[0m    Test_doit3times2 : (Equal (Doit3times (x => Bool.not x) Bool.true) [1;31mBool.false[0m)
      [2;36m│[0m                                                                       [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                       [1;31m└Here![0m
  221 [2;36m│[0m    Test_doit3times2 = Equal.refl
      [2;36m┆[0m     
  249 [2;36m│[0m    Nat.odd (n: Nat) : Bool
  250 [2;36m│[0m    Nat.odd Nat.zero = [1;31mBool.false[0m
      [2;36m│[0m                       [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                       [1;31m└Here![0m
  251 [2;36m│[0m    Nat.odd (Nat.succ Nat.zero) = Bool.true
      [2;36m┆[0m     
  317 [2;36m│[0m    
  318 [2;36m│[0m    Test_partition2 : (Equal (Partition (x => [1;31mBool.false[0m) [5,9,0]) (Pair.new List.nil [5,9,0]))
      [2;36m│[0m                                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
  319 [2;36m│[0m    Test_partition2 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:20:16][0m
      [2;36m│[0m
   19 [2;36m│[0m    Repeat x_ty x Nat.zero = (List.nil x_ty)
   20 [2;36m│[0m    Repeat x_ty x ([1;31mNat.succ[0m count) = List.cons x (Repeat x_ty x count)
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   21 [2;36m│[0m    
      [2;36m┆[0m     
   67 [2;36m│[0m    Length List.nil = Nat.zero
   68 [2;36m│[0m    Length (List.cons x head tail) = [1;31mNat.succ[0m (Length tail)
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   69 [2;36m│[0m    // test_rev1 : rev (1௝௞2௝௞List.nil) = 2௝௞1௝௞List.nil
      [2;36m┆[0m     
  171 [2;36m│[0m    Nth_error x (List.cons l head tail) Nat.zero = Maybe.some head
  172 [2;36m│[0m    Nth_error x (List.cons l head tail) ([1;31mNat.succ[0m n) = Nth_error tail n
      [2;36m│[0m                                         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                         [1;31m└Here![0m
  173 [2;36m│[0m    
      [2;36m┆[0m     
  209 [2;36m│[0m    Numbers.minusTwo Nat.zero = Nat.zero
  210 [2;36m│[0m    Numbers.minusTwo ([1;31mNat.succ[0m Nat.zero) = Nat.zero
      [2;36m│[0m                      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                      [1;31m└Here![0m
      [2;36m┆[0m     
  211 [2;36m│[0m    Numbers.minusTwo ([1;31mNat.succ[0m ([1;31mNat.succ[0m k)) = k
      [2;36m│[0m                      [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                      [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
  212 [2;36m│[0m    
      [2;36m┆[0m     
  244 [2;36m│[0m    Length_is_1 <x> (l: List x ) : Bool
  245 [2;36m│[0m    Length_is_1 l = Nat.equal (Length l) ([1;31mNat.succ[0m Nat.zero)
      [2;36m│[0m                                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
  246 [2;36m│[0m    
      [2;36m┆[0m     
  250 [2;36m│[0m    Nat.odd Nat.zero = Bool.false
  251 [2;36m│[0m    Nat.odd ([1;31mNat.succ[0m Nat.zero) = Bool.true
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m└Here![0m
      [2;36m┆[0m     
  252 [2;36m│[0m    Nat.odd ([1;31mNat.succ[0m ([1;31mNat.succ[0m k)) = Nat.odd k
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m             [1;31m└Here![0m
  253 [2;36m│[0m    
      [2;36m┆[0m     
  473 [2;36m│[0m    Fold_length <x> (l: List x) : Nat
  474 [2;36m│[0m    Fold_length l = Fold (n => n => ([1;31mNat.succ[0m n)) l 0n
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
  475 [2;36m│[0m    
      [2;36m┆[0m     
  483 [2;36m│[0m      let ind = Fold_length_correct tail
  484 [2;36m│[0m      let app = Equal.apply (n => [1;31mNat.succ[0m n) ind
      [2;36m│[0m                                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  485 [2;36m│[0m      app
      [2;36m┆[0m     
  537 [2;36m│[0m    Nth_error_informal (List.cons head tail) Nat.zero =  Maybe.some head 
  538 [2;36m│[0m    Nth_error_informal (List.cons head tail) ([1;31mNat.succ[0m n) =  Nth_error tail n
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                              [1;31m└Here![0m
  539 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Pair'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:118:20][0m
      [2;36m│[0m
  117 [2;36m│[0m    
  118 [2;36m│[0m    Fst <x> <y> (pair: [1;31mPair[0m x y) : x
      [2;36m│[0m                       [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                       [1;31m└Here![0m
  119 [2;36m│[0m    Fst (Pair.new pair.x pair.y fst snd) = fst
      [2;36m┆[0m     
  123 [2;36m│[0m    
  124 [2;36m│[0m    Snd <x> <y> (p: [1;31mPair[0m x y) : y
      [2;36m│[0m                    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                    [1;31m└Here![0m
  125 [2;36m│[0m    Snd (Pair.new pair.x pair.y fst snd) = snd
      [2;36m┆[0m     
  130 [2;36m│[0m    // // zip (x௝௞tx) (y௝௞ty) = (x,y) ௝௞ zip tx ty
  131 [2;36m│[0m    Zip <x> <y> (lx: List x) (ly: List y) : (List ([1;31mPair[0m x y))
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
  132 [2;36m│[0m    Zip List.nil ly = List.nil
      [2;36m┆[0m     
  147 [2;36m│[0m    // split l = ?split_rhs
  148 [2;36m│[0m    Split <x> <y> (l: List ([1;31mPair[0m x y)) : [1;31mPair[0m (List x) (List y)
      [2;36m│[0m                            [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                            [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                            [1;31m└Here![0m
  149 [2;36m│[0m    Split x y List.nil = Pair.new List.nil List.nil
      [2;36m┆[0m     
  153 [2;36m│[0m      let snd = Snd pair
  154 [2;36m│[0m      Pair.match res (a => ([1;31mPair[0m (List x) (List y))) (res.fst => res.snd => (Pair.new (List.cons fst res.fst) (List.cons snd res.snd)))
      [2;36m│[0m                            [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                            [1;31m└Here![0m
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : (Equal ([1;31mPair[0m (List U60) (List Bool)) (Split [(Pair.new 1 Bool.false),(Pair.new 2 Bool.false)]) (Pair.new [1,2] [Bool.false,Bool.false]))
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  300 [2;36m│[0m    // 2.3.2. Exercise: 3 stars (partition). Use filter to write an Idris function partition:
  301 [2;36m│[0m    Partition <x> (test: x -> Bool) (l : List x) : [1;31mPair[0m (List x) (List x)
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
  302 [2;36m│[0m    Partition test List.nil = Pair.new List.nil List.nil
      [2;36m┆[0m     
  516 [2;36m│[0m    
  517 [2;36m│[0m    Pair_curry <x> <y> <z> (f: ([1;31mPair[0m x y) -> z) (x_val: x) (y_val: y) : z 
      [2;36m│[0m                                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                [1;31m└Here![0m
  518 [2;36m│[0m    Pair_curry f x_val y_val = f (Pair.new x_val y_val)
      [2;36m┆[0m     
  523 [2;36m│[0m    
  524 [2;36m│[0m    Pair_uncurry <x> <y> <z> (f: x -> y -> z) (p: [1;31mPair[0m x y) : z
      [2;36m│[0m                                                  [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                  [1;31m└Here![0m
  525 [2;36m│[0m    Pair_uncurry x y z f (Pair.new fst snd) = (f fst snd) 
      [2;36m┆[0m     
  529 [2;36m│[0m    
  530 [2;36m│[0m    Curry_uncurry <x> <y> <z> (f:([1;31mPair[0m x y) -> z) (p: [1;31mPair[0m x y) : Equal z (Pair_uncurry (x => y => Pair_curry f x y) p) (f p)
      [2;36m│[0m                                  [1;31m┬[0m[1;31m───[0m                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                  [1;31m│[0m                   [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m└Here![0m
  531 [2;36m│[0m    Curry_uncurry f (Pair.new fst snd) = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.to_nat'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:24:35][0m
      [2;36m│[0m
   23 [2;36m│[0m    // test_repeat1 = Refl
   24 [2;36m│[0m    Test_repeat1 : Equal (Repeat Nat ([1;31mU60.to_nat[0m 4) ([1;31mU60.to_nat[0m 2)) (List.cons ([1;31mU60.to_nat[0m 4) (List.cons ([1;31mU60.to_nat[0m 4) (List.nil Nat)))
      [2;36m│[0m                                      [1;31m┬[0m[1;31m─────────[0m     [1;31m┬[0m[1;31m─────────[0m                 [1;31m┬[0m[1;31m─────────[0m                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                      [1;31m│[0m              [1;31m│[0m                          [1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                      [1;31m│[0m              [1;31m│[0m                          [1;31m└Here![0m
      [2;36m│[0m                                      [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                                      [1;31m└Here![0m
   25 [2;36m│[0m    Test_repeat1 = Equal.refl
      [2;36m┆[0m     
   28 [2;36m│[0m    // test_repeat2 = Refl
   29 [2;36m│[0m    Test_repeat2 : Equal BoolList (Repeat Bool (Bool.false) ([1;31mU60.to_nat[0m 1)) (List.cons (Bool.false) (List.nil Bool))
      [2;36m│[0m                                                             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                             [1;31m└Here![0m
   30 [2;36m│[0m    Test_repeat2 = Equal.refl
      [2;36m┆[0m     
  214 [2;36m│[0m    // test_doit3times = Refl
  215 [2;36m│[0m    Test_doit3times : (Equal (Doit3times (x => Numbers.minusTwo x) ([1;31mU60.to_nat[0m 9)) ([1;31mU60.to_nat[0m 3))
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m─────────[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                                    [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
  216 [2;36m│[0m    Test_doit3times = Equal.refl
      [2;36m┆[0m     
  314 [2;36m│[0m    
  315 [2;36m│[0m    Test_partition1 : (Equal (Partition (x => Nat.odd ([1;31mU60.to_nat[0m x)) [1,2,3,4,5])  (Pair.new [1,3,5] [2,4]))
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
  316 [2;36m│[0m    Test_partition1 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:362:13][0m
      [2;36m│[0m
  361 [2;36m│[0m      let ind = List.map_rev func tail
  362 [2;36m│[0m      let app = [1;31mEqual.apply[0m (x => App x (Map func [head])) ind 
      [2;36m│[0m                [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                [1;31m└Here![0m
  363 [2;36m│[0m      let aux = List.map_app func (Rev tail) [head]
      [2;36m┆[0m     
  483 [2;36m│[0m      let ind = Fold_length_correct tail
  484 [2;36m│[0m      let app = [1;31mEqual.apply[0m (n => Nat.succ n) ind
      [2;36m│[0m                [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                [1;31m└Here![0m
  485 [2;36m│[0m      app
      [2;36m┆[0m     
  502 [2;36m│[0m      let ind = Fold_map_correct f tail
  503 [2;36m│[0m      let app = [1;31mEqual.apply[0m (t => List.cons (f head) t) ind
      [2;36m│[0m                [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                [1;31m└Here![0m
  504 [2;36m│[0m      app

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.chain'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:364:13][0m
      [2;36m│[0m
  363 [2;36m│[0m      let aux = List.map_app func (Rev tail) [head]
  364 [2;36m│[0m      let chn = [1;31mEqual.chain[0m aux app
      [2;36m│[0m                [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                [1;31m└Here![0m
  365 [2;36m│[0m      chn

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Pair.match'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:154:3][0m
      [2;36m│[0m
  153 [2;36m│[0m      let snd = Snd pair
  154 [2;36m│[0m      [1;31mPair.match[0m res (a => (Pair (List x) (List y))) (res.fst => res.snd => (Pair.new (List.cons fst res.fst) (List.cons snd res.snd)))
      [2;36m│[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m      [1;31m└Here![0m
  155 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:24:16][0m
      [2;36m│[0m
   23 [2;36m│[0m    // test_repeat1 = Refl
   24 [2;36m│[0m    Test_repeat1 : [1;31mEqual[0m (Repeat Nat (U60.to_nat 4) (U60.to_nat 2)) (List.cons (U60.to_nat 4) (List.cons (U60.to_nat 4) (List.nil Nat)))
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   25 [2;36m│[0m    Test_repeat1 = Equal.refl
      [2;36m┆[0m     
   28 [2;36m│[0m    // test_repeat2 = Refl
   29 [2;36m│[0m    Test_repeat2 : [1;31mEqual[0m BoolList (Repeat Bool (Bool.false) (U60.to_nat 1)) (List.cons (Bool.false) (List.nil Bool))
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   30 [2;36m│[0m    Test_repeat2 = Equal.refl
      [2;36m┆[0m     
   70 [2;36m│[0m    // test_rev1 = Refl
   71 [2;36m│[0m    Test_rev1 : [1;31mEqual[0m (Rev (List.nil)) (List.nil)
      [2;36m│[0m                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                [1;31m└Here![0m
   72 [2;36m│[0m    Test_rev1 = Equal.refl
      [2;36m┆[0m     
   74 [2;36m│[0m    // test_rev2 = Refl
   75 [2;36m│[0m    Test_rev2 : [1;31mEqual[0m (Rev (List.nil)) (List.nil)
      [2;36m│[0m                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                [1;31m└Here![0m
   76 [2;36m│[0m    Test_rev2 = Equal.refl
      [2;36m┆[0m     
   78 [2;36m│[0m    // test_length1 = Refl
   79 [2;36m│[0m    Test_length1 : [1;31mEqual[0m (Length (List.nil)) (Nat.zero)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   80 [2;36m│[0m    Test_length1 = Equal.refl
      [2;36m┆[0m     
   84 [2;36m│[0m    // app_nil_r l = ?app_nil_r_rhs
   85 [2;36m│[0m    App_nil_r <x> (l: List x) : ([1;31mEqual[0m (App l List.nil) l)
      [2;36m│[0m                                 [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                 [1;31m└Here![0m
   86 [2;36m│[0m    
      [2;36m┆[0m     
   88 [2;36m│[0m    // app_assoc l m n = ?app_assoc_rhs
   89 [2;36m│[0m    App_assoc <a> (l: List a) (m: List a) (n: List a) : ([1;31mEqual[0m (App l (App m n)) (App (App l m) n)) 
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                         [1;31m└Here![0m
   90 [2;36m│[0m    
      [2;36m┆[0m     
   92 [2;36m│[0m    // app_length l1 l2 = ?app_length_rhs
   93 [2;36m│[0m    App_length <x> (l1: List x) (l2: List x) : ([1;31mEqual[0m Nat (Length (App l1 l2)) (Nat.add (Length l1) (Length l2)))
      [2;36m│[0m                                                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
   94 [2;36m│[0m    
      [2;36m┆[0m     
   97 [2;36m│[0m    // rev_app_distr l1 l2 = ?rev_app_distr_rhs
   98 [2;36m│[0m    Rev_app_distr <x> (l1: List x) (l2: List x) : ([1;31mEqual[0m (List x) (Rev (App l1 l2)) (App (Rev l2) (Rev l1)))
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
   99 [2;36m│[0m    
      [2;36m┆[0m     
  104 [2;36m│[0m    // rev_involutive l = ?rev_involutive_rhs
  105 [2;36m│[0m    Rev_involutive <x> (l: List x) : ([1;31mEqual[0m (Rev (Rev l)) l)
      [2;36m│[0m                                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                      [1;31m└Here![0m
  106 [2;36m│[0m    
      [2;36m┆[0m     
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : ([1;31mEqual[0m (Pair (List U60) (List Bool)) (Split [(Pair.new 1 Bool.false),(Pair.new 2 Bool.false)]) (Pair.new [1,2] [Bool.false,Bool.false]))
      [2;36m│[0m                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                  [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  214 [2;36m│[0m    // test_doit3times = Refl
  215 [2;36m│[0m    Test_doit3times : ([1;31mEqual[0m (Doit3times (x => Numbers.minusTwo x) (U60.to_nat 9)) (U60.to_nat 3))
      [2;36m│[0m                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                       [1;31m└Here![0m
  216 [2;36m│[0m    Test_doit3times = Equal.refl
      [2;36m┆[0m     
  219 [2;36m│[0m    // test_doit3times' = Refl
  220 [2;36m│[0m    Test_doit3times2 : ([1;31mEqual[0m (Doit3times (x => Bool.not x) Bool.true) Bool.false)
      [2;36m│[0m                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  221 [2;36m│[0m    Test_doit3times2 = Equal.refl
      [2;36m┆[0m     
  293 [2;36m│[0m    
  294 [2;36m│[0m    Test_filter_even_gt7_1 : ([1;31mEqual[0m (List.filter_even_gt7 [1,2,6,9,10,3,12,8]) ([10,12,8]))
      [2;36m│[0m                              [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                              [1;31m└Here![0m
  295 [2;36m│[0m    Test_filter_even_gt7_1 = Equal.refl
      [2;36m┆[0m     
  314 [2;36m│[0m    
  315 [2;36m│[0m    Test_partition1 : ([1;31mEqual[0m (Partition (x => Nat.odd (U60.to_nat x)) [1,2,3,4,5])  (Pair.new [1,3,5] [2,4]))
      [2;36m│[0m                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                       [1;31m└Here![0m
  316 [2;36m│[0m    Test_partition1 = Equal.refl
  317 [2;36m│[0m    
  318 [2;36m│[0m    Test_partition2 : ([1;31mEqual[0m (Partition (x => Bool.false) [5,9,0]) (Pair.new List.nil [5,9,0]))
      [2;36m│[0m                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                       [1;31m└Here![0m
  319 [2;36m│[0m    Test_partition2 = Equal.refl
      [2;36m┆[0m     
  330 [2;36m│[0m    
  331 [2;36m│[0m    Test_map1 : [1;31mEqual[0m (Map (x => (+ 3 x)) [2,0,2]) [5,3,5]
      [2;36m│[0m                [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                [1;31m└Here![0m
  332 [2;36m│[0m    Test_map1 = Equal.refl
      [2;36m┆[0m     
  352 [2;36m│[0m    
  353 [2;36m│[0m    List.map_app <x> <y> (func: x -> y) (xs: (List x)) (ys: (List x)) : [1;31mEqual[0m (Map func (App xs ys)) (App (Map func xs) (Map func ys)) 
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
  354 [2;36m│[0m    
      [2;36m┆[0m     
  357 [2;36m│[0m    
  358 [2;36m│[0m    List.map_rev <x> <y> (func: x -> y) (l: (List x)) : [1;31mEqual[0m (Map func (Rev l)) (Rev (Map func l))  
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                        [1;31m└Here![0m
  359 [2;36m│[0m    List.map_rev func (List.nil) = Equal.refl
      [2;36m┆[0m     
  387 [2;36m│[0m    
  388 [2;36m│[0m    Test_flat_map1 : ([1;31mEqual[0m (Flat_map  (n => [n,(+ n 1),(+ n 2)]) [1,5,10])  ([1,2,3, 5,6,7, 10,11,12]))
      [2;36m│[0m                      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  389 [2;36m│[0m    Test_flat_map1 = Equal.refl
      [2;36m┆[0m     
  445 [2;36m│[0m    
  446 [2;36m│[0m    Constfun_example1 : [1;31mEqual[0m Bool ((Ftrue) 0n) Bool.true
      [2;36m│[0m                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  447 [2;36m│[0m    Constfun_example1 = Equal.refl
  448 [2;36m│[0m    
  449 [2;36m│[0m    Constfun_example2 : [1;31mEqual[0m Nat ((Constfun 5n) 99n) 5n
      [2;36m│[0m                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  450 [2;36m│[0m    Constfun_example2 = Equal.refl
      [2;36m┆[0m     
  454 [2;36m│[0m    
  455 [2;36m│[0m    Test_plus3_1 : [1;31mEqual[0m Nat ((Plus3) 4n) 7n
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  456 [2;36m│[0m    Test_plus3_1 = Equal.refl
  457 [2;36m│[0m    
  458 [2;36m│[0m    Test_plus3_2 : [1;31mEqual[0m Nat (Doit3times (Plus3) 0n) 9n
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  459 [2;36m│[0m    Test_plus3_2 = Equal.refl
  460 [2;36m│[0m    
  461 [2;36m│[0m    Test_plus3_3 : [1;31mEqual[0m (Doit3times (x => Nat.add 3n x) 0n) 9n
      [2;36m│[0m                   [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  462 [2;36m│[0m    Test_plus3_3 = ?
      [2;36m┆[0m     
  475 [2;36m│[0m    
  476 [2;36m│[0m    Test_fold_length1 : [1;31mEqual[0m Nat (Fold_length [4,7,0]) 3n
      [2;36m│[0m                        [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  477 [2;36m│[0m    Test_fold_length1 = Equal.refl
      [2;36m┆[0m     
  479 [2;36m│[0m    // Prove the correctness of fold_length.
  480 [2;36m│[0m    Fold_length_correct <x> (l : List x) : [1;31mEqual[0m Nat (Fold_length l) (Length l)
      [2;36m│[0m                                           [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                           [1;31m└Here![0m
  481 [2;36m│[0m    Fold_length_correct List.nil = Equal.refl
      [2;36m┆[0m     
  498 [2;36m│[0m    // prove it.
  499 [2;36m│[0m    Fold_map_correct <x> <y> (f: x -> y) (l: List x) : [1;31mEqual[0m (List y) (Fold_map f l) (Map f l)
      [2;36m│[0m                                                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                       [1;31m└Here![0m
  500 [2;36m│[0m    Fold_map_correct f List.nil = Equal.refl
      [2;36m┆[0m     
  526 [2;36m│[0m    
  527 [2;36m│[0m    Uncurry_curry <x> <y> <z> (f: x -> y -> z) (x_val: x) (y_val: y) : [1;31mEqual[0m z (Pair_curry (p => Pair_uncurry f p) x_val y_val) (f x_val y_val)
      [2;36m│[0m                                                                       [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                       [1;31m└Here![0m
  528 [2;36m│[0m    Uncurry_curry f x_val y_val = Equal.refl
  529 [2;36m│[0m    
  530 [2;36m│[0m    Curry_uncurry <x> <y> <z> (f:(Pair x y) -> z) (p: Pair x y) : [1;31mEqual[0m z (Pair_uncurry (x => y => Pair_curry f x y) p) (f p)
      [2;36m│[0m                                                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                                  [1;31m└Here![0m
  531 [2;36m│[0m    Curry_uncurry f (Pair.new fst snd) = Equal.refl
      [2;36m┆[0m     
  582 [2;36m│[0m    // λn.λf.λx. n (λg.λh. h (g f)) (λu. x) (λu. u)
  583 [2;36m│[0m    Pred_1 : [1;31mEqual[0m (Pred Zero) (Zero)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  584 [2;36m│[0m    Pred_1 = Equal.refl
  585 [2;36m│[0m    
  586 [2;36m│[0m    Pred_2 : [1;31mEqual[0m (Pred Two) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  587 [2;36m│[0m    Pred_2 = Equal.refl
  588 [2;36m│[0m    
  589 [2;36m│[0m    Pred_3 : [1;31mEqual[0m (Pred Three) (Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  590 [2;36m│[0m    Pred_3 = Equal.refl
      [2;36m┆[0m     
  594 [2;36m│[0m    
  595 [2;36m│[0m    Sub_1 : [1;31mEqual[0m (Sub One Zero) (One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  596 [2;36m│[0m    Sub_1 = Equal.refl
  597 [2;36m│[0m    
  598 [2;36m│[0m    Sub_2 : [1;31mEqual[0m (Sub Two Two) (Sub One One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  599 [2;36m│[0m    Sub_2 = Equal.refl
  600 [2;36m│[0m    
  601 [2;36m│[0m    Sub_3 : [1;31mEqual[0m (Sub Three One) Two
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  602 [2;36m│[0m    Sub_3 = Equal.refl
      [2;36m┆[0m     
  606 [2;36m│[0m    // λn.λf.λx. f (n f x).
  607 [2;36m│[0m    Succ_1 : [1;31mEqual[0m (Succ Zero) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  608 [2;36m│[0m    Succ_1 = Equal.refl
  609 [2;36m│[0m    
  610 [2;36m│[0m    Succ_2 : [1;31mEqual[0m (Succ One) (Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  611 [2;36m│[0m    Succ_2 = Equal.refl
  612 [2;36m│[0m    
  613 [2;36m│[0m    Succ_3 : [1;31mEqual[0m (Succ Two) (Three)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  614 [2;36m│[0m    Succ_3 = Equal.refl
      [2;36m┆[0m     
  622 [2;36m│[0m    
  623 [2;36m│[0m    Plus_1 : [1;31mEqual[0m (Plus One Zero) (One)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  624 [2;36m│[0m    Plus_1 = Equal.refl
      [2;36m┆[0m     
  627 [2;36m│[0m    
  628 [2;36m│[0m    Plus_2 : [1;31mEqual[0m (Plus Two One) (Plus One Two)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  629 [2;36m│[0m    Plus_2 = Equal.refl
      [2;36m┆[0m     
  636 [2;36m│[0m    
  637 [2;36m│[0m    Plus_3 : [1;31mEqual[0m (Plus (Plus Two Two) Three) (Plus One (Plus Three Three))
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  638 [2;36m│[0m    Plus_3 = Equal.refl
      [2;36m┆[0m     
  645 [2;36m│[0m    
  646 [2;36m│[0m    Mult_1 : [1;31mEqual[0m (Mult One One) One
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  647 [2;36m│[0m    Mult_1 = Equal.refl
      [2;36m┆[0m     
  650 [2;36m│[0m    
  651 [2;36m│[0m    Mult_2 : [1;31mEqual[0m (Mult Zero (Plus Three Three)) Zero
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  652 [2;36m│[0m    Mult_2 = Equal.refl
      [2;36m┆[0m     
  655 [2;36m│[0m    
  656 [2;36m│[0m    Mult_3 : [1;31mEqual[0m (Mult Two Three) (Plus Three Three)
      [2;36m│[0m             [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m             [1;31m└Here![0m
  657 [2;36m│[0m    Mult_3 = Equal.refl
      [2;36m┆[0m     
  671 [2;36m│[0m    // This won’t typecheck under this signature of exp because of 2 instances of two
  672 [2;36m│[0m    Exp_1 : [1;31mEqual[0m (Exp Two Two) (Plus Two Two)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  673 [2;36m│[0m    Exp_1 = Equal.refl
      [2;36m┆[0m     
  675 [2;36m│[0m    // -- exp'_1 = ?exp__1_rhs
  676 [2;36m│[0m    Exp_2 : [1;31mEqual[0m (Exp Three Two) (Plus (Mult Two (Mult Two Two)) One)
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  677 [2;36m│[0m    Exp_2 = Equal.refl
      [2;36m┆[0m     
  679 [2;36m│[0m    // exp'_2 = ?exp__2_rhs
  680 [2;36m│[0m    Exp_3 : [1;31mEqual[0m (Exp Three Zero) One
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  681 [2;36m│[0m    Exp_3 = Equal.refl

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.refl'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:25:16][0m
      [2;36m│[0m
   24 [2;36m│[0m    Test_repeat1 : Equal (Repeat Nat (U60.to_nat 4) (U60.to_nat 2)) (List.cons (U60.to_nat 4) (List.cons (U60.to_nat 4) (List.nil Nat)))
   25 [2;36m│[0m    Test_repeat1 = [1;31mEqual.refl[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   26 [2;36m│[0m    
      [2;36m┆[0m     
   29 [2;36m│[0m    Test_repeat2 : Equal BoolList (Repeat Bool (Bool.false) (U60.to_nat 1)) (List.cons (Bool.false) (List.nil Bool))
   30 [2;36m│[0m    Test_repeat2 = [1;31mEqual.refl[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   31 [2;36m│[0m    
      [2;36m┆[0m     
   71 [2;36m│[0m    Test_rev1 : Equal (Rev (List.nil)) (List.nil)
   72 [2;36m│[0m    Test_rev1 = [1;31mEqual.refl[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m└Here![0m
   73 [2;36m│[0m    // test_rev2 : rev (True௝௞List.nil) = True௝௞List.nil
      [2;36m┆[0m     
   75 [2;36m│[0m    Test_rev2 : Equal (Rev (List.nil)) (List.nil)
   76 [2;36m│[0m    Test_rev2 = [1;31mEqual.refl[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m└Here![0m
   77 [2;36m│[0m    // test_length1 : length (1௝௞2௝௞3௝௞List.nil) = 3
      [2;36m┆[0m     
   79 [2;36m│[0m    Test_length1 : Equal (Length (List.nil)) (Nat.zero)
   80 [2;36m│[0m    Test_length1 = [1;31mEqual.refl[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   81 [2;36m│[0m    // 1.1.6. Exercise: 2 stars, optional (poly_exercises). Here are a few simple exercises, just like ones in the Lists chapter, for practice with polymorphism. Complete
      [2;36m┆[0m     
  156 [2;36m│[0m    Test_split : (Equal (Pair (List U60) (List Bool)) (Split [(Pair.new 1 Bool.false),(Pair.new 2 Bool.false)]) (Pair.new [1,2] [Bool.false,Bool.false]))
  157 [2;36m│[0m    Test_split = [1;31mEqual.refl[0m
      [2;36m│[0m                 [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
  158 [2;36m│[0m    // □
      [2;36m┆[0m     
  215 [2;36m│[0m    Test_doit3times : (Equal (Doit3times (x => Numbers.minusTwo x) (U60.to_nat 9)) (U60.to_nat 3))
  216 [2;36m│[0m    Test_doit3times = [1;31mEqual.refl[0m
      [2;36m│[0m                      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  217 [2;36m│[0m    
      [2;36m┆[0m     
  220 [2;36m│[0m    Test_doit3times2 : (Equal (Doit3times (x => Bool.not x) Bool.true) Bool.false)
  221 [2;36m│[0m    Test_doit3times2 = [1;31mEqual.refl[0m
      [2;36m│[0m                       [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                       [1;31m└Here![0m
  222 [2;36m│[0m    // - Goal: (Equal _ Bool.false Bool.false)
      [2;36m┆[0m     
  294 [2;36m│[0m    Test_filter_even_gt7_1 : (Equal (List.filter_even_gt7 [1,2,6,9,10,3,12,8]) ([10,12,8]))
  295 [2;36m│[0m    Test_filter_even_gt7_1 = [1;31mEqual.refl[0m
      [2;36m│[0m                             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                             [1;31m└Here![0m
  296 [2;36m│[0m    
      [2;36m┆[0m     
  315 [2;36m│[0m    Test_partition1 : (Equal (Partition (x => Nat.odd (U60.to_nat x)) [1,2,3,4,5])  (Pair.new [1,3,5] [2,4]))
  316 [2;36m│[0m    Test_partition1 = [1;31mEqual.refl[0m
      [2;36m│[0m                      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  317 [2;36m│[0m    
  318 [2;36m│[0m    Test_partition2 : (Equal (Partition (x => Bool.false) [5,9,0]) (Pair.new List.nil [5,9,0]))
  319 [2;36m│[0m    Test_partition2 = [1;31mEqual.refl[0m
      [2;36m│[0m                      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  320 [2;36m│[0m    
      [2;36m┆[0m     
  331 [2;36m│[0m    Test_map1 : Equal (Map (x => (+ 3 x)) [2,0,2]) [5,3,5]
  332 [2;36m│[0m    Test_map1 = [1;31mEqual.refl[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m└Here![0m
  333 [2;36m│[0m    
      [2;36m┆[0m     
  358 [2;36m│[0m    List.map_rev <x> <y> (func: x -> y) (l: (List x)) : Equal (Map func (Rev l)) (Rev (Map func l))  
  359 [2;36m│[0m    List.map_rev func (List.nil) = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
  360 [2;36m│[0m    List.map_rev func (List.cons head tail) = 
      [2;36m┆[0m     
  388 [2;36m│[0m    Test_flat_map1 : (Equal (Flat_map  (n => [n,(+ n 1),(+ n 2)]) [1,5,10])  ([1,2,3, 5,6,7, 10,11,12]))
  389 [2;36m│[0m    Test_flat_map1 = [1;31mEqual.refl[0m
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
  390 [2;36m│[0m    // Test_flat_map2 :  Equal (Flat_map (n => [n,n,n]) [1,5,4]) [1,1,1,5,5,5,4,4,4]
      [2;36m┆[0m     
  446 [2;36m│[0m    Constfun_example1 : Equal Bool ((Ftrue) 0n) Bool.true
  447 [2;36m│[0m    Constfun_example1 = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  448 [2;36m│[0m    
  449 [2;36m│[0m    Constfun_example2 : Equal Nat ((Constfun 5n) 99n) 5n
  450 [2;36m│[0m    Constfun_example2 = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  451 [2;36m│[0m    
      [2;36m┆[0m     
  455 [2;36m│[0m    Test_plus3_1 : Equal Nat ((Plus3) 4n) 7n
  456 [2;36m│[0m    Test_plus3_1 = [1;31mEqual.refl[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  457 [2;36m│[0m    
  458 [2;36m│[0m    Test_plus3_2 : Equal Nat (Doit3times (Plus3) 0n) 9n
  459 [2;36m│[0m    Test_plus3_2 = [1;31mEqual.refl[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  460 [2;36m│[0m    
      [2;36m┆[0m     
  476 [2;36m│[0m    Test_fold_length1 : Equal Nat (Fold_length [4,7,0]) 3n
  477 [2;36m│[0m    Test_fold_length1 = [1;31mEqual.refl[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
  478 [2;36m│[0m    
      [2;36m┆[0m     
  480 [2;36m│[0m    Fold_length_correct <x> (l : List x) : Equal Nat (Fold_length l) (Length l)
  481 [2;36m│[0m    Fold_length_correct List.nil = [1;31mEqual.refl[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                   [1;31m└Here![0m
  482 [2;36m│[0m    Fold_length_correct (List.cons head tail) = 
      [2;36m┆[0m     
  499 [2;36m│[0m    Fold_map_correct <x> <y> (f: x -> y) (l: List x) : Equal (List y) (Fold_map f l) (Map f l)
  500 [2;36m│[0m    Fold_map_correct f List.nil = [1;31mEqual.refl[0m
      [2;36m│[0m                                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  501 [2;36m│[0m    Fold_map_correct f (List.cons head tail) = 
      [2;36m┆[0m     
  527 [2;36m│[0m    Uncurry_curry <x> <y> <z> (f: x -> y -> z) (x_val: x) (y_val: y) : Equal z (Pair_curry (p => Pair_uncurry f p) x_val y_val) (f x_val y_val)
  528 [2;36m│[0m    Uncurry_curry f x_val y_val = [1;31mEqual.refl[0m
      [2;36m│[0m                                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  529 [2;36m│[0m    
  530 [2;36m│[0m    Curry_uncurry <x> <y> <z> (f:(Pair x y) -> z) (p: Pair x y) : Equal z (Pair_uncurry (x => y => Pair_curry f x y) p) (f p)
  531 [2;36m│[0m    Curry_uncurry f (Pair.new fst snd) = [1;31mEqual.refl[0m
      [2;36m│[0m                                         [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                         [1;31m└Here![0m
  532 [2;36m│[0m    
      [2;36m┆[0m     
  583 [2;36m│[0m    Pred_1 : Equal (Pred Zero) (Zero)
  584 [2;36m│[0m    Pred_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  585 [2;36m│[0m    
  586 [2;36m│[0m    Pred_2 : Equal (Pred Two) (One)
  587 [2;36m│[0m    Pred_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  588 [2;36m│[0m    
  589 [2;36m│[0m    Pred_3 : Equal (Pred Three) (Two)
  590 [2;36m│[0m    Pred_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  591 [2;36m│[0m    
      [2;36m┆[0m     
  595 [2;36m│[0m    Sub_1 : Equal (Sub One Zero) (One)
  596 [2;36m│[0m    Sub_1 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  597 [2;36m│[0m    
  598 [2;36m│[0m    Sub_2 : Equal (Sub Two Two) (Sub One One)
  599 [2;36m│[0m    Sub_2 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  600 [2;36m│[0m    
  601 [2;36m│[0m    Sub_3 : Equal (Sub Three One) Two
  602 [2;36m│[0m    Sub_3 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  603 [2;36m│[0m    // Successor of a natural number:
      [2;36m┆[0m     
  607 [2;36m│[0m    Succ_1 : Equal (Succ Zero) (One)
  608 [2;36m│[0m    Succ_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  609 [2;36m│[0m    
  610 [2;36m│[0m    Succ_2 : Equal (Succ One) (Two)
  611 [2;36m│[0m    Succ_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  612 [2;36m│[0m    
  613 [2;36m│[0m    Succ_3 : Equal (Succ Two) (Three)
  614 [2;36m│[0m    Succ_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  615 [2;36m│[0m    
      [2;36m┆[0m     
  623 [2;36m│[0m    Plus_1 : Equal (Plus One Zero) (One)
  624 [2;36m│[0m    Plus_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  625 [2;36m│[0m    // plus'_1 : plus' zero one = one
      [2;36m┆[0m     
  628 [2;36m│[0m    Plus_2 : Equal (Plus Two One) (Plus One Two)
  629 [2;36m│[0m    Plus_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  630 [2;36m│[0m    
      [2;36m┆[0m     
  637 [2;36m│[0m    Plus_3 : Equal (Plus (Plus Two Two) Three) (Plus One (Plus Three Three))
  638 [2;36m│[0m    Plus_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  639 [2;36m│[0m    
      [2;36m┆[0m     
  646 [2;36m│[0m    Mult_1 : Equal (Mult One One) One
  647 [2;36m│[0m    Mult_1 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  648 [2;36m│[0m    // mult'_1 : mult' one one = one
      [2;36m┆[0m     
  651 [2;36m│[0m    Mult_2 : Equal (Mult Zero (Plus Three Three)) Zero
  652 [2;36m│[0m    Mult_2 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  653 [2;36m│[0m    // mult'_2 : mult' zero (plus' three three) = zero
      [2;36m┆[0m     
  656 [2;36m│[0m    Mult_3 : Equal (Mult Two Three) (Plus Three Three)
  657 [2;36m│[0m    Mult_3 = [1;31mEqual.refl[0m
      [2;36m│[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m             [1;31m└Here![0m
  658 [2;36m│[0m    // mult'_3 : mult' two three = plus' three three
      [2;36m┆[0m     
  672 [2;36m│[0m    Exp_1 : Equal (Exp Two Two) (Plus Two Two)
  673 [2;36m│[0m    Exp_1 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  674 [2;36m│[0m    // -- exp'_1 : exp' two two = plus' two two
      [2;36m┆[0m     
  676 [2;36m│[0m    Exp_2 : Equal (Exp Three Two) (Plus (Mult Two (Mult Two Two)) One)
  677 [2;36m│[0m    Exp_2 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  678 [2;36m│[0m    // exp'_2 : exp' three two = plus' (mult' two (mult' two two)) one
      [2;36m┆[0m     
  680 [2;36m│[0m    Exp_3 : Equal (Exp Three Zero) One
  681 [2;36m│[0m    Exp_3 = [1;31mEqual.refl[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m            [1;31m└Here![0m
  682 [2;36m│[0m    // exp'_3 : exp' three zero = one

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Pair.new'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:119:6][0m
      [2;36m│[0m
  118 [2;36m│[0m    Fst <x> <y> (pair: Pair x y) : x
  119 [2;36m│[0m    Fst ([1;31mPair.new[0m pair.x pair.y fst snd) = fst
      [2;36m│[0m         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m         [1;31m└Here![0m
  120 [2;36m│[0m    
      [2;36m┆[0m     
  124 [2;36m│[0m    Snd <x> <y> (p: Pair x y) : y
  125 [2;36m│[0m    Snd ([1;31mPair.new[0m pair.x pair.y fst snd) = snd
      [2;36m│[0m         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m         [1;31m└Here![0m
  126 [2;36m│[0m    
      [2;36m┆[0m     
  133 [2;36m│[0m    Zip lx List.nil = List.nil
  134 [2;36m│[0m    Zip (List.cons lx lx.head lx.tail) (List.cons ly ly.head ly.tail) = List.cons ([1;31mPair.new[0m lx.head ly.head) (Zip lx.tail ly.tail)
      [2;36m│[0m                                                                                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                   [1;31m└Here![0m
  135 [2;36m│[0m    
      [2;36m┆[0m     
  148 [2;36m│[0m    Split <x> <y> (l: List (Pair x y)) : Pair (List x) (List y)
  149 [2;36m│[0m    Split x y List.nil = [1;31mPair.new[0m List.nil List.nil
      [2;36m│[0m                         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                         [1;31m└Here![0m
  150 [2;36m│[0m    Split x y (List.cons l pair tail) = 
      [2;36m┆[0m     
  153 [2;36m│[0m      let snd = Snd pair
  154 [2;36m│[0m      Pair.match res (a => (Pair (List x) (List y))) (res.fst => res.snd => ([1;31mPair.new[0m (List.cons fst res.fst) (List.cons snd res.snd)))
      [2;36m│[0m                                                                             [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                             [1;31m└Here![0m
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : (Equal (Pair (List U60) (List Bool)) (Split [([1;31mPair.new[0m 1 Bool.false),([1;31mPair.new[0m 2 Bool.false)]) ([1;31mPair.new[0m [1,2] [Bool.false,Bool.false]))
      [2;36m│[0m                                                               [1;31m┬[0m[1;31m───────[0m                [1;31m┬[0m[1;31m───────[0m                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                               [1;31m│[0m                       [1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                                                               [1;31m│[0m                       [1;31m└Here![0m
      [2;36m│[0m                                                               [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  301 [2;36m│[0m    Partition <x> (test: x -> Bool) (l : List x) : Pair (List x) (List x)
  302 [2;36m│[0m    Partition test List.nil = [1;31mPair.new[0m List.nil List.nil
      [2;36m│[0m                              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                              [1;31m└Here![0m
  303 [2;36m│[0m    Partition test (List.cons head tail) =
      [2;36m┆[0m     
  305 [2;36m│[0m      let f = Filter (x => Bool.not(test x)) (List.cons head tail)
  306 [2;36m│[0m      [1;31mPair.new[0m t f
      [2;36m│[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m      [1;31m└Here![0m
  307 [2;36m│[0m    // partition f xs = ?partition_rhs
      [2;36m┆[0m     
  314 [2;36m│[0m    
  315 [2;36m│[0m    Test_partition1 : (Equal (Partition (x => Nat.odd (U60.to_nat x)) [1,2,3,4,5])  ([1;31mPair.new[0m [1,3,5] [2,4]))
      [2;36m│[0m                                                                                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                                     [1;31m└Here![0m
  316 [2;36m│[0m    Test_partition1 = Equal.refl
  317 [2;36m│[0m    
  318 [2;36m│[0m    Test_partition2 : (Equal (Partition (x => Bool.false) [5,9,0]) ([1;31mPair.new[0m List.nil [5,9,0]))
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
  319 [2;36m│[0m    Test_partition2 = Equal.refl
      [2;36m┆[0m     
  517 [2;36m│[0m    Pair_curry <x> <y> <z> (f: (Pair x y) -> z) (x_val: x) (y_val: y) : z 
  518 [2;36m│[0m    Pair_curry f x_val y_val = f ([1;31mPair.new[0m x_val y_val)
      [2;36m│[0m                                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  519 [2;36m│[0m    
      [2;36m┆[0m     
  524 [2;36m│[0m    Pair_uncurry <x> <y> <z> (f: x -> y -> z) (p: Pair x y) : z
  525 [2;36m│[0m    Pair_uncurry x y z f ([1;31mPair.new[0m fst snd) = (f fst snd) 
      [2;36m│[0m                          [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                          [1;31m└Here![0m
  526 [2;36m│[0m    
      [2;36m┆[0m     
  530 [2;36m│[0m    Curry_uncurry <x> <y> <z> (f:(Pair x y) -> z) (p: Pair x y) : Equal z (Pair_uncurry (x => y => Pair_curry f x y) p) (f p)
  531 [2;36m│[0m    Curry_uncurry f ([1;31mPair.new[0m fst snd) = Equal.refl
      [2;36m│[0m                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                     [1;31m└Here![0m
  532 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe.some'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:171:48][0m
      [2;36m│[0m
  170 [2;36m│[0m    Nth_error x List.nil n = (Maybe.none x)
  171 [2;36m│[0m    Nth_error x (List.cons l head tail) Nat.zero = [1;31mMaybe.some[0m head
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
  172 [2;36m│[0m    Nth_error x (List.cons l head tail) (Nat.succ n) = Nth_error tail n
      [2;36m┆[0m     
  190 [2;36m│[0m    Hd_error x (List.nil l) = (Maybe.none x)
  191 [2;36m│[0m    Hd_error x (List.cons l head tail) = ([1;31mMaybe.some[0m head)
      [2;36m│[0m                                          [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                          [1;31m└Here![0m
  192 [2;36m│[0m    
      [2;36m┆[0m     
  397 [2;36m│[0m    Maybe_map f Maybe.none = Maybe.none
  398 [2;36m│[0m    Maybe_map f ([1;31mMaybe.some[0m x) = [1;31mMaybe.some[0m (f x)
      [2;36m│[0m                 [1;31m┬[0m[1;31m─────────[0m      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                 [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
  399 [2;36m│[0m    
      [2;36m┆[0m     
  536 [2;36m│[0m    Nth_error_informal List.nil n = Maybe.none 
  537 [2;36m│[0m    Nth_error_informal (List.cons head tail) Nat.zero =  [1;31mMaybe.some[0m head 
      [2;36m│[0m                                                         [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                                                         [1;31m└Here![0m
  538 [2;36m│[0m    Nth_error_informal (List.cons head tail) (Nat.succ n) =  Nth_error tail n

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.and'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:285:17][0m
      [2;36m│[0m
  284 [2;36m│[0m    List.filter_even_gt7 (l: List U60) : List U60 {
  285 [2;36m│[0m      Filter (x => ([1;31mBool.and[0m (U60.to_bool (> x 7)) (U60.to_bool (== 0 (% x 2))))) l
      [2;36m│[0m                    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                    [1;31m└Here![0m
  286 [2;36m│[0m    }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:18:39][0m
      [2;36m│[0m
   17 [2;36m│[0m    // repeat x_ty x (S count') = x ௝௞ repeat x_ty x count'
   18 [2;36m│[0m    Repeat <x_ty: Type> (x: x_ty) (count: [1;31mNat[0m) : List x_ty
      [2;36m│[0m                                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                          [1;31m└Here![0m
   19 [2;36m│[0m    Repeat x_ty x Nat.zero = (List.nil x_ty)
      [2;36m┆[0m     
   23 [2;36m│[0m    // test_repeat1 = Refl
   24 [2;36m│[0m    Test_repeat1 : Equal (Repeat [1;31mNat[0m (U60.to_nat 4) (U60.to_nat 2)) (List.cons (U60.to_nat 4) (List.cons (U60.to_nat 4) (List.nil [1;31mNat[0m)))
      [2;36m│[0m                                 [1;31m┬[0m[1;31m──[0m                                                                                              [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                 [1;31m│[0m                                                                                                [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m└Here![0m
   25 [2;36m│[0m    Test_repeat1 = Equal.refl
      [2;36m┆[0m     
   65 [2;36m│[0m    
   66 [2;36m│[0m    Length <x> (l: List x) : [1;31mNat[0m
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m└Here![0m
   67 [2;36m│[0m    Length List.nil = Nat.zero
      [2;36m┆[0m     
   92 [2;36m│[0m    // app_length l1 l2 = ?app_length_rhs
   93 [2;36m│[0m    App_length <x> (l1: List x) (l2: List x) : (Equal [1;31mNat[0m (Length (App l1 l2)) (Nat.add (Length l1) (Length l2)))
      [2;36m│[0m                                                      [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                      [1;31m└Here![0m
   94 [2;36m│[0m    
      [2;36m┆[0m     
  168 [2;36m│[0m    
  169 [2;36m│[0m    Nth_error <x> (l: List x) (n: [1;31mNat[0m) : Option x
      [2;36m│[0m                                  [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  170 [2;36m│[0m    Nth_error x List.nil n = (Maybe.none x)
      [2;36m┆[0m     
  207 [2;36m│[0m    
  208 [2;36m│[0m    Numbers.minusTwo (n: [1;31mNat[0m) : [1;31mNat[0m
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
  209 [2;36m│[0m    Numbers.minusTwo Nat.zero = Nat.zero
      [2;36m┆[0m     
  248 [2;36m│[0m    // test_filter2 = Refl
  249 [2;36m│[0m    Nat.odd (n: [1;31mNat[0m) : Bool
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m└Here![0m
  250 [2;36m│[0m    Nat.odd Nat.zero = Bool.false
      [2;36m┆[0m     
  255 [2;36m│[0m    // countoddmembers' l = length (filter Numbers.oddb l)
  256 [2;36m│[0m    Countoddmembers (l: List [1;31mNat[0m) : [1;31mNat[0m
      [2;36m│[0m                             [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                             [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                             [1;31m└Here![0m
  257 [2;36m│[0m    Countoddmembers l = Length (Filter (x => Nat.odd x) l)
      [2;36m┆[0m     
  439 [2;36m│[0m    
  440 [2;36m│[0m    Constfun <y> (x: y) : [1;31mNat[0m -> y
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m└Here![0m
  441 [2;36m│[0m    Constfun x = y => x
  442 [2;36m│[0m    
  443 [2;36m│[0m    Ftrue : [1;31mNat[0m -> Bool
      [2;36m│[0m            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m            [1;31m└Here![0m
  444 [2;36m│[0m    Ftrue = Constfun Bool.true
      [2;36m┆[0m     
  448 [2;36m│[0m    
  449 [2;36m│[0m    Constfun_example2 : Equal [1;31mNat[0m ((Constfun 5n) 99n) 5n
      [2;36m│[0m                              [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                              [1;31m└Here![0m
  450 [2;36m│[0m    Constfun_example2 = Equal.refl
  451 [2;36m│[0m    
  452 [2;36m│[0m    Plus3 : [1;31mNat[0m -> [1;31mNat[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m            [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m            [1;31m└Here![0m
  453 [2;36m│[0m    Plus3 = n => Nat.add 3n n
  454 [2;36m│[0m    
  455 [2;36m│[0m    Test_plus3_1 : Equal [1;31mNat[0m ((Plus3) 4n) 7n
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m└Here![0m
  456 [2;36m│[0m    Test_plus3_1 = Equal.refl
  457 [2;36m│[0m    
  458 [2;36m│[0m    Test_plus3_2 : Equal [1;31mNat[0m (Doit3times (Plus3) 0n) 9n
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m└Here![0m
  459 [2;36m│[0m    Test_plus3_2 = Equal.refl
      [2;36m┆[0m     
  472 [2;36m│[0m    // fold_length l = fold (\_, n ౬> S n) l 0
  473 [2;36m│[0m    Fold_length <x> (l: List x) : [1;31mNat[0m
      [2;36m│[0m                                  [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                  [1;31m└Here![0m
  474 [2;36m│[0m    Fold_length l = Fold (n => n => (Nat.succ n)) l 0n
  475 [2;36m│[0m    
  476 [2;36m│[0m    Test_fold_length1 : Equal [1;31mNat[0m (Fold_length [4,7,0]) 3n
      [2;36m│[0m                              [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                              [1;31m└Here![0m
  477 [2;36m│[0m    Test_fold_length1 = Equal.refl
      [2;36m┆[0m     
  479 [2;36m│[0m    // Prove the correctness of fold_length.
  480 [2;36m│[0m    Fold_length_correct <x> (l : List x) : Equal [1;31mNat[0m (Fold_length l) (Length l)
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                 [1;31m└Here![0m
  481 [2;36m│[0m    Fold_length_correct List.nil = Equal.refl
      [2;36m┆[0m     
  534 [2;36m│[0m    // of the nth_error function:
  535 [2;36m│[0m    Nth_error_informal <x> (l: List x) (n: [1;31mNat[0m) : Maybe x
      [2;36m│[0m                                           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                           [1;31m└Here![0m
  536 [2;36m│[0m    Nth_error_informal List.nil n = Maybe.none 

      [1;36mHint:[0m [36mMaybe you're looking for 'Nat.odd'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.not'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:220:45][0m
      [2;36m│[0m
  219 [2;36m│[0m    // test_doit3times' = Refl
  220 [2;36m│[0m    Test_doit3times2 : (Equal (Doit3times (x => [1;31mBool.not[0m x) Bool.true) Bool.false)
      [2;36m│[0m                                                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                                [1;31m└Here![0m
  221 [2;36m│[0m    Test_doit3times2 = Equal.refl
      [2;36m┆[0m     
  304 [2;36m│[0m      let t = Filter (x => test x) (List.cons head tail)
  305 [2;36m│[0m      let f = Filter (x => [1;31mBool.not[0m(test x)) (List.cons head tail)
      [2;36m│[0m                           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                           [1;31m└Here![0m
  306 [2;36m│[0m      Pair.new t f

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.equal'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:245:17][0m
      [2;36m│[0m
  244 [2;36m│[0m    Length_is_1 <x> (l: List x ) : Bool
  245 [2;36m│[0m    Length_is_1 l = [1;31mNat.equal[0m (Length l) (Nat.succ Nat.zero)
      [2;36m│[0m                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
  246 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:156:33][0m
      [2;36m│[0m
  155 [2;36m│[0m    
  156 [2;36m│[0m    Test_split : (Equal (Pair (List [1;31mU60[0m) (List Bool)) (Split [(Pair.new 1 Bool.false),(Pair.new 2 Bool.false)]) (Pair.new [1,2] [Bool.false,Bool.false]))
      [2;36m│[0m                                    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                    [1;31m└Here![0m
  157 [2;36m│[0m    Test_split = Equal.refl
      [2;36m┆[0m     
  283 [2;36m│[0m    
  284 [2;36m│[0m    List.filter_even_gt7 (l: List [1;31mU60[0m) : List [1;31mU60[0m {
      [2;36m│[0m                                  [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                  [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                  [1;31m└Here![0m
  285 [2;36m│[0m      Filter (x => (Bool.and (U60.to_bool (> x 7)) (U60.to_bool (== 0 (% x 2))))) l

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.to_bool'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:285:27][0m
      [2;36m│[0m
  284 [2;36m│[0m    List.filter_even_gt7 (l: List U60) : List U60 {
  285 [2;36m│[0m      Filter (x => (Bool.and ([1;31mU60.to_bool[0m (> x 7)) ([1;31mU60.to_bool[0m (== 0 (% x 2))))) l
      [2;36m│[0m                              [1;31m┬[0m[1;31m──────────[0m           [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                              [1;31m│[0m                     [1;31m└Here![0m
      [2;36m│[0m                              [1;31m└Here![0m
  286 [2;36m│[0m    }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe'.[0m

[2;36m      ┌──[IINS/Book/ch_05.kind2:162:12][0m
      [2;36m│[0m
  161 [2;36m│[0m    Option (x) : Type
  162 [2;36m│[0m    Option x = [1;31mMaybe[0m x 
      [2;36m│[0m               [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m               [1;31m└Here![0m
  163 [2;36m│[0m    //  Maybe x
      [2;36m┆[0m     
  395 [2;36m│[0m    
  396 [2;36m│[0m    Maybe_map <x> <y> (f:x -> y) (m: [1;31mMaybe[0m x) : [1;31mMaybe[0m y
      [2;36m│[0m                                     [1;31m┬[0m[1;31m────[0m      [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                     [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                                     [1;31m└Here![0m
  397 [2;36m│[0m    Maybe_map f Maybe.none = Maybe.none
      [2;36m┆[0m     
  534 [2;36m│[0m    // of the nth_error function:
  535 [2;36m│[0m    Nth_error_informal <x> (l: List x) (n: Nat) : [1;31mMaybe[0m x
      [2;36m│[0m                                                  [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                                                  [1;31m└Here![0m
  536 [2;36m│[0m    Nth_error_informal List.nil n = Maybe.none 

      [1;36mHint:[0m [36mMaybe you're looking for 'Maybe_map'[0m

    [1;41m FAILED [0m Took 0.0s, 24 errors


  [1;42m CHECKING [0m The file './IINS/Book/ch_07.kind2'
  [1;44m INFO [0m [1mInspection[0m

      [1;34m•[0m [1mHole:[0m [1;34m(In _ head tail)[0m 

      [1;34m•[0m Context
      [1;34m•[0m [1mt    :[0m [1;34mType[0m 
      [1;34m•[0m [1mx    :[0m [1;34mt[0m 
      [1;34m•[0m [1mu    :[0m [1;34mType[0m 
      [1;34m•[0m [2mu    =[0m [2mt[0m 
      [1;34m•[0m [1mhead :[0m [1;34mu[0m 
      [1;34m•[0m [1mtail :[0m [1;34m(Data.List u)[0m 
      [1;34m•[0m [1ml2   :[0m [1;34m(Data.List t)[0m 
      [1;34m•[0m [1ml    :[0m [1;34mType[0m 
      [1;34m•[0m [2ml    =[0m [2m(Prop.Equal _ x head)[0m 
      [1;34m•[0m [1mr    :[0m [1;34mType[0m 
      [1;34m•[0m [2mr    =[0m [2m(In _ x tail)[0m 
      [1;34m•[0m [1mval  :[0m [1;34mr[0m 
      [1;34m•[0m [1mi2   :[0m [1;34m(In _ x l2)[0m 
      [1;34m•[0m [1mlt   :[0m [1;34m(Le (Data.Nat.succ (Data.Nat.succ (Data.List.length _ tail))) (Data.List.length _ l2))[0m 

[2;36m      ┌──[IINS/Book/ch_07.kind2:1552:104][0m
      [2;36m│[0m
 1551 [2;36m│[0m    Pigeonhole_principle t x Data.List.nil l2 i1 i2 lt = Data.Empty.absurd i1
 1552 [2;36m│[0m    Pigeonhole_principle t x (Data.List.cons u head tail) l2 (Data.Either.right l r val) i2 lt = Repeats.r [1;34m?[0m
      [2;36m│[0m                                                                                                           [1;34m┬[0m[1;34m[0m
      [2;36m│[0m                                                                                                           [1;34m└Here![0m
 1553 [2;36m│[0m    // pigeonhole_principle : ((x : t) ౏> In x l1 ౏> In x l2) ౏>


    [1;41m FAILED [0m Took 0.5s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Book/tempCodeRunnerFile.kind2'
  [1;41m ERROR [0m [1mUnexpected token 'tail'.[0m

[2;36m      ┌──[IINS/Book/tempCodeRunnerFile.kind2:1:1][0m
      [2;36m│[0m
    1 [2;36m│[0m    [1;31mtail[0m
      [2;36m│[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m    [1;31m└Here![0m


    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Book/ch_06.kind2'
  [1;44m INFO [0m [1mInspection[0m

      [1;34m•[0m [1mHole:[0m [1;34m(Data.Either (Prop.Equal Data.Nat n 0n) (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n)))[0m 

      [1;34m•[0m Context
      [1;34m•[0m [1mn   :[0m [1;34mData.Nat[0m 
      [1;34m•[0m [1mm   :[0m [1;34mData.Nat[0m 
      [1;34m•[0m [1mp   :[0m [1;34mData.Nat[0m 
      [1;34m•[0m [1me   :[0m [1;34m(Prop.Equal Data.Nat (Data.Nat.mul n (Data.Nat.mul m p)) 0n)[0m 
      [1;34m•[0m [1msnd :[0m [1;34m((x_1 : (Data.Either (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n)) (Prop.Equal Data.Nat n 0n))) -> (Data.Either (Prop.Equal Data.Nat m 0n) (Data.Either (Prop.Equal Data.Nat p 0n) (Prop.Equal Data.Nat n 0n))))[0m 
      [1;34m•[0m [2msnd =[0m [2m(y => (Fro_or_assoc (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n) (Prop.Equal Data.Nat n 0n) y))[0m 
      [1;34m•[0m [1mauy :[0m [1;34m((x_2 : (Prop.Equal Data.Nat (Data.Nat.mul m p) 0n)) -> (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n)))[0m 
      [1;34m•[0m [2mauy =[0m [2m(Data.Pair.fst ((x_1 : (Prop.Equal Data.Nat (Data.Nat.mul m p) 0n)) -> (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n))) ((x_2 : (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n))) -> (Prop.Equal Data.Nat (Data.Nat.mul m p) 0n)) (Mult_0 m p))[0m 

[2;36m      ┌──[IINS/Book/ch_06.kind2:569:2][0m
      [2;36m│[0m
  568 [2;36m│[0m    	// Data.Either.swap ?
  569 [2;36m│[0m    	[1;34m?[0m
      [2;36m│[0m    	[1;34m┬[0m[1;34m[0m
      [2;36m│[0m    	[1;34m└Here![0m
  570 [2;36m│[0m    // To_mult_0_3.Aux (m: Data.Nat) (p: Data.Nat) (e: (Prop.Equal Data.Nat (Data.Nat.mul m p) 0n)) : (Data.Either (Prop.Equal Data.Nat m 0n) (Prop.Equal Data.Nat p 0n))


    [1;41m FAILED [0m Took 0.4s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Book/test.kind2'
     [1;42m STATS [0m Rewrites: 617148
   [1;42m CHECKED [0m All terms checked. took 0.30s


  [1;42m CHECKING [0m The file './IINS/Neos/comb.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:32:17][0m
      [2;36m│[0m
   31 [2;36m│[0m    U60.to_bool 0 = Bool.false
   32 [2;36m│[0m    U60.to_bool n = [1;31mBool.true[0m
      [2;36m│[0m                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
   33 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.Bool.true'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.false'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:31:17][0m
      [2;36m│[0m
   30 [2;36m│[0m    U60.to_bool (n: U60) : Bool
   31 [2;36m│[0m    U60.to_bool 0 = [1;31mBool.false[0m
      [2;36m│[0m                    [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
   32 [2;36m│[0m    U60.to_bool n = Bool.true

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.Bool.false'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:30:24][0m
      [2;36m│[0m
   29 [2;36m│[0m    
   30 [2;36m│[0m    U60.to_bool (n: U60) : [1;31mBool[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
   31 [2;36m│[0m    U60.to_bool 0 = Bool.false
      [2;36m┆[0m     
   33 [2;36m│[0m    
   34 [2;36m│[0m    List.filter <a> (xs: List a) (cond: a -> [1;31mBool[0m) : List a
      [2;36m│[0m                                             [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   35 [2;36m│[0m    List.filter a (List.nil t)            cond = List.nil

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.concat'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:121:125][0m
      [2;36m│[0m
  120 [2;36m│[0m      // let f = (Combination.go c (+ start 1) end idx r acum)
  121 [2;36m│[0m      (U60.if (== idx r) (Combination.go (- c 1) start end 0 r acum) (U60.if fun (Combination.go c (+ start 1) end (+ idx 1) r ([1;31mList.concat[0m acum [(+ start 1)])) (Combination.go c (+ start 1) end idx r acum)))
      [2;36m│[0m                                                                                                                                [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                                                                                                                                [1;31m└Here![0m
  122 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'List.match', 'List.cons'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:13:22][0m
      [2;36m│[0m
   12 [2;36m│[0m    
   13 [2;36m│[0m    U60.if <r: Type> (n: [1;31mU60[0m) (t: r) (f: r) : r
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m└Here![0m
   14 [2;36m│[0m    U60.if 0 t f = f
      [2;36m┆[0m     
   16 [2;36m│[0m    
   17 [2;36m│[0m    List.length <a> (xs: List a) : [1;31mU60[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                   [1;31m└Here![0m
   18 [2;36m│[0m    List.length a (List.nil t)            = 0
      [2;36m┆[0m     
   20 [2;36m│[0m    
   21 [2;36m│[0m    List.delete (f: [1;31mU60[0m -> [1;31mU60[0m) (xs: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m                    [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                    [1;31m│[0m      [1;31m│[0m              [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m      [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                    [1;31m└Here![0m
   22 [2;36m│[0m    List.delete f (List.nil )         = List.nil
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    List.delete_all (v: [1;31mU60[0m) (s: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                        [1;31m│[0m             [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   27 [2;36m│[0m    List.delete_all v List.nil = []
   28 [2;36m│[0m    List.delete_all v (List.cons head tail) = if (U60.equal v head) {(List.delete_all v tail)} else {(List.cons [1;31mU60[0m head (List.delete_all v tail))}
      [2;36m│[0m                                                                                                                [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                                                                                [1;31m└Here![0m
   29 [2;36m│[0m    
   30 [2;36m│[0m    U60.to_bool (n: [1;31mU60[0m) : Bool
      [2;36m│[0m                    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                    [1;31m└Here![0m
   31 [2;36m│[0m    U60.to_bool 0 = Bool.false
      [2;36m┆[0m     
   42 [2;36m│[0m    
   43 [2;36m│[0m    Loto.list_result : List (List [1;31mU60[0m) {
      [2;36m│[0m                                  [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                  [1;31m└Here![0m
   44 [2;36m│[0m      do List {
      [2;36m┆[0m     
   53 [2;36m│[0m    
   54 [2;36m│[0m    U60.interval (start: [1;31mU60[0m) (stop: [1;31mU60[0m) (step: [1;31mU60[0m) : List [1;31mU60[0m{
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m│[0m           [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
      [2;36m┆[0m     
   55 [2;36m│[0m    	U60.if (>= start stop) (List.nil [1;31mU60[0m) (
      [2;36m│[0m                                     	[1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                     	[1;31m└Here![0m
   56 [2;36m│[0m    		List.cons (+ start step) (U60.interval (+ start step) stop step)
      [2;36m┆[0m     
   59 [2;36m│[0m    
   60 [2;36m│[0m    U60.fac (n: [1;31mU60[0m) : [1;31mU60[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   61 [2;36m│[0m    U60.fac 0 = 1
      [2;36m┆[0m     
   63 [2;36m│[0m    
   64 [2;36m│[0m    U60.comb (n: [1;31mU60[0m) (p: [1;31mU60[0m) : [1;31mU60[0m
      [2;36m│[0m                 [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                 [1;31m│[0m        [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                 [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   65 [2;36m│[0m    U60.comb n p =
      [2;36m┆[0m     
   69 [2;36m│[0m    
   70 [2;36m│[0m    Comb (xs: List [1;31mU60[0m) : List (List [1;31mU60[0m)
      [2;36m│[0m                   [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                   [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                   [1;31m└Here![0m
   71 [2;36m│[0m    Comb List.nil = List.nil
      [2;36m┆[0m     
  110 [2;36m│[0m    // }
  111 [2;36m│[0m    Combination (n: [1;31mU60[0m) (r: [1;31mU60[0m) : List (List [1;31mU60[0m) {
      [2;36m│[0m                    [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                    [1;31m│[0m        [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                    [1;31m└Here![0m
  112 [2;36m│[0m    	Combination.go (U60.comb n r) 0 n 0 r [] 
  113 [2;36m│[0m    }
  114 [2;36m│[0m    Combination.go (c: [1;31mU60[0m) (start: [1;31mU60[0m) (end: [1;31mU60[0m) (idx: [1;31mU60[0m) (r: [1;31mU60[0m) (acum: List [1;31mU60[0m) : List (List [1;31mU60[0m) 
      [2;36m│[0m                       [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m              [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m│[0m                [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                       [1;31m└Here![0m
  115 [2;36m│[0m    Combination.go 0 start end idx r acum = [acum]

      [1;36mHint:[0m [36mMaybe you're looking for 'U60.fac', 'U60.if'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.equal'.[0m

[2;36m      ┌──[IINS/Neos/comb.kind2:28:47][0m
      [2;36m│[0m
   27 [2;36m│[0m    List.delete_all v List.nil = []
   28 [2;36m│[0m    List.delete_all v (List.cons head tail) = if ([1;31mU60.equal[0m v head) {(List.delete_all v tail)} else {(List.cons U60 head (List.delete_all v tail))}
      [2;36m│[0m                                                  [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                  [1;31m└Here![0m
   29 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 6 errors


  [1;42m CHECKING [0m The file './IINS/Neos/natal.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Nat.add'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:4:53][0m
      [2;36m│[0m
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( [1;31mNat.add[0m(Nat.div o 2n) 2n)) 
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                        [1;31m└Here![0m
    5 [2;36m│[0m      (Bool.if ( Nat.equal n m ) (String.concat (String.repeat " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:2:12][0m
      [2;36m│[0m
    1 [2;36m│[0m    Arvore (n: Nat) (m: Nat) (o: Nat) : String
    2 [2;36m│[0m    Arvore n m [1;31mNat.zero[0m       = String.concat " " " "     
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m└Here![0m
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'String'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:1:37][0m
      [2;36m│[0m
    1 [2;36m│[0m    Arvore (n: Nat) (m: Nat) (o: Nat) : [1;31mString[0m
      [2;36m│[0m                                        [1;31m┬[0m[1;31m─────[0m
      [2;36m│[0m                                        [1;31m└Here![0m
    2 [2;36m│[0m    Arvore n m Nat.zero       = String.concat " " " "     
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 
      [2;36m┆[0m     
   11 [2;36m│[0m    
   12 [2;36m│[0m    Natal : [1;31mString[0m
      [2;36m│[0m            [1;31m┬[0m[1;31m─────[0m
      [2;36m│[0m            [1;31m└Here![0m
   13 [2;36m│[0m    Natal = (Arvore 9n 0n 10n)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.if'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:5:4][0m
      [2;36m│[0m
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
    5 [2;36m│[0m      ([1;31mBool.if[0m ( Nat.equal n m ) (String.concat (String.repeat " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m│[0m       [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m       [1;31m└Here![0m
    6 [2;36m│[0m      (String.concat (
    7 [2;36m│[0m        [1;31mBool.if[0m (Nat.is_odd m)   
      [2;36m│[0m        [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m        [1;31m└Here![0m
    8 [2;36m│[0m          (String.concat ""(String.repeat "\x1b[32m*\x1b[0m " m))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:3:13][0m
      [2;36m│[0m
    2 [2;36m│[0m    Arvore n m Nat.zero       = String.concat " " " "     
    3 [2;36m│[0m    Arvore n m ([1;31mNat.succ[0m o)              = 
      [2;36m│[0m                [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                [1;31m└Here![0m
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
      [2;36m┆[0m     
    9 [2;36m│[0m          (String.concat " "(String.repeat "\x1b[32m*\x1b[0m\x1b[31m°\x1b[0m\x1b[32m*\x1b[0m " (Nat.div m 2n))))
   10 [2;36m│[0m      (String.concat "\n" (Arvore n ([1;31mNat.succ[0m m) o)))))
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
   11 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:1:12][0m
      [2;36m│[0m
    1 [2;36m│[0m    Arvore (n: [1;31mNat[0m) (m: [1;31mNat[0m) (o: [1;31mNat[0m) : String
      [2;36m│[0m               [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m               [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
    2 [2;36m│[0m    Arvore n m Nat.zero       = String.concat " " " "     
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 

      [1;36mHint:[0m [36mMaybe you're looking for 'Natal'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.div'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:4:61][0m
      [2;36m│[0m
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add([1;31mNat.div[0m o 2n) 2n)) 
      [2;36m│[0m                                                                [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                [1;31m└Here![0m
    5 [2;36m│[0m      (Bool.if ( Nat.equal n m ) (String.concat (String.repeat " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m┆[0m     
    8 [2;36m│[0m          (String.concat ""(String.repeat "\x1b[32m*\x1b[0m " m))
    9 [2;36m│[0m          (String.concat " "(String.repeat "\x1b[32m*\x1b[0m\x1b[31m°\x1b[0m\x1b[32m*\x1b[0m " ([1;31mNat.div[0m m 2n))))
      [2;36m│[0m                                                                                                [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                                                [1;31m└Here![0m
   10 [2;36m│[0m      (String.concat "\n" (Arvore n (Nat.succ m) o)))))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.equal'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:5:14][0m
      [2;36m│[0m
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
    5 [2;36m│[0m      (Bool.if ( [1;31mNat.equal[0m n m ) (String.concat (String.repeat " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m│[0m                 [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
    6 [2;36m│[0m      (String.concat (

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.sub'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:5:65][0m
      [2;36m│[0m
    4 [2;36m│[0m    (String.concat ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
    5 [2;36m│[0m      (Bool.if ( Nat.equal n m ) (String.concat (String.repeat " " ([1;31mNat.sub[0m m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m│[0m                                                                    [1;31m┬[0m[1;31m──────[0m
      [2;36m│[0m                                                                    [1;31m└Here![0m
    6 [2;36m│[0m      (String.concat (

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'String.repeat'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:4:18][0m
      [2;36m│[0m
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 
    4 [2;36m│[0m    (String.concat ( [1;31mString.repeat[0m "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
      [2;36m│[0m                     [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
      [2;36m┆[0m     
    5 [2;36m│[0m      (Bool.if ( Nat.equal n m ) (String.concat ([1;31mString.repeat[0m " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m│[0m                                                 [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                                                 [1;31m└Here![0m
    6 [2;36m│[0m      (String.concat (
    7 [2;36m│[0m        Bool.if (Nat.is_odd m)   
    8 [2;36m│[0m          (String.concat ""([1;31mString.repeat[0m "\x1b[32m*\x1b[0m " m))
      [2;36m│[0m                            [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                            [1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m          (String.concat " "([1;31mString.repeat[0m "\x1b[32m*\x1b[0m\x1b[31m°\x1b[0m\x1b[32m*\x1b[0m " (Nat.div m 2n))))
      [2;36m│[0m                             [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                             [1;31m└Here![0m
   10 [2;36m│[0m      (String.concat "\n" (Arvore n (Nat.succ m) o)))))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.is_odd'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:7:14][0m
      [2;36m│[0m
    6 [2;36m│[0m      (String.concat (
    7 [2;36m│[0m        Bool.if ([1;31mNat.is_odd[0m m)   
      [2;36m│[0m                 [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
    8 [2;36m│[0m          (String.concat ""(String.repeat "\x1b[32m*\x1b[0m " m))

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'String.concat'.[0m

[2;36m      ┌──[IINS/Neos/natal.kind2:2:29][0m
      [2;36m│[0m
    1 [2;36m│[0m    Arvore (n: Nat) (m: Nat) (o: Nat) : String
    2 [2;36m│[0m    Arvore n m Nat.zero       = [1;31mString.concat[0m " " " "     
      [2;36m│[0m                                [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                                [1;31m└Here![0m
    3 [2;36m│[0m    Arvore n m (Nat.succ o)              = 
    4 [2;36m│[0m    ([1;31mString.concat[0m ( String.repeat "\x1b[8m. \x1b[0m" ( Nat.add(Nat.div o 2n) 2n)) 
      [2;36m│[0m     [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m     [1;31m└Here![0m
      [2;36m┆[0m     
    5 [2;36m│[0m      (Bool.if ( Nat.equal n m ) ([1;31mString.concat[0m (String.repeat " " (Nat.sub m 5n)) "   |_| \n  \x1b[34m     FELIZ NATAL \x1b[0m") 
      [2;36m│[0m                                  [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m                                  [1;31m└Here![0m
      [2;36m┆[0m     
    6 [2;36m│[0m      ([1;31mString.concat[0m (
      [2;36m│[0m       [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m       [1;31m└Here![0m
    7 [2;36m│[0m        Bool.if (Nat.is_odd m)   
    8 [2;36m│[0m          ([1;31mString.concat[0m ""(String.repeat "\x1b[32m*\x1b[0m " m))
      [2;36m│[0m           [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m           [1;31m└Here![0m
      [2;36m┆[0m     
    9 [2;36m│[0m          ([1;31mString.concat[0m " "(String.repeat "\x1b[32m*\x1b[0m\x1b[31m°\x1b[0m\x1b[32m*\x1b[0m " (Nat.div m 2n))))
      [2;36m│[0m           [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m           [1;31m└Here![0m
      [2;36m┆[0m     
   10 [2;36m│[0m      ([1;31mString.concat[0m "\n" (Arvore n (Nat.succ m) o)))))
      [2;36m│[0m       [1;31m┬[0m[1;31m────────────[0m
      [2;36m│[0m       [1;31m└Here![0m
   11 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 12 errors


  [1;42m CHECKING [0m The file './IINS/Neos/100sort.kind2'
  [1;41m ERROR [0m [1mDefined multiple times for the same name[0m

[2;36m      ┌──[IINS/Neos/100sort.kind2:32:1][0m
      [2;36m│[0m
   31 [2;36m│[0m    //Declaro o tipo do turno = Word 5
   32 [2;36m│[0m    [1;31mCsrt.state.turn[0m : Type { Word(Csrt.state.turn.tam) }
      [2;36m│[0m    [1;31m┬[0m[1;31m──────────────[0m
      [2;36m│[0m    [1;31m└The first ocorrence[0m
   33 [2;36m│[0m    
      [2;36m┆[0m     
   51 [2;36m│[0m    [1;34mCsrt.state.turn[0m (csrt: Csrt.state ) : Csrt.state.turn
      [2;36m│[0m    [1;34m┬[0m[1;34m──────────────[0m
      [2;36m│[0m    [1;34m└Second occorrence here![0m

      [1;36mHint:[0m [36mRename one of the definitions or remove and look at how names work in Kind at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './IINS/Neos/kk.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Equal'.[0m

[2;36m      ┌──[IINS/Neos/kk.kind2:18:23][0m
      [2;36m│[0m
   17 [2;36m│[0m    
   18 [2;36m│[0m    Inv_Equal (xs: Foo) : [1;31mEqual[0m Foo xs (Inv (Inv xs))
      [2;36m│[0m                          [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                          [1;31m└Here![0m
   19 [2;36m│[0m    Inv_Equal (Foo.tic f) = Equal.apply (x => Foo.tic x) (Inv_Equal f) 

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Equal.apply'.[0m

[2;36m      ┌──[IINS/Neos/kk.kind2:19:25][0m
      [2;36m│[0m
   18 [2;36m│[0m    Inv_Equal (xs: Foo) : Equal Foo xs (Inv (Inv xs))
   19 [2;36m│[0m    Inv_Equal (Foo.tic f) = [1;31mEqual.apply[0m (x => Foo.tic x) (Inv_Equal f) 
      [2;36m│[0m                            [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                            [1;31m└Here![0m
      [2;36m┆[0m     
   20 [2;36m│[0m    Inv_Equal (Foo.tac f) = [1;31mEqual.apply[0m (x => Foo.tac x) (Inv_Equal f) 
      [2;36m│[0m                            [1;31m┬[0m[1;31m──────────[0m
      [2;36m│[0m                            [1;31m└Here![0m

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 2 errors


  [1;42m CHECKING [0m The file './IINS/Neos/testlang.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'Nat.zero'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:126:5][0m
      [2;36m│[0m
  125 [2;36m│[0m    Odd (n: Nat) : Bool // Rewrites: 1003
  126 [2;36m│[0m    Odd [1;31mNat.zero[0m = Bool.false
      [2;36m│[0m        [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m        [1;31m└Here![0m
      [2;36m┆[0m     
  127 [2;36m│[0m    Odd (Nat.succ [1;31mNat.zero[0m) = Bool.true
      [2;36m│[0m                  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                  [1;31m└Here![0m
  128 [2;36m│[0m    Odd (Nat.succ (Nat.succ k)) = Odd k

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.to_nat'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:142:18][0m
      [2;36m│[0m
  141 [2;36m│[0m    	// Multiple.threethings Bool.true Bool.false (Multiple.empty)
  142 [2;36m│[0m      Bool.not (Odd ([1;31mU60.to_nat[0m 20000000))
      [2;36m│[0m                     [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                     [1;31m└Here![0m
  143 [2;36m│[0m    }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:1:12][0m
      [2;36m│[0m
    1 [2;36m│[0m    Wrongb (a: [1;31mBool[0m) : [1;31mBool[0m { // Rewrites: 6983
      [2;36m│[0m               [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m               [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
      [2;36m┆[0m     
    2 [2;36m│[0m    	match [1;31mBool[0m a {
      [2;36m│[0m          	[1;31m┬[0m[1;31m───[0m
      [2;36m│[0m          	[1;31m└Here![0m
    3 [2;36m│[0m    		true =>  Bool.true
      [2;36m┆[0m     
   15 [2;36m│[0m    
   16 [2;36m│[0m    Logics.and (a: [1;31mBool[0m) (b: [1;31mBool[0m) : [1;31mBool[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                   [1;31m│[0m         [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m                   [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                   [1;31m└Here![0m
   17 [2;36m│[0m    Logics.and Bool.true  Bool.true = Bool.true
      [2;36m┆[0m     
   20 [2;36m│[0m    
   21 [2;36m│[0m    Identity (b: [1;31mBool[0m): [1;31mBool[0m {
      [2;36m│[0m                 [1;31m┬[0m[1;31m───[0m   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                 [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   22 [2;36m│[0m    	b
      [2;36m┆[0m     
   24 [2;36m│[0m    
   25 [2;36m│[0m    Negation (a: [1;31mBool[0m) : [1;31mBool[0m {
      [2;36m│[0m                 [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                 [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
      [2;36m┆[0m     
   26 [2;36m│[0m    	match [1;31mBool[0m a {
      [2;36m│[0m          	[1;31m┬[0m[1;31m───[0m
      [2;36m│[0m          	[1;31m└Here![0m
   27 [2;36m│[0m        true => Bool.false
      [2;36m┆[0m     
   31 [2;36m│[0m    
   32 [2;36m│[0m    And (a: [1;31mBool[0m) (b: [1;31mBool[0m) : [1;31mBool[0m {
      [2;36m│[0m            [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m    [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m            [1;31m│[0m         [1;31m│[0m       [1;31m└Here![0m
      [2;36m│[0m            [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m            [1;31m└Here![0m
      [2;36m┆[0m     
   33 [2;36m│[0m    	match [1;31mBool[0m b {
      [2;36m│[0m          	[1;31m┬[0m[1;31m───[0m
      [2;36m│[0m          	[1;31m└Here![0m
   34 [2;36m│[0m        true => a
      [2;36m┆[0m     
   39 [2;36m│[0m    //Notação equacional 
   40 [2;36m│[0m    Maybe.wrapper (b: [1;31mBool[0m) : Maybe [1;31mBool[0m
      [2;36m│[0m                      [1;31m┬[0m[1;31m───[0m          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                      [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
   41 [2;36m│[0m    Maybe.wrapper Bool.true = Maybe.some Bool.true
   42 [2;36m│[0m    Maybe.wrapper Bool.false = Maybe.none [1;31mBool[0m
      [2;36m│[0m                                          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                          [1;31m└Here![0m
   43 [2;36m│[0m    
      [2;36m┆[0m     
   78 [2;36m│[0m    
   79 [2;36m│[0m    Snd (pair: (Pair [1;31mBool[0m [1;31mBool[0m)) : [1;31mBool[0m {
      [2;36m│[0m                     [1;31m┬[0m[1;31m───[0m [1;31m┬[0m[1;31m───[0m     [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                     [1;31m│[0m    [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                     [1;31m│[0m    [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   80 [2;36m│[0m      match Pair pair {
      [2;36m┆[0m     
  107 [2;36m│[0m    // }
  108 [2;36m│[0m    Or (a: (Maybe [1;31mBool[0m)) (b: (Maybe [1;31mBool[0m)): Maybe [1;31mBool[0m {
      [2;36m│[0m                  [1;31m┬[0m[1;31m───[0m              [1;31m┬[0m[1;31m───[0m          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                  [1;31m│[0m                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                  [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
  109 [2;36m│[0m      match Maybe a {
      [2;36m┆[0m     
  124 [2;36m│[0m    
  125 [2;36m│[0m    Odd (n: Nat) : [1;31mBool[0m // Rewrites: 1003
      [2;36m│[0m                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                   [1;31m└Here![0m
  126 [2;36m│[0m    Odd Nat.zero = Bool.false

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.false'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:18:12][0m
      [2;36m│[0m
   17 [2;36m│[0m    Logics.and Bool.true  Bool.true = Bool.true
   18 [2;36m│[0m    Logics.and [1;31mBool.false[0m Bool.true = [1;31mBool.false[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m─────────[0m             [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m               [1;31m│[0m                      [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
      [2;36m┆[0m     
   19 [2;36m│[0m    Logics.and a          [1;31mBool.false[0m = [1;31mBool.false[0m
      [2;36m│[0m                          [1;31m┬[0m[1;31m─────────[0m   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                          [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   20 [2;36m│[0m    
      [2;36m┆[0m     
   26 [2;36m│[0m    	match Bool a {
   27 [2;36m│[0m        true => [1;31mBool.false[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                [1;31m└Here![0m
   28 [2;36m│[0m        false => Bool.true
      [2;36m┆[0m     
   41 [2;36m│[0m    Maybe.wrapper Bool.true = Maybe.some Bool.true
   42 [2;36m│[0m    Maybe.wrapper [1;31mBool.false[0m = Maybe.none Bool
      [2;36m│[0m                  [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                  [1;31m└Here![0m
   43 [2;36m│[0m    
      [2;36m┆[0m     
  125 [2;36m│[0m    Odd (n: Nat) : Bool // Rewrites: 1003
  126 [2;36m│[0m    Odd Nat.zero = [1;31mBool.false[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
  127 [2;36m│[0m    Odd (Nat.succ Nat.zero) = Bool.true

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:3:12][0m
      [2;36m│[0m
    2 [2;36m│[0m    	match Bool a {
    3 [2;36m│[0m    		true =>  [1;31mBool.true[0m
      [2;36m│[0m             		[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m             		[1;31m└Here![0m
      [2;36m┆[0m     
    4 [2;36m│[0m    		false => [1;31mBool.true[0m
      [2;36m│[0m             		[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m             		[1;31m└Here![0m
    5 [2;36m│[0m    	}
      [2;36m┆[0m     
   16 [2;36m│[0m    Logics.and (a: Bool) (b: Bool) : Bool
   17 [2;36m│[0m    Logics.and [1;31mBool.true[0m  [1;31mBool.true[0m = [1;31mBool.true[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m────────[0m  [1;31m┬[0m[1;31m────────[0m   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m               [1;31m│[0m          [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
      [2;36m┆[0m     
   18 [2;36m│[0m    Logics.and Bool.false [1;31mBool.true[0m = Bool.false
      [2;36m│[0m                          [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
   19 [2;36m│[0m    Logics.and a          Bool.false = Bool.false
      [2;36m┆[0m     
   27 [2;36m│[0m        true => Bool.false
   28 [2;36m│[0m        false => [1;31mBool.true[0m
      [2;36m│[0m                 [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
   29 [2;36m│[0m      }
      [2;36m┆[0m     
   34 [2;36m│[0m        true => a
   35 [2;36m│[0m        false => [1;31mBool.true[0m
      [2;36m│[0m                 [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
   36 [2;36m│[0m      }
      [2;36m┆[0m     
   40 [2;36m│[0m    Maybe.wrapper (b: Bool) : Maybe Bool
   41 [2;36m│[0m    Maybe.wrapper [1;31mBool.true[0m = Maybe.some [1;31mBool.true[0m
      [2;36m│[0m                  [1;31m┬[0m[1;31m────────[0m              [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                  [1;31m│[0m                      [1;31m└Here![0m
      [2;36m│[0m                  [1;31m└Here![0m
   42 [2;36m│[0m    Maybe.wrapper Bool.false = Maybe.none Bool
      [2;36m┆[0m     
  126 [2;36m│[0m    Odd Nat.zero = Bool.false
  127 [2;36m│[0m    Odd (Nat.succ Nat.zero) = [1;31mBool.true[0m
      [2;36m│[0m                              [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                              [1;31m└Here![0m
  128 [2;36m│[0m    Odd (Nat.succ (Nat.succ k)) = Odd k

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Pair'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:79:13][0m
      [2;36m│[0m
   78 [2;36m│[0m    
   79 [2;36m│[0m    Snd (pair: ([1;31mPair[0m Bool Bool)) : Bool {
      [2;36m│[0m                [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                [1;31m└Here![0m
      [2;36m┆[0m     
   80 [2;36m│[0m      match [1;31mPair[0m pair {
      [2;36m│[0m            [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m            [1;31m└Here![0m
   81 [2;36m│[0m        new => pair.snd

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe.none'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:42:28][0m
      [2;36m│[0m
   41 [2;36m│[0m    Maybe.wrapper Bool.true = Maybe.some Bool.true
   42 [2;36m│[0m    Maybe.wrapper Bool.false = [1;31mMaybe.none[0m Bool
      [2;36m│[0m                               [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                               [1;31m└Here![0m
   43 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat.succ'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:127:6][0m
      [2;36m│[0m
  126 [2;36m│[0m    Odd Nat.zero = Bool.false
  127 [2;36m│[0m    Odd ([1;31mNat.succ[0m Nat.zero) = Bool.true
      [2;36m│[0m         [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m         [1;31m└Here![0m
      [2;36m┆[0m     
  128 [2;36m│[0m    Odd ([1;31mNat.succ[0m ([1;31mNat.succ[0m k)) = Odd k
      [2;36m│[0m         [1;31m┬[0m[1;31m───────[0m  [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m         [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m         [1;31m└Here![0m
  129 [2;36m│[0m    

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe.some'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:41:27][0m
      [2;36m│[0m
   40 [2;36m│[0m    Maybe.wrapper (b: Bool) : Maybe Bool
   41 [2;36m│[0m    Maybe.wrapper Bool.true = [1;31mMaybe.some[0m Bool.true
      [2;36m│[0m                              [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                              [1;31m└Here![0m
   42 [2;36m│[0m    Maybe.wrapper Bool.false = Maybe.none Bool
      [2;36m┆[0m     
  110 [2;36m│[0m        none => b
  111 [2;36m│[0m        some value => [1;31mMaybe.some[0m value
      [2;36m│[0m                      [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                      [1;31m└Here![0m
  112 [2;36m│[0m      }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.not'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:142:3][0m
      [2;36m│[0m
  141 [2;36m│[0m    	// Multiple.threethings Bool.true Bool.false (Multiple.empty)
  142 [2;36m│[0m      [1;31mBool.not[0m (Odd (U60.to_nat 20000000))
      [2;36m│[0m      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m      [1;31m└Here![0m
  143 [2;36m│[0m    }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Nat'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:125:9][0m
      [2;36m│[0m
  124 [2;36m│[0m    
  125 [2;36m│[0m    Odd (n: [1;31mNat[0m) : Bool // Rewrites: 1003
      [2;36m│[0m            [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m            [1;31m└Here![0m
  126 [2;36m│[0m    Odd Nat.zero = Bool.false

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Maybe'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:40:27][0m
      [2;36m│[0m
   39 [2;36m│[0m    //Notação equacional 
   40 [2;36m│[0m    Maybe.wrapper (b: Bool) : [1;31mMaybe[0m Bool
      [2;36m│[0m                              [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m                              [1;31m└Here![0m
   41 [2;36m│[0m    Maybe.wrapper Bool.true = Maybe.some Bool.true
      [2;36m┆[0m     
  107 [2;36m│[0m    // }
  108 [2;36m│[0m    Or (a: ([1;31mMaybe[0m Bool)) (b: ([1;31mMaybe[0m Bool)): [1;31mMaybe[0m Bool {
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m             [1;31m┬[0m[1;31m────[0m         [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m│[0m                 [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m            [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m            [1;31m└Here![0m
      [2;36m┆[0m     
  109 [2;36m│[0m      match [1;31mMaybe[0m a {
      [2;36m│[0m            [1;31m┬[0m[1;31m────[0m
      [2;36m│[0m            [1;31m└Here![0m
  110 [2;36m│[0m        none => b

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'pair.snd'.[0m

[2;36m      ┌──[IINS/Neos/testlang.kind2:81:12][0m
      [2;36m│[0m
   80 [2;36m│[0m      match Pair pair {
   81 [2;36m│[0m        new => [1;31mpair.snd[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m└Here![0m
   82 [2;36m│[0m      }

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 13 errors


  [1;42m CHECKING [0m The file './IINS/Neos/lotofacil.kind2'
  [1;41m ERROR [0m [1mCannot find the definition 'List.cons'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:3:17][0m
      [2;36m│[0m
    2 [2;36m│[0m    List.fold func List.nil  b = b
    3 [2;36m│[0m    List.fold func ([1;31mList.cons[0m l head tail) b = (func head) (List.fold func tail b)
      [2;36m│[0m                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
    4 [2;36m│[0m    
      [2;36m┆[0m     
    6 [2;36m│[0m    List.length a (List.nil t)            = 0
    7 [2;36m│[0m    List.length a ([1;31mList.cons[0m t head tail) = (+ (List.length a tail) 1)
      [2;36m│[0m                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    8 [2;36m│[0m    
      [2;36m┆[0m     
   10 [2;36m│[0m    List.delete_all v (List.nil) = List.nil 
   11 [2;36m│[0m    List.delete_all v ([1;31mList.cons[0m  head tail) = if (U60.equal v head) {(List.delete_all v tail)} else {([1;31mList.cons[0m U60 head (List.delete_all v tail))}
      [2;36m│[0m                       [1;31m┬[0m[1;31m────────[0m                                                                       [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                       [1;31m│[0m                                                                               [1;31m└Here![0m
      [2;36m│[0m                       [1;31m└Here![0m
   12 [2;36m│[0m    
      [2;36m┆[0m     
   14 [2;36m│[0m    List.filter a (List.nil t)            cond = List.nil
   15 [2;36m│[0m    List.filter a ([1;31mList.cons[0m t head tail) cond =
      [2;36m│[0m                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   16 [2;36m│[0m      if cond head {
   17 [2;36m│[0m        [1;31mList.cons[0m head (List.filter tail cond)
      [2;36m│[0m        [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m        [1;31m└Here![0m
   18 [2;36m│[0m      } else {
      [2;36m┆[0m     
   23 [2;36m│[0m    List.concat a (List.nil t)            ys = ys
   24 [2;36m│[0m    List.concat a ([1;31mList.cons[0m t head tail) ys = ([1;31mList.cons[0m a head (List.concat a tail ys))
      [2;36m│[0m                   [1;31m┬[0m[1;31m────────[0m                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                   [1;31m│[0m                            [1;31m└Here![0m
      [2;36m│[0m                   [1;31m└Here![0m
   25 [2;36m│[0m    
      [2;36m┆[0m     
   31 [2;36m│[0m    List.u60.filter.go cond eql (List.nil t)         = List.nil
   32 [2;36m│[0m    List.u60.filter.go cond 0 ([1;31mList.cons[0m t head tail) = (List.u60.filter cond tail)
      [2;36m│[0m                               [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                               [1;31m└Here![0m
      [2;36m┆[0m     
   33 [2;36m│[0m    List.u60.filter.go cond 1 ([1;31mList.cons[0m t head tail) = ([1;31mList.cons[0m head (List.u60.filter cond tail))
      [2;36m│[0m                               [1;31m┬[0m[1;31m────────[0m                 [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                               [1;31m│[0m                         [1;31m└Here![0m
      [2;36m│[0m                               [1;31m└Here![0m
   34 [2;36m│[0m    
      [2;36m┆[0m     
   36 [2;36m│[0m    List.u60.filter cond (List.nil t)         = List.nil
   37 [2;36m│[0m    List.u60.filter cond ([1;31mList.cons[0m t head tail) =
      [2;36m│[0m                          [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
   38 [2;36m│[0m    	let eql = (cond head)
   39 [2;36m│[0m    	List.u60.filter.go cond eql ([1;31mList.cons[0m t head tail)
      [2;36m│[0m                                 	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                 	[1;31m└Here![0m
   40 [2;36m│[0m    
      [2;36m┆[0m     
   43 [2;36m│[0m    Quick.sort List.nil = List.nil
   44 [2;36m│[0m    Quick.sort ([1;31mList.cons[0m x xs) =
      [2;36m│[0m                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                [1;31m└Here![0m
   45 [2;36m│[0m      let min = Quick.sort (List.u60.filter (n => (< n x)) xs)
   46 [2;36m│[0m      let max = Quick.sort (List.u60.filter (n => (> n x)) xs)
   47 [2;36m│[0m      (List.concat min ([1;31mList.cons[0m x max))
      [2;36m│[0m                        [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                        [1;31m└Here![0m
   48 [2;36m│[0m    
      [2;36m┆[0m     
   52 [2;36m│[0m    Bubble.sort List.nil         = List.nil
   53 [2;36m│[0m    Bubble.sort ([1;31mList.cons[0m t x xs) = (Insert x (Bubble.sort xs))
      [2;36m│[0m                 [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                 [1;31m└Here![0m
   54 [2;36m│[0m    
      [2;36m┆[0m     
   56 [2;36m│[0m    Insert (v: U60) (xs: List U60)  :  List U60
   57 [2;36m│[0m    Insert v List.nil            = ([1;31mList.cons[0m v List.nil)
      [2;36m│[0m                                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                    [1;31m└Here![0m
      [2;36m┆[0m     
   58 [2;36m│[0m    Insert v ([1;31mList.cons[0m t x xs)  = (GoDown (> v x) v x xs)
      [2;36m│[0m              [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m              [1;31m└Here![0m
   59 [2;36m│[0m    
      [2;36m┆[0m     
   62 [2;36m│[0m    GoDown (b: U60) (v: U60) (x: U60) (xs: List U60) : List U60
   63 [2;36m│[0m    GoDown 0 v x xs = ([1;31mList.cons[0m v ([1;31mList.cons[0m x xs))
      [2;36m│[0m                       [1;31m┬[0m[1;31m────────[0m    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                       [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                       [1;31m└Here![0m
      [2;36m┆[0m     
   64 [2;36m│[0m    GoDown 1 v x xs = ([1;31mList.cons[0m x (Insert v xs))
      [2;36m│[0m                       [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                       [1;31m└Here![0m
   65 [2;36m│[0m    
      [2;36m┆[0m     
   70 [2;36m│[0m    Loto (List.nil) = List.nil
   71 [2;36m│[0m    Loto ([1;31mList.cons[0m xs head tail) = 
      [2;36m│[0m          [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m          [1;31m└Here![0m
   72 [2;36m│[0m    	let h = Loto.soma head 
   73 [2;36m│[0m    	let t = Loto tail
   74 [2;36m│[0m    	[1;31mList.cons[0m h t
      [2;36m│[0m    	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m    	[1;31m└Here![0m
   75 [2;36m│[0m    
      [2;36m┆[0m     
   80 [2;36m│[0m    Porcent.go (List.nil xs) len = List.nil
   81 [2;36m│[0m    Porcent.go ([1;31mList.cons[0m xs head tail) len = 
      [2;36m│[0m                [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                [1;31m└Here![0m
      [2;36m┆[0m     
   82 [2;36m│[0m    	let eql = (List.length (List.filter ([1;31mList.cons[0m xs head tail) (a => (U60.equal head a))))
      [2;36m│[0m                                         	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                         	[1;31m└Here![0m
   83 [2;36m│[0m    	let por = (/ (* 1000000000 eql) len)
   84 [2;36m│[0m    	let par = [1;31mList.cons[0m head ([1;31mList.cons[0m eql [por])
      [2;36m│[0m              	[1;31m┬[0m[1;31m────────[0m       [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m              	[1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m              	[1;31m└Here![0m
      [2;36m┆[0m     
   85 [2;36m│[0m    	let del = List.delete_all head ([1;31mList.cons[0m xs head tail)
      [2;36m│[0m                                    	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                    	[1;31m└Here![0m
   86 [2;36m│[0m    	let res = Porcent.go del len
   87 [2;36m│[0m    	[1;31mList.cons[0m par res
      [2;36m│[0m    	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m    	[1;31m└Here![0m
   88 [2;36m│[0m    
      [2;36m┆[0m     
   90 [2;36m│[0m    	U60.if (>= start stop) (List.nil U60) (
   91 [2;36m│[0m    		[1;31mList.cons[0m (+ start step) (U60.interval (+ start step) stop step)
      [2;36m│[0m    		[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m    		[1;31m└Here![0m
   92 [2;36m│[0m    	)
      [2;36m┆[0m     
  130 [2;36m│[0m      let f =  (Comb.go c (+ start 1) end idx r acum)
  131 [2;36m│[0m      (U60.if (== idx r) ([1;31mList.cons[0m acum (Comb.go (- c 1) start end idx r [])) (U60.if fun v f))
      [2;36m│[0m                          [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                          [1;31m└Here![0m
  132 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.List.cons', 'List.concat'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.true'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:28:17][0m
      [2;36m│[0m
   27 [2;36m│[0m    U60.to_bool 0 = Bool.false
   28 [2;36m│[0m    U60.to_bool n = [1;31mBool.true[0m
      [2;36m│[0m                    [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
   29 [2;36m│[0m    

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.Bool.true'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:1:43][0m
      [2;36m│[0m
    1 [2;36m│[0m    List.fold <x> <y> (func: x -> y -> y) (l: [1;31mList[0m x) (b: y) : y
      [2;36m│[0m                                              [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                              [1;31m└Here![0m
    2 [2;36m│[0m    List.fold func List.nil  b = b
    3 [2;36m│[0m    List.fold func (List.cons l head tail) b = (func head) (List.fold func tail b)
    4 [2;36m│[0m    
    5 [2;36m│[0m    List.length <a> (xs: [1;31mList[0m a) : U60
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m└Here![0m
    6 [2;36m│[0m    List.length a (List.nil t)            = 0
      [2;36m┆[0m     
    8 [2;36m│[0m    
    9 [2;36m│[0m    List.delete_all (v: U60) (s: [1;31mList[0m U60) : [1;31mList[0m U60
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                 [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m└Here![0m
   10 [2;36m│[0m    List.delete_all v (List.nil) = List.nil 
      [2;36m┆[0m     
   12 [2;36m│[0m    
   13 [2;36m│[0m    List.filter <a> (xs: [1;31mList[0m a) (cond: a -> Bool) : [1;31mList[0m a
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m                        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m│[0m                           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   14 [2;36m│[0m    List.filter a (List.nil t)            cond = List.nil
      [2;36m┆[0m     
   21 [2;36m│[0m    
   22 [2;36m│[0m    List.concat <a> (xs: [1;31mList[0m a) (ys: [1;31mList[0m a) : [1;31mList[0m a
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m      [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m│[0m            [1;31m│[0m         [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   23 [2;36m│[0m    List.concat a (List.nil t)            ys = ys
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.u60.filter.go (cond: U60 -> U60) (eql: U60)  (xs: [1;31mList[0m U60)  : [1;31mList[0m U60
      [2;36m│[0m                                                           [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                           [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                                           [1;31m└Here![0m
   31 [2;36m│[0m    List.u60.filter.go cond eql (List.nil t)         = List.nil
      [2;36m┆[0m     
   34 [2;36m│[0m    
   35 [2;36m│[0m    List.u60.filter (cond: U60 -> U60) (xs: [1;31mList[0m U60)  : [1;31mList[0m U60
      [2;36m│[0m                                            [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                            [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                                            [1;31m└Here![0m
   36 [2;36m│[0m    List.u60.filter cond (List.nil t)         = List.nil
      [2;36m┆[0m     
   41 [2;36m│[0m    // Quick sort : List -> List
   42 [2;36m│[0m    Quick.sort (xs: [1;31mList[0m U60) : [1;31mList[0m U60
      [2;36m│[0m                    [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                    [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                    [1;31m└Here![0m
   43 [2;36m│[0m    Quick.sort List.nil = List.nil
      [2;36m┆[0m     
   50 [2;36m│[0m    // Bubble sort : List -> List
   51 [2;36m│[0m    Bubble.sort (xs: [1;31mList[0m U60) : [1;31mList[0m U60
      [2;36m│[0m                     [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                     [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                     [1;31m└Here![0m
   52 [2;36m│[0m    Bubble.sort List.nil         = List.nil
      [2;36m┆[0m     
   55 [2;36m│[0m    // Insert : U60 -> List -> List
   56 [2;36m│[0m    Insert (v: U60) (xs: [1;31mList[0m U60)  :  [1;31mList[0m U60
      [2;36m│[0m                         [1;31m┬[0m[1;31m───[0m          [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                         [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   57 [2;36m│[0m    Insert v List.nil            = (List.cons v List.nil)
      [2;36m┆[0m     
   61 [2;36m│[0m    #partial
   62 [2;36m│[0m    GoDown (b: U60) (v: U60) (x: U60) (xs: [1;31mList[0m U60) : [1;31mList[0m U60
      [2;36m│[0m                                           [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                           [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                           [1;31m└Here![0m
   63 [2;36m│[0m    GoDown 0 v x xs = (List.cons v (List.cons x xs))
      [2;36m┆[0m     
   65 [2;36m│[0m    
   66 [2;36m│[0m    Loto.soma (xs: [1;31mList[0m U60) : U60 {
      [2;36m│[0m                   [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                   [1;31m└Here![0m
   67 [2;36m│[0m    	List.fold (a => b => (+ a b)) xs 0
   68 [2;36m│[0m    	}
   69 [2;36m│[0m    Loto (xs: [1;31mList[0m ([1;31mList[0m U60)) : [1;31mList[0m U60
      [2;36m│[0m              [1;31m┬[0m[1;31m───[0m  [1;31m┬[0m[1;31m───[0m         [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m              [1;31m│[0m     [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m              [1;31m│[0m     [1;31m└Here![0m
      [2;36m│[0m              [1;31m└Here![0m
   70 [2;36m│[0m    Loto (List.nil) = List.nil
      [2;36m┆[0m     
   75 [2;36m│[0m    
   76 [2;36m│[0m    Porcent (xs: [1;31mList[0m U60) : [1;31mList[0m ([1;31mList[0m U60)  {
      [2;36m│[0m                 [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m  [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                 [1;31m│[0m           [1;31m│[0m     [1;31m└Here![0m
      [2;36m│[0m                 [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                 [1;31m└Here![0m
   77 [2;36m│[0m    	Porcent.go xs (List.length xs)
   78 [2;36m│[0m    }
   79 [2;36m│[0m    Porcent.go (xs: [1;31mList[0m U60) (len: U60) : [1;31mList[0m ([1;31mList[0m U60) 
      [2;36m│[0m                    [1;31m┬[0m[1;31m───[0m                   [1;31m┬[0m[1;31m───[0m  [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                    [1;31m│[0m                      [1;31m│[0m     [1;31m└Here![0m
      [2;36m│[0m                    [1;31m│[0m                      [1;31m└Here![0m
      [2;36m│[0m                    [1;31m└Here![0m
   80 [2;36m│[0m    Porcent.go (List.nil xs) len = List.nil
      [2;36m┆[0m     
   88 [2;36m│[0m    
   89 [2;36m│[0m    U60.interval (start: U60) (stop: U60) (step: U60) : [1;31mList[0m U60{
      [2;36m│[0m                                                        [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                        [1;31m└Here![0m
   90 [2;36m│[0m    	U60.if (>= start stop) (List.nil U60) (
      [2;36m┆[0m     
  121 [2;36m│[0m    
  122 [2;36m│[0m    Comb (n: U60) (r: U60) : [1;31mList[0m ([1;31mList[0m U60) {
      [2;36m│[0m                             [1;31m┬[0m[1;31m───[0m  [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                             [1;31m│[0m     [1;31m└Here![0m
      [2;36m│[0m                             [1;31m└Here![0m
  123 [2;36m│[0m    	Comb.go (U60.combination n r) 0 n 0 r [] 
  124 [2;36m│[0m    }
  125 [2;36m│[0m    Comb.go (c: U60) (start: U60) (end: U60) (idx: U60) (r: U60) (acum: [1;31mList[0m U60) : [1;31mList[0m ([1;31mList[0m U60) 
      [2;36m│[0m                                                                        [1;31m┬[0m[1;31m───[0m        [1;31m┬[0m[1;31m───[0m  [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                                                        [1;31m│[0m           [1;31m│[0m     [1;31m└Here![0m
      [2;36m│[0m                                                                        [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                                                                        [1;31m└Here![0m
  126 [2;36m│[0m    Comb.go 0 start end idx r acum = List.nil

      [1;36mHint:[0m [36mMaybe you're looking for 'List.fold'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:13:42][0m
      [2;36m│[0m
   12 [2;36m│[0m    
   13 [2;36m│[0m    List.filter <a> (xs: List a) (cond: a -> [1;31mBool[0m) : List a
      [2;36m│[0m                                             [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                                             [1;31m└Here![0m
   14 [2;36m│[0m    List.filter a (List.nil t)            cond = List.nil
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    U60.to_bool (n: U60) : [1;31mBool[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m───[0m
      [2;36m│[0m                           [1;31m└Here![0m
   27 [2;36m│[0m    U60.to_bool 0 = Bool.false

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

  [1;41m ERROR [0m [1mCannot find the definition 'Bool.false'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:27:17][0m
      [2;36m│[0m
   26 [2;36m│[0m    U60.to_bool (n: U60) : Bool
   27 [2;36m│[0m    U60.to_bool 0 = [1;31mBool.false[0m
      [2;36m│[0m                    [1;31m┬[0m[1;31m─────────[0m
      [2;36m│[0m                    [1;31m└Here![0m
   28 [2;36m│[0m    U60.to_bool n = Bool.true

      [1;36mHint:[0m [36mMaybe you're looking for 'Data.Bool.false'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'List.nil'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:2:16][0m
      [2;36m│[0m
    1 [2;36m│[0m    List.fold <x> <y> (func: x -> y -> y) (l: List x) (b: y) : y
    2 [2;36m│[0m    List.fold func [1;31mList.nil[0m  b = b
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    3 [2;36m│[0m    List.fold func (List.cons l head tail) b = (func head) (List.fold func tail b)
      [2;36m┆[0m     
    5 [2;36m│[0m    List.length <a> (xs: List a) : U60
    6 [2;36m│[0m    List.length a ([1;31mList.nil[0m t)            = 0
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
    7 [2;36m│[0m    List.length a (List.cons t head tail) = (+ (List.length a tail) 1)
      [2;36m┆[0m     
    9 [2;36m│[0m    List.delete_all (v: U60) (s: List U60) : List U60
   10 [2;36m│[0m    List.delete_all v ([1;31mList.nil[0m) = [1;31mList.nil[0m 
      [2;36m│[0m                       [1;31m┬[0m[1;31m───────[0m    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                       [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                       [1;31m└Here![0m
   11 [2;36m│[0m    List.delete_all v (List.cons  head tail) = if (U60.equal v head) {(List.delete_all v tail)} else {(List.cons U60 head (List.delete_all v tail))}
      [2;36m┆[0m     
   13 [2;36m│[0m    List.filter <a> (xs: List a) (cond: a -> Bool) : List a
   14 [2;36m│[0m    List.filter a ([1;31mList.nil[0m t)            cond = [1;31mList.nil[0m
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m                      [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m│[0m                             [1;31m└Here![0m
      [2;36m│[0m                   [1;31m└Here![0m
   15 [2;36m│[0m    List.filter a (List.cons t head tail) cond =
      [2;36m┆[0m     
   22 [2;36m│[0m    List.concat <a> (xs: List a) (ys: List a) : List a
   23 [2;36m│[0m    List.concat a ([1;31mList.nil[0m t)            ys = ys
      [2;36m│[0m                   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                   [1;31m└Here![0m
   24 [2;36m│[0m    List.concat a (List.cons t head tail) ys = (List.cons a head (List.concat a tail ys))
      [2;36m┆[0m     
   30 [2;36m│[0m    List.u60.filter.go (cond: U60 -> U60) (eql: U60)  (xs: List U60)  : List U60
   31 [2;36m│[0m    List.u60.filter.go cond eql ([1;31mList.nil[0m t)         = [1;31mList.nil[0m
      [2;36m│[0m                                 [1;31m┬[0m[1;31m───────[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                 [1;31m│[0m                     [1;31m└Here![0m
      [2;36m│[0m                                 [1;31m└Here![0m
   32 [2;36m│[0m    List.u60.filter.go cond 0 (List.cons t head tail) = (List.u60.filter cond tail)
      [2;36m┆[0m     
   35 [2;36m│[0m    List.u60.filter (cond: U60 -> U60) (xs: List U60)  : List U60
   36 [2;36m│[0m    List.u60.filter cond ([1;31mList.nil[0m t)         = [1;31mList.nil[0m
      [2;36m│[0m                          [1;31m┬[0m[1;31m───────[0m              [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                          [1;31m│[0m                     [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   37 [2;36m│[0m    List.u60.filter cond (List.cons t head tail) =
      [2;36m┆[0m     
   42 [2;36m│[0m    Quick.sort (xs: List U60) : List U60
   43 [2;36m│[0m    Quick.sort [1;31mList.nil[0m = [1;31mList.nil[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m───────[0m   [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m               [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   44 [2;36m│[0m    Quick.sort (List.cons x xs) =
      [2;36m┆[0m     
   51 [2;36m│[0m    Bubble.sort (xs: List U60) : List U60
   52 [2;36m│[0m    Bubble.sort [1;31mList.nil[0m         = [1;31mList.nil[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m───────[0m           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                [1;31m│[0m                  [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   53 [2;36m│[0m    Bubble.sort (List.cons t x xs) = (Insert x (Bubble.sort xs))
      [2;36m┆[0m     
   56 [2;36m│[0m    Insert (v: U60) (xs: List U60)  :  List U60
   57 [2;36m│[0m    Insert v [1;31mList.nil[0m            = (List.cons v [1;31mList.nil[0m)
      [2;36m│[0m             [1;31m┬[0m[1;31m───────[0m                           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m             [1;31m│[0m                                  [1;31m└Here![0m
      [2;36m│[0m             [1;31m└Here![0m
   58 [2;36m│[0m    Insert v (List.cons t x xs)  = (GoDown (> v x) v x xs)
      [2;36m┆[0m     
   69 [2;36m│[0m    Loto (xs: List (List U60)) : List U60
   70 [2;36m│[0m    Loto ([1;31mList.nil[0m) = [1;31mList.nil[0m
      [2;36m│[0m          [1;31m┬[0m[1;31m───────[0m    [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m          [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m          [1;31m└Here![0m
   71 [2;36m│[0m    Loto (List.cons xs head tail) = 
      [2;36m┆[0m     
   79 [2;36m│[0m    Porcent.go (xs: List U60) (len: U60) : List (List U60) 
   80 [2;36m│[0m    Porcent.go ([1;31mList.nil[0m xs) len = [1;31mList.nil[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m───────[0m           [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                [1;31m│[0m                  [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   81 [2;36m│[0m    Porcent.go (List.cons xs head tail) len = 
      [2;36m┆[0m     
   89 [2;36m│[0m    U60.interval (start: U60) (stop: U60) (step: U60) : List U60{
   90 [2;36m│[0m    	U60.if (>= start stop) ([1;31mList.nil[0m U60) (
      [2;36m│[0m                            	[1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                            	[1;31m└Here![0m
   91 [2;36m│[0m    		List.cons (+ start step) (U60.interval (+ start step) stop step)
      [2;36m┆[0m     
  125 [2;36m│[0m    Comb.go (c: U60) (start: U60) (end: U60) (idx: U60) (r: U60) (acum: List U60) : List (List U60) 
  126 [2;36m│[0m    Comb.go 0 start end idx r acum = [1;31mList.nil[0m
      [2;36m│[0m                                     [1;31m┬[0m[1;31m───────[0m
      [2;36m│[0m                                     [1;31m└Here![0m
  127 [2;36m│[0m    Comb.go c start end idx r acum = 

      [1;36mHint:[0m [36mMaybe you're looking for 'List.fold', 'Data.List.nil', 'List.filter'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:5:32][0m
      [2;36m│[0m
    4 [2;36m│[0m    
    5 [2;36m│[0m    List.length <a> (xs: List a) : [1;31mU60[0m
      [2;36m│[0m                                   [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                   [1;31m└Here![0m
    6 [2;36m│[0m    List.length a (List.nil t)            = 0
      [2;36m┆[0m     
    8 [2;36m│[0m    
    9 [2;36m│[0m    List.delete_all (v: [1;31mU60[0m) (s: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                        [1;31m│[0m             [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                        [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   10 [2;36m│[0m    List.delete_all v (List.nil) = List.nil 
   11 [2;36m│[0m    List.delete_all v (List.cons  head tail) = if (U60.equal v head) {(List.delete_all v tail)} else {(List.cons [1;31mU60[0m head (List.delete_all v tail))}
      [2;36m│[0m                                                                                                                 [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                                                                                                 [1;31m└Here![0m
   12 [2;36m│[0m    
      [2;36m┆[0m     
   25 [2;36m│[0m    
   26 [2;36m│[0m    U60.to_bool (n: [1;31mU60[0m) : Bool
      [2;36m│[0m                    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                    [1;31m└Here![0m
   27 [2;36m│[0m    U60.to_bool 0 = Bool.false
      [2;36m┆[0m     
   29 [2;36m│[0m    
   30 [2;36m│[0m    List.u60.filter.go (cond: [1;31mU60[0m -> [1;31mU60[0m) (eql: [1;31mU60[0m)  (xs: List [1;31mU60[0m)  : List [1;31mU60[0m
      [2;36m│[0m                              [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m             [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                              [1;31m│[0m      [1;31m│[0m          [1;31m│[0m               [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                              [1;31m│[0m      [1;31m│[0m          [1;31m│[0m               [1;31m└Here![0m
      [2;36m│[0m                              [1;31m│[0m      [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                              [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                              [1;31m└Here![0m
   31 [2;36m│[0m    List.u60.filter.go cond eql (List.nil t)         = List.nil
      [2;36m┆[0m     
   34 [2;36m│[0m    
   35 [2;36m│[0m    List.u60.filter (cond: [1;31mU60[0m -> [1;31mU60[0m) (xs: List [1;31mU60[0m)  : List [1;31mU60[0m
      [2;36m│[0m                           [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                           [1;31m│[0m      [1;31m│[0m              [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                           [1;31m│[0m      [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m                           [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                           [1;31m└Here![0m
   36 [2;36m│[0m    List.u60.filter cond (List.nil t)         = List.nil
      [2;36m┆[0m     
   41 [2;36m│[0m    // Quick sort : List -> List
   42 [2;36m│[0m    Quick.sort (xs: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   43 [2;36m│[0m    Quick.sort List.nil = List.nil
      [2;36m┆[0m     
   50 [2;36m│[0m    // Bubble sort : List -> List
   51 [2;36m│[0m    Bubble.sort (xs: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m                          [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                          [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                          [1;31m└Here![0m
   52 [2;36m│[0m    Bubble.sort List.nil         = List.nil
      [2;36m┆[0m     
   55 [2;36m│[0m    // Insert : U60 -> List -> List
   56 [2;36m│[0m    Insert (v: [1;31mU60[0m) (xs: List [1;31mU60[0m)  :  List [1;31mU60[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m           [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m               [1;31m│[0m              [1;31m│[0m             [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   57 [2;36m│[0m    Insert v List.nil            = (List.cons v List.nil)
      [2;36m┆[0m     
   61 [2;36m│[0m    #partial
   62 [2;36m│[0m    GoDown (b: [1;31mU60[0m) (v: [1;31mU60[0m) (x: [1;31mU60[0m) (xs: List [1;31mU60[0m) : List [1;31mU60[0m
      [2;36m│[0m               [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m            [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m               [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m        [1;31m│[0m        [1;31m│[0m              [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m               [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m               [1;31m└Here![0m
   63 [2;36m│[0m    GoDown 0 v x xs = (List.cons v (List.cons x xs))
      [2;36m┆[0m     
   65 [2;36m│[0m    
   66 [2;36m│[0m    Loto.soma (xs: List [1;31mU60[0m) : [1;31mU60[0m {
      [2;36m│[0m                        [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                        [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
   67 [2;36m│[0m    	List.fold (a => b => (+ a b)) xs 0
   68 [2;36m│[0m    	}
   69 [2;36m│[0m    Loto (xs: List (List [1;31mU60[0m)) : List [1;31mU60[0m
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   70 [2;36m│[0m    Loto (List.nil) = List.nil
      [2;36m┆[0m     
   75 [2;36m│[0m    
   76 [2;36m│[0m    Porcent (xs: List [1;31mU60[0m) : List (List [1;31mU60[0m)  {
      [2;36m│[0m                      [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                      [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                      [1;31m└Here![0m
   77 [2;36m│[0m    	Porcent.go xs (List.length xs)
   78 [2;36m│[0m    }
   79 [2;36m│[0m    Porcent.go (xs: List [1;31mU60[0m) (len: [1;31mU60[0m) : List (List [1;31mU60[0m) 
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m          [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
   80 [2;36m│[0m    Porcent.go (List.nil xs) len = List.nil
      [2;36m┆[0m     
   88 [2;36m│[0m    
   89 [2;36m│[0m    U60.interval (start: [1;31mU60[0m) (stop: [1;31mU60[0m) (step: [1;31mU60[0m) : List [1;31mU60[0m{
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m│[0m           [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m│[0m           [1;31m└Here![0m
      [2;36m│[0m                         [1;31m└Here![0m
      [2;36m┆[0m     
   90 [2;36m│[0m    	U60.if (>= start stop) (List.nil [1;31mU60[0m) (
      [2;36m│[0m                                     	[1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                                     	[1;31m└Here![0m
   91 [2;36m│[0m    		List.cons (+ start step) (U60.interval (+ start step) stop step)
      [2;36m┆[0m     
   95 [2;36m│[0m    
   96 [2;36m│[0m    U60.fac (n: [1;31mU60[0m) : [1;31mU60[0m
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
   97 [2;36m│[0m    U60.fac 0 = 1
      [2;36m┆[0m     
   99 [2;36m│[0m    
  100 [2;36m│[0m    U60.if <r: Type> (n: [1;31mU60[0m) (t: r) (f: r) : r
      [2;36m│[0m                         [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                         [1;31m└Here![0m
  101 [2;36m│[0m    U60.if r 0 t f = f
      [2;36m┆[0m     
  104 [2;36m│[0m    #partial
  105 [2;36m│[0m    U60.combination (n: [1;31mU60[0m) (p: [1;31mU60[0m) : [1;31mU60[0m
      [2;36m│[0m                        [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m    [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                        [1;31m│[0m        [1;31m│[0m      [1;31m└Here![0m
      [2;36m│[0m                        [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                        [1;31m└Here![0m
  106 [2;36m│[0m    U60.combination n 0 = 1
      [2;36m┆[0m     
  121 [2;36m│[0m    
  122 [2;36m│[0m    Comb (n: [1;31mU60[0m) (r: [1;31mU60[0m) : List (List [1;31mU60[0m) {
      [2;36m│[0m             [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m             [1;31m│[0m        [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m             [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m             [1;31m└Here![0m
  123 [2;36m│[0m    	Comb.go (U60.combination n r) 0 n 0 r [] 
  124 [2;36m│[0m    }
  125 [2;36m│[0m    Comb.go (c: [1;31mU60[0m) (start: [1;31mU60[0m) (end: [1;31mU60[0m) (idx: [1;31mU60[0m) (r: [1;31mU60[0m) (acum: List [1;31mU60[0m) : List (List [1;31mU60[0m) 
      [2;36m│[0m                [1;31m┬[0m[1;31m──[0m          [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m        [1;31m┬[0m[1;31m──[0m      [1;31m┬[0m[1;31m──[0m              [1;31m┬[0m[1;31m──[0m               [1;31m┬[0m[1;31m──[0m
      [2;36m│[0m                [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m│[0m                [1;31m│[0m                 [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m│[0m                [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m│[0m        [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m            [1;31m│[0m          [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m            [1;31m│[0m          [1;31m└Here![0m
      [2;36m│[0m                [1;31m│[0m            [1;31m└Here![0m
      [2;36m│[0m                [1;31m└Here![0m
  126 [2;36m│[0m    Comb.go 0 start end idx r acum = List.nil

      [1;36mHint:[0m [36mMaybe you're looking for 'U60.fac', 'U60.if'[0m

  [1;41m ERROR [0m [1mCannot find the definition 'U60.equal'.[0m

[2;36m      ┌──[IINS/Neos/lotofacil.kind2:11:48][0m
      [2;36m│[0m
   10 [2;36m│[0m    List.delete_all v (List.nil) = List.nil 
   11 [2;36m│[0m    List.delete_all v (List.cons  head tail) = if ([1;31mU60.equal[0m v head) {(List.delete_all v tail)} else {(List.cons U60 head (List.delete_all v tail))}
      [2;36m│[0m                                                   [1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                   [1;31m└Here![0m
   12 [2;36m│[0m    
      [2;36m┆[0m     
   81 [2;36m│[0m    Porcent.go (List.cons xs head tail) len = 
   82 [2;36m│[0m    	let eql = (List.length (List.filter (List.cons xs head tail) (a => ([1;31mU60.equal[0m head a))))
      [2;36m│[0m                                                                        	[1;31m┬[0m[1;31m────────[0m
      [2;36m│[0m                                                                        	[1;31m└Here![0m
   83 [2;36m│[0m    	let por = (/ (* 1000000000 eql) len)

      [1;36mHint:[0m [36mTake a look at the rules for name searching at https://github.com/Kindelia/Kind2/blob/master/guide/naming.md[0m

    [1;41m FAILED [0m Took 0.0s, 8 errors


  [1;42m CHECKING [0m The file './IINS/Neos/lotofacilcopy.kind2'
  [1;41m ERROR [0m [1mUnexpected token '['.[0m

[2;36m      ┌──[IINS/Neos/lotofacilcopy.kind2:1:1][0m
      [2;36m│[0m
    1 [2;36m│[0m    [1;31m[[0m[02,03,04,05,07,08,10,11,12,14,15,20,22,23,24],
      [2;36m│[0m    [1;31m┬[0m[1;31m[0m
      [2;36m│[0m    [1;31m└Here![0m
    2 [2;36m│[0m    [02,03,05,06,09,10,11,13,15,16,17,19,21,22,24],
    3 [2;36m│[0m    [01,02,05,07,08,09,10,11,12,13,18,20,21,22,25],


    [1;41m FAILED [0m Took 0.0s, 1 errors


  [1;42m CHECKING [0m The file './Math/Algebra/Semigroup/_.kind2'
     [1;42m STATS [0m Rewrites: 50924
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Math/Algebra/Semigroup/associativity.kind2'
     [1;42m STATS [0m Rewrites: 60204
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Math/Algebra/Semigroup/concat.kind2'
     [1;42m STATS [0m Rewrites: 54952
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Math/Algebra/Monoid/_.kind2'
     [1;42m STATS [0m Rewrites: 104475
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Math/Algebra/Monoid/concat.kind2'
     [1;42m STATS [0m Rewrites: 108670
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Math/Algebra/Monoid/empty.kind2'
     [1;42m STATS [0m Rewrites: 106670
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Math/Algebra/Monoid/concat_all.kind2'
     [1;42m STATS [0m Rewrites: 136528
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Monoid/identity.kind2'
     [1;42m STATS [0m Rewrites: 115769
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/invert.kind2'
     [1;42m STATS [0m Rewrites: 177312
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/_.kind2'
     [1;42m STATS [0m Rewrites: 174418
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/concat.kind2'
     [1;42m STATS [0m Rewrites: 178713
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/empty.kind2'
     [1;42m STATS [0m Rewrites: 177157
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/identity.kind2'
     [1;42m STATS [0m Rewrites: 192291
   [1;42m CHECKED [0m All terms checked. took 0.24s


  [1;42m CHECKING [0m The file './Math/Algebra/Group/inverse.kind2'
     [1;42m STATS [0m Rewrites: 190792
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Inverse/_.kind2'
     [1;42m STATS [0m Rewrites: 55000
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Inverse/right_inverse.kind2'
     [1;42m STATS [0m Rewrites: 65389
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Inverse/left_inverse.kind2'
     [1;42m STATS [0m Rewrites: 65404
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/right_identity/_.kind2'
     [1;42m STATS [0m Rewrites: 17613
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/right_identity/eta.kind2'
     [1;42m STATS [0m Rewrites: 17561
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Identity/_.kind2'
     [1;42m STATS [0m Rewrites: 45958
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Identity/left_identity.kind2'
     [1;42m STATS [0m Rewrites: 53925
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/Identity/right_identity.kind2'
     [1;42m STATS [0m Rewrites: 53921
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/associativity/_.kind2'
     [1;42m STATS [0m Rewrites: 19840
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Math/Algebra/Laws/associativity/eta.kind2'
     [1;42m STATS [0m Rewrites: 19703
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Math/Algebra/Magma/_.kind2'
     [1;42m STATS [0m Rewrites: 10738
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Math/Algebra/Magma/concat.kind2'
     [1;42m STATS [0m Rewrites: 14173
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Operator/_.kind2'
     [1;42m STATS [0m Rewrites: 3286
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Apps/Kind/Operator/equal.kind2'
     [1;42m STATS [0m Rewrites: 16882
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Apps/Kind/Operator/show.kind2'
     [1;42m STATS [0m Rewrites: 26204
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_equations.kind2'
     [1;42m STATS [0m Rewrites: 303842
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/look.kind2'
     [1;42m STATS [0m Rewrites: 322393
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/infer.kind2'
     [1;42m STATS [0m Rewrites: 6627807
   [1;42m CHECKED [0m All terms checked. took 2.11s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_subst.kind2'
     [1;42m STATS [0m Rewrites: 303605
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/shrink.kind2'
     [1;42m STATS [0m Rewrites: 310970
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/_.kind2'
     [1;42m STATS [0m Rewrites: 300241
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/set_right_hand_side.kind2'
     [1;42m STATS [0m Rewrites: 307397
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/check.kind2'
     [1;42m STATS [0m Rewrites: 6621487
   [1;42m CHECKED [0m All terms checked. took 1.99s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/with_context.kind2'
     [1;42m STATS [0m Rewrites: 337410
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_context.kind2'
     [1;42m STATS [0m Rewrites: 303605
   [1;42m CHECKED [0m All terms checked. took 0.23s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/bind.kind2'
     [1;42m STATS [0m Rewrites: 316893
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/run.kind2'
     [1;42m STATS [0m Rewrites: 304037
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/equal.kind2'
     [1;42m STATS [0m Rewrites: 4208838
   [1;42m CHECKED [0m All terms checked. took 1.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/local.kind2'
     [1;42m STATS [0m Rewrites: 310786
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/find.kind2'
     [1;42m STATS [0m Rewrites: 318018
   [1;42m CHECKED [0m All terms checked. took 0.25s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/add_value.kind2'
     [1;42m STATS [0m Rewrites: 315734
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/rule.kind2'
     [1;42m STATS [0m Rewrites: 6738139
   [1;42m CHECKED [0m All terms checked. took 1.97s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/extended.kind2'
     [1;42m STATS [0m Rewrites: 358444
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/extend.kind2'
     [1;42m STATS [0m Rewrites: 316229
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_right_hand_side.kind2'
     [1;42m STATS [0m Rewrites: 303605
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/new_equation.kind2'
     [1;42m STATS [0m Rewrites: 318079
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/fail.kind2'
     [1;42m STATS [0m Rewrites: 304080
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_errors.kind2'
     [1;42m STATS [0m Rewrites: 303838
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/set_context.kind2'
     [1;42m STATS [0m Rewrites: 304057
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/unify.kind2'
     [1;42m STATS [0m Rewrites: 4672798
   [1;42m CHECKED [0m All terms checked. took 1.41s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/error.kind2'
     [1;42m STATS [0m Rewrites: 305795
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/take_context.kind2'
     [1;42m STATS [0m Rewrites: 303557
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/pure.kind2'
     [1;42m STATS [0m Rewrites: 304594
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/void.kind2'
     [1;42m STATS [0m Rewrites: 330334
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/get_depth.kind2'
     [1;42m STATS [0m Rewrites: 303580
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/fill.kind2'
     [1;42m STATS [0m Rewrites: 318390
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Checker/sequence.kind2'
     [1;42m STATS [0m Rewrites: 335687
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Printer/text.kind2'
     [1;42m STATS [0m Rewrites: 27865
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Apps/Kind/Printer/color.kind2'
     [1;42m STATS [0m Rewrites: 33105
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Apps/Kind/Error/_.kind2'
     [1;42m STATS [0m Rewrites: 259471
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Apps/Kind/Error/quote.kind2'
     [1;42m STATS [0m Rewrites: 1433710
   [1;42m CHECKED [0m All terms checked. took 0.56s


  [1;42m CHECKING [0m The file './Apps/Kind/Error/Quoted.kind2'
     [1;42m STATS [0m Rewrites: 74149
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Apps/Kind/Equation.kind2'
     [1;42m STATS [0m Rewrites: 218574
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Rule/_.kind2'
     [1;42m STATS [0m Rewrites: 202569
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Rule/show.kind2'
     [1;42m STATS [0m Rewrites: 4135754
   [1;42m CHECKED [0m All terms checked. took 0.75s


  [1;42m CHECKING [0m The file './Apps/Kind/TypeChecker.kind2'
     [1;42m STATS [0m Rewrites: 21650396
   [1;42m CHECKED [0m All terms checked. took 3.92s


  [1;42m CHECKING [0m The file './Apps/Kind/Axiom.kind2'
     [1;42m STATS [0m Rewrites: 249075
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Apps/Kind/Name/_.kind2'
     [1;42m STATS [0m Rewrites: 198
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Apps/Kind/Name/show.kind2'
     [1;42m STATS [0m Rewrites: 28642
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Apps/Kind/API/output.kind2'
     [1;42m STATS [0m Rewrites: 1508956
   [1;42m CHECKED [0m All terms checked. took 0.58s


  [1;42m CHECKING [0m The file './Apps/Kind/API/check_function.kind2'
     [1;42m STATS [0m Rewrites: 7064509
   [1;42m CHECKED [0m All terms checked. took 2.30s


  [1;42m CHECKING [0m The file './Apps/Kind/API/check_functions.kind2'
     [1;42m STATS [0m Rewrites: 7099099
   [1;42m CHECKED [0m All terms checked. took 2.51s


  [1;42m CHECKING [0m The file './Apps/Kind/API/check_all.kind2'
     [1;42m STATS [0m Rewrites: 10009908
   [1;42m CHECKED [0m All terms checked. took 2.36s


  [1;42m CHECKING [0m The file './Apps/Kind/API/eval_main.kind2'
     [1;42m STATS [0m Rewrites: 4166231
   [1;42m CHECKED [0m All terms checked. took 0.67s


  [1;42m CHECKING [0m The file './Apps/Kind/Result.kind2'
     [1;42m STATS [0m Rewrites: 296628
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Coverage/check.kind2'
     [1;42m STATS [0m Rewrites: 19255308
   [1;42m CHECKED [0m All terms checked. took 3.09s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/shrink.kind2'
     [1;42m STATS [0m Rewrites: 220217
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/_.kind2'
     [1;42m STATS [0m Rewrites: 216759
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/max_name_length.kind2'
     [1;42m STATS [0m Rewrites: 262925
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/show.kind2'
     [1;42m STATS [0m Rewrites: 4761566
   [1;42m CHECKED [0m All terms checked. took 0.84s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/find.kind2'
     [1;42m STATS [0m Rewrites: 225828
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/add_value.kind2'
     [1;42m STATS [0m Rewrites: 223860
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/quote.kind2'
     [1;42m STATS [0m Rewrites: 1390571
   [1;42m CHECKED [0m All terms checked. took 0.61s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/extend.kind2'
     [1;42m STATS [0m Rewrites: 223005
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/is_empty.kind2'
     [1;42m STATS [0m Rewrites: 223494
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Apps/Kind/Context/Quoted.kind2'
     [1;42m STATS [0m Rewrites: 63498
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Apps/Kind/Subst/look.kind2'
     [1;42m STATS [0m Rewrites: 220425
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Subst/_.kind2'
     [1;42m STATS [0m Rewrites: 202762
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Subst/show.kind2'
     [1;42m STATS [0m Rewrites: 4212868
   [1;42m CHECKED [0m All terms checked. took 0.66s


  [1;42m CHECKING [0m The file './Apps/Kind/Subst/fill.kind2'
     [1;42m STATS [0m Rewrites: 212531
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval_let.kind2'
     [1;42m STATS [0m Rewrites: 203676
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/set_origin.kind2'
     [1;42m STATS [0m Rewrites: 350222
   [1;42m CHECKED [0m All terms checked. took 0.31s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/_.kind2'
     [1;42m STATS [0m Rewrites: 200930
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/show/_.kind2'
     [1;42m STATS [0m Rewrites: 4130369
   [1;42m CHECKED [0m All terms checked. took 0.64s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/show/sugar/string.kind2'
     [1;42m STATS [0m Rewrites: 258569
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/show/sugar/list.kind2'
     [1;42m STATS [0m Rewrites: 4130414
   [1;42m CHECKED [0m All terms checked. took 0.64s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/show/sugar/sigma.kind2'
     [1;42m STATS [0m Rewrites: 4119191
   [1;42m CHECKED [0m All terms checked. took 0.64s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/if_all.kind2'
     [1;42m STATS [0m Rewrites: 207324
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval_sub.kind2'
     [1;42m STATS [0m Rewrites: 203488
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/quote.kind2'
     [1;42m STATS [0m Rewrites: 1332908
   [1;42m CHECKED [0m All terms checked. took 0.54s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/fillable.kind2'
     [1;42m STATS [0m Rewrites: 547330
   [1;42m CHECKED [0m All terms checked. took 0.35s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval_ann.kind2'
     [1;42m STATS [0m Rewrites: 202629
   [1;42m CHECKED [0m All terms checked. took 0.25s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval.kind2'
     [1;42m STATS [0m Rewrites: 446540
   [1;42m CHECKED [0m All terms checked. took 0.31s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval_app.kind2'
     [1;42m STATS [0m Rewrites: 204283
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/replace.kind2'
     [1;42m STATS [0m Rewrites: 596642
   [1;42m CHECKED [0m All terms checked. took 0.37s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/eval_op.kind2'
     [1;42m STATS [0m Rewrites: 231152
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/get_origin.kind2'
     [1;42m STATS [0m Rewrites: 422126
   [1;42m CHECKED [0m All terms checked. took 0.34s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/fill.kind2'
     [1;42m STATS [0m Rewrites: 527077
   [1;42m CHECKED [0m All terms checked. took 0.34s


  [1;42m CHECKING [0m The file './Apps/Kind/Term/Quoted.kind2'
     [1;42m STATS [0m Rewrites: 49160
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Apps/HVM/_.kind2'
     [1;42m STATS [0m Rewrites: 41219
   [1;42m CHECKED [0m All terms checked. took 0.50s


  [1;42m CHECKING [0m The file './Apps/HVM/log.kind2'
     [1;42m STATS [0m Rewrites: 1740
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Apps/IntCalc/_.kind2'
     [1;42m STATS [0m Rewrites: 3655290
   [1;42m CHECKED [0m All terms checked. took 0.55s


  [1;42m CHECKING [0m The file './Trait/Monad/_.kind2'
     [1;42m STATS [0m Rewrites: 24579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Trait/Mappable/_.kind2'
     [1;42m STATS [0m Rewrites: 17781
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Trait/Show/_.kind2'
     [1;42m STATS [0m Rewrites: 10700
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/nand.kind2'
     [1;42m STATS [0m Rewrites: 6899
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/true_not_false.kind2'
     [1;42m STATS [0m Rewrites: 35228
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bool/theorem/or_first.kind2'
     [1;42m STATS [0m Rewrites: 23345
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/_.kind2'
     [1;42m STATS [0m Rewrites: 5208
   [1;42m CHECKED [0m All terms checked. took 0.58s


  [1;42m CHECKING [0m The file './Data/Bool/and.kind2'
     [1;42m STATS [0m Rewrites: 6933
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bool/is_false.kind2'
     [1;42m STATS [0m Rewrites: 6426
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/equal.kind2'
     [1;42m STATS [0m Rewrites: 7346
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/to_bits.kind2'
     [1;42m STATS [0m Rewrites: 17013
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/if/_.kind2'
     [1;42m STATS [0m Rewrites: 8100
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/if/proof.kind2'
     [1;42m STATS [0m Rewrites: 24835
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/show.kind2'
     [1;42m STATS [0m Rewrites: 24238
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/false_not_true.kind2'
     [1;42m STATS [0m Rewrites: 35228
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bool/is_true.kind2'
     [1;42m STATS [0m Rewrites: 6068
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/or.kind2'
     [1;42m STATS [0m Rewrites: 6935
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/not.kind2'
     [1;42m STATS [0m Rewrites: 6426
   [1;42m CHECKED [0m All terms checked. took 0.62s


  [1;42m CHECKING [0m The file './Data/Bool/andc.kind2'
     [1;42m STATS [0m Rewrites: 6899
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Bool/nor.kind2'
     [1;42m STATS [0m Rewrites: 6899
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bool/orc.kind2'
     [1;42m STATS [0m Rewrites: 6899
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/to_u60.kind2'
     [1;42m STATS [0m Rewrites: 6399
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/xnor.kind2'
     [1;42m STATS [0m Rewrites: 8379
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bool/xor.kind2'
     [1;42m STATS [0m Rewrites: 8379
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/_.kind2'
     [1;42m STATS [0m Rewrites: 7146
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/as_gtn.kind2'
     [1;42m STATS [0m Rewrites: 13898
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/inv/_.kind2'
     [1;42m STATS [0m Rewrites: 8698
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/inv/involutive.kind2'
     [1;42m STATS [0m Rewrites: 25947
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/as_gte.kind2'
     [1;42m STATS [0m Rewrites: 13898
   [1;42m CHECKED [0m All terms checked. took 0.60s


  [1;42m CHECKING [0m The file './Data/Cmp/as_eql.kind2'
     [1;42m STATS [0m Rewrites: 13898
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Cmp/as_ltn.kind2'
     [1;42m STATS [0m Rewrites: 13898
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Cmp/as_lte.kind2'
     [1;42m STATS [0m Rewrites: 13898
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/equal/_.kind2'
     [1;42m STATS [0m Rewrites: 14931
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Cmp/equal/same.kind2'
     [1;42m STATS [0m Rewrites: 32173
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Fin/_.kind2'
     [1;42m STATS [0m Rewrites: 22875
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Fin/absurd.kind2'
     [1;42m STATS [0m Rewrites: 24012
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Fin/to_nat.kind2'
     [1;42m STATS [0m Rewrites: 25755
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/log2.kind2'
     [1;42m STATS [0m Rewrites: 14700
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/is_even.kind2'
     [1;42m STATS [0m Rewrites: 16517
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/id.kind2'
     [1;42m STATS [0m Rewrites: 8435
   [1;42m CHECKED [0m All terms checked. took 0.63s


  [1;42m CHECKING [0m The file './Data/Nat/to_string_unary.kind2'
     [1;42m STATS [0m Rewrites: 17246
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/fact.kind2'
     [1;42m STATS [0m Rewrites: 14011
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/add_var.kind2'
     [1;42m STATS [0m Rewrites: 32304
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/to_string_zs.kind2'
     [1;42m STATS [0m Rewrites: 17626
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/absurd/zero_not_succ.kind2'
     [1;42m STATS [0m Rewrites: 63623
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/_.kind2'
     [1;42m STATS [0m Rewrites: 6712
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/ltn.kind2'
     [1;42m STATS [0m Rewrites: 16594
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/is_odd.kind2'
     [1;42m STATS [0m Rewrites: 14046
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/cmp/_.kind2'
     [1;42m STATS [0m Rewrites: 17333
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/half/_.kind2'
     [1;42m STATS [0m Rewrites: 9044
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/half/rel.kind2'
  [1;44m INFO [0m [1mInspection[0m

      [1;34m•[0m [1mHole:[0m [1;34m(Data.Either (Prop.Equal Data.Nat n (Data.Nat.double fst)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double fst))))[0m 

      [1;34m•[0m Context
      [1;34m•[0m [1mn   :[0m [1;34mData.Nat[0m 
      [1;34m•[0m [1ma   :[0m [1;34mType[0m 
      [1;34m•[0m [2ma   =[0m [2mData.Nat[0m 
      [1;34m•[0m [1mb   :[0m [1;34m((x_1 : a) -> Type)[0m 
      [1;34m•[0m [2mb   =[0m [2m(m => (Data.Either (Prop.Equal Data.Nat n (Data.Nat.double m)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double m)))))[0m 
      [1;34m•[0m [1mfst :[0m [1;34ma[0m 
      [1;34m•[0m [1msnd :[0m [1;34m(b fst)[0m 
      [1;34m•[0m [1ms   :[0m [1;34m(Data.Either (Prop.Equal Data.Nat n (Data.Nat.double fst)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double fst))))[0m 
      [1;34m•[0m [2ms   =[0m [2msnd[0m 

[2;36m      ┌──[Data/Nat/half/rel.kind2:14:3][0m
      [2;36m│[0m
   13 [2;36m│[0m    let s = (specialize b into #0 in snd)
   14 [2;36m│[0m      [1;34m?[0m
      [2;36m│[0m      [1;34m┬[0m[1;34m[0m
      [2;36m│[0m      [1;34m└Here![0m
   15 [2;36m│[0m    )


    [1;41m FAILED [0m Took 0.6s, 1 errors


  [1;42m CHECKING [0m The file './Data/Nat/match/parity.kind2'
  [1;44m INFO [0m [1mInspection[0m

      [1;34m•[0m [1mHole:[0m [1;34m(Data.Either (Prop.Equal Data.Nat n (Data.Nat.double fst)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double fst))))[0m 

      [1;34m•[0m Context
      [1;34m•[0m [1mn   :[0m [1;34mData.Nat[0m 
      [1;34m•[0m [1ma   :[0m [1;34mType[0m 
      [1;34m•[0m [2ma   =[0m [2mData.Nat[0m 
      [1;34m•[0m [1mb   :[0m [1;34m((x_1 : a) -> Type)[0m 
      [1;34m•[0m [2mb   =[0m [2m(m => (Data.Either (Prop.Equal Data.Nat n (Data.Nat.double m)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double m)))))[0m 
      [1;34m•[0m [1mfst :[0m [1;34ma[0m 
      [1;34m•[0m [1msnd :[0m [1;34m(b fst)[0m 
      [1;34m•[0m [1ms   :[0m [1;34m(Data.Either (Prop.Equal Data.Nat n (Data.Nat.double fst)) (Prop.Equal Data.Nat n (Data.Nat.succ (Data.Nat.double fst))))[0m 
      [1;34m•[0m [2ms   =[0m [2msnd[0m 

[2;36m      ┌──[Data/Nat/half/rel.kind2:14:3][0m
      [2;36m│[0m
   13 [2;36m│[0m    let s = (specialize b into #0 in snd)
   14 [2;36m│[0m      [1;34m?[0m
      [2;36m│[0m      [1;34m┬[0m[1;34m[0m
      [2;36m│[0m      [1;34m└Here![0m
   15 [2;36m│[0m    )


    [1;41m FAILED [0m Took 0.2s, 1 errors


  [1;42m CHECKING [0m The file './Data/Nat/is_zero.kind2'
     [1;42m STATS [0m Rewrites: 13210
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/gtn.kind2'
     [1;42m STATS [0m Rewrites: 14814
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/pred.kind2'
     [1;42m STATS [0m Rewrites: 8042
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/mod/_.kind2'
     [1;42m STATS [0m Rewrites: 39123
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/mod/equal_zero.kind2'
     [1;42m STATS [0m Rewrites: 75641
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/mod/zero.kind2'
     [1;42m STATS [0m Rewrites: 59204
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/to_bits.kind2'
     [1;42m STATS [0m Rewrites: 21386
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/is_succ.kind2'
     [1;42m STATS [0m Rewrites: 15681
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/to_base.kind2'
     [1;42m STATS [0m Rewrites: 59427
   [1;42m CHECKED [0m All terms checked. took 0.49s


  [1;42m CHECKING [0m The file './Data/Nat/div_mod/equal_one_zero.kind2'
     [1;42m STATS [0m Rewrites: 51865
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/div_mod/_.kind2'
     [1;42m STATS [0m Rewrites: 33869
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/div_mod/tests.kind2'
     [1;42m STATS [0m Rewrites: 57508
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/div_mod/go.kind2'
     [1;42m STATS [0m Rewrites: 31270
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/bitlen.kind2'
     [1;42m STATS [0m Rewrites: 10832
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/show.kind2'
     [1;42m STATS [0m Rewrites: 176152
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Nat/two.kind2'
     [1;42m STATS [0m Rewrites: 7519
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/to_string_base.kind2'
     [1;42m STATS [0m Rewrites: 170598
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Nat/add/_.kind2'
     [1;42m STATS [0m Rewrites: 9184
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/add/assoc.kind2'
     [1;42m STATS [0m Rewrites: 39500
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/add/semigroup.kind2'
     [1;42m STATS [0m Rewrites: 89586
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/Nat/add/comm/_.kind2'
     [1;42m STATS [0m Rewrites: 69208
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/add/comm/zero.kind2'
     [1;42m STATS [0m Rewrites: 40950
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/add/comm/succ.kind2'
     [1;42m STATS [0m Rewrites: 37787
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/add/magma.kind2'
     [1;42m STATS [0m Rewrites: 21686
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/add/monoid.kind2'
     [1;42m STATS [0m Rewrites: 166874
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Nat/add/identity.kind2'
     [1;42m STATS [0m Rewrites: 80119
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/mul/_.kind2'
     [1;42m STATS [0m Rewrites: 11861
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/mul/comm.kind2'
     [1;42m STATS [0m Rewrites: 155117
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Nat/mul/identity_right.kind2'
     [1;42m STATS [0m Rewrites: 92457
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/mul/comm/zero.kind2'
     [1;42m STATS [0m Rewrites: 39249
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/mul/distr/succ.kind2'
     [1;42m STATS [0m Rewrites: 117081
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/mul/distr.kind2'
     [1;42m STATS [0m Rewrites: 153140
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Nat/to_char.kind2'
     [1;42m STATS [0m Rewrites: 131733
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Nat/clear.kind2'
     [1;42m STATS [0m Rewrites: 8237
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Nat/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 13073
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/dbl.kind2'
     [1;42m STATS [0m Rewrites: 8636
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/sub_rem.kind2'
     [1;42m STATS [0m Rewrites: 28676
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/same.kind2'
     [1;42m STATS [0m Rewrites: 8435
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/succ_inj.kind2'
     [1;42m STATS [0m Rewrites: 35237
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/bitwise_and.kind2'
     [1;42m STATS [0m Rewrites: 28355
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/factorial.kind2'
     [1;42m STATS [0m Rewrites: 14625
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/one_neq_zero.kind2'
     [1;42m STATS [0m Rewrites: 56018
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/ind.kind2'
     [1;42m STATS [0m Rewrites: 15060
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/range.kind2'
     [1;42m STATS [0m Rewrites: 39336
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/sub/_.kind2'
     [1;42m STATS [0m Rewrites: 9511
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/sub/equal_zero.kind2'
     [1;42m STATS [0m Rewrites: 26083
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/sub/zero.kind2'
     [1;42m STATS [0m Rewrites: 26108
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Nat/lte.kind2'
     [1;42m STATS [0m Rewrites: 14680
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/equal/from_equal.kind2'
     [1;42m STATS [0m Rewrites: 36303
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/equal/_.kind2'
     [1;42m STATS [0m Rewrites: 14675
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/equal/refl.kind2'
     [1;42m STATS [0m Rewrites: 31244
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/pow.kind2'
     [1;42m STATS [0m Rewrites: 15147
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/square.kind2'
     [1;42m STATS [0m Rewrites: 13144
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/max.kind2'
     [1;42m STATS [0m Rewrites: 20296
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/one.kind2'
     [1;42m STATS [0m Rewrites: 7321
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/lcm.kind2'
     [1;42m STATS [0m Rewrites: 55562
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/Prime/_.kind2'
     [1;42m STATS [0m Rewrites: 110794
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Nat/apply.kind2'
     [1;42m STATS [0m Rewrites: 11504
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/zero_not_succ.kind2'
     [1;42m STATS [0m Rewrites: 57711
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/gcd.kind2'
     [1;42m STATS [0m Rewrites: 42193
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/log.kind2'
     [1;42m STATS [0m Rewrites: 46785
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Data/Nat/divides.kind2'
     [1;42m STATS [0m Rewrites: 50432
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/from_base.kind2'
     [1;42m STATS [0m Rewrites: 42690
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/div.kind2'
     [1;42m STATS [0m Rewrites: 39484
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/sum.kind2'
     [1;42m STATS [0m Rewrites: 11339
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/between.kind2'
     [1;42m STATS [0m Rewrites: 21356
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/to_u60.kind2'
     [1;42m STATS [0m Rewrites: 8496
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/for.kind2'
     [1;42m STATS [0m Rewrites: 24979
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/min.kind2'
     [1;42m STATS [0m Rewrites: 22076
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/double.kind2'
     [1;42m STATS [0m Rewrites: 8636
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/mul_var.kind2'
     [1;42m STATS [0m Rewrites: 34995
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Nat/gte.kind2'
     [1;42m STATS [0m Rewrites: 14814
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Nat/sub_abs.kind2'
     [1;42m STATS [0m Rewrites: 9542
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/mask.kind2'
     [1;42m STATS [0m Rewrites: 1862
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/_.kind2'
     [1;42m STATS [0m Rewrites: 24596
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/branchingbit.kind2'
     [1;42m STATS [0m Rewrites: 5722
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/matchprefix.kind2'
     [1;42m STATS [0m Rewrites: 12503
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/lowestbit.kind2'
     [1;42m STATS [0m Rewrites: 3960
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/set.kind2'
     [1;42m STATS [0m Rewrites: 104066
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/join.kind2'
     [1;42m STATS [0m Rewrites: 60634
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/get.kind2'
     [1;42m STATS [0m Rewrites: 73373
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Tree/Patricia/zerobit.kind2'
     [1;42m STATS [0m Rewrites: 10089
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/balance.kind2'
     [1;42m STATS [0m Rewrites: 257847
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/_.kind2'
     [1;42m STATS [0m Rewrites: 32958
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/size.kind2'
     [1;42m STATS [0m Rewrites: 37788
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/singleton.kind2'
     [1;42m STATS [0m Rewrites: 38788
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/set.kind2'
     [1;42m STATS [0m Rewrites: 302729
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/node.kind2'
     [1;42m STATS [0m Rewrites: 67067
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/get.kind2'
     [1;42m STATS [0m Rewrites: 65052
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/BalancedBinary/w.kind2'
     [1;42m STATS [0m Rewrites: 7106
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/_.kind2'
     [1;42m STATS [0m Rewrites: 24426
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Qui/_.kind2'
     [1;42m STATS [0m Rewrites: 3304
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Key/_.kind2'
     [1;42m STATS [0m Rewrites: 30567
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/Base/alloc.kind2'
     [1;42m STATS [0m Rewrites: 35685
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Bin/_.kind2'
     [1;42m STATS [0m Rewrites: 2095
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/set.kind2'
     [1;42m STATS [0m Rewrites: 88777
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Base/_.kind2'
     [1;42m STATS [0m Rewrites: 584
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Base/Qui/_.kind2'
     [1;42m STATS [0m Rewrites: 6312
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/Base/Bin/_.kind2'
     [1;42m STATS [0m Rewrites: 2853
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Tree/Base/mut.kind2'
     [1;42m STATS [0m Rewrites: 89875
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Tree/Base/got.kind2'
     [1;42m STATS [0m Rewrites: 122455
   [1;42m CHECKED [0m All terms checked. took 0.70s


  [1;42m CHECKING [0m The file './Data/Tree/Base/get.kind2'
     [1;42m STATS [0m Rewrites: 95085
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/List/zip.kind2'
     [1;42m STATS [0m Rewrites: 34836
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/ifor.kind2'
     [1;42m STATS [0m Rewrites: 36130
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/take.kind2'
     [1;42m STATS [0m Rewrites: 26101
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/at/_.kind2'
     [1;42m STATS [0m Rewrites: 37262
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/at/u60.kind2'
     [1;42m STATS [0m Rewrites: 30689
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/negate.kind2'
     [1;42m STATS [0m Rewrites: 23480
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/pop_at.kind2'
     [1;42m STATS [0m Rewrites: 65915
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/length.kind2'
     [1;42m STATS [0m Rewrites: 23608
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/sequenceA.kind2'
     [1;42m STATS [0m Rewrites: 62114
   [1;42m CHECKED [0m All terms checked. took 0.68s


  [1;42m CHECKING [0m The file './Data/List/pop_back.kind2'
     [1;42m STATS [0m Rewrites: 57264
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/List/partition.kind2'
     [1;42m STATS [0m Rewrites: 63565
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/take_while.kind2'
     [1;42m STATS [0m Rewrites: 29218
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/intersperse.kind2'
     [1;42m STATS [0m Rewrites: 23804
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/any.kind2'
     [1;42m STATS [0m Rewrites: 27473
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/span.kind2'
     [1;42m STATS [0m Rewrites: 55808
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/enumerate.kind2'
     [1;42m STATS [0m Rewrites: 42689
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/_.kind2'
     [1;42m STATS [0m Rewrites: 13631
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/cons_var.kind2'
     [1;42m STATS [0m Rewrites: 45887
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/delete_at.kind2'
     [1;42m STATS [0m Rewrites: 26477
   [1;42m CHECKED [0m All terms checked. took 0.63s


  [1;42m CHECKING [0m The file './Data/List/init.kind2'
     [1;42m STATS [0m Rewrites: 18847
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/bind.kind2'
     [1;42m STATS [0m Rewrites: 35437
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/drop.kind2'
     [1;42m STATS [0m Rewrites: 24943
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/chunks_of.kind2'
     [1;42m STATS [0m Rewrites: 46843
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/equal.kind2'
     [1;42m STATS [0m Rewrites: 29813
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/append.kind2'
     [1;42m STATS [0m Rewrites: 21499
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/concat/length.kind2'
     [1;42m STATS [0m Rewrites: 63879
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/concat/_.kind2'
     [1;42m STATS [0m Rewrites: 19126
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/concat/assoc.kind2'
     [1;42m STATS [0m Rewrites: 55515
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/concat/nil_right.kind2'
     [1;42m STATS [0m Rewrites: 54137
   [1;42m CHECKED [0m All terms checked. took 0.65s


  [1;42m CHECKING [0m The file './Data/List/is_cons.kind2'
     [1;42m STATS [0m Rewrites: 21190
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/flat_map.kind2'
     [1;42m STATS [0m Rewrites: 35386
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/comp_and.kind2'
     [1;42m STATS [0m Rewrites: 33668
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/find.kind2'
     [1;42m STATS [0m Rewrites: 39816
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/find_index/_.kind2'
     [1;42m STATS [0m Rewrites: 50803
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/find_index/u60.kind2'
     [1;42m STATS [0m Rewrites: 44100
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/fold_zip.kind2'
     [1;42m STATS [0m Rewrites: 27326
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/imap.kind2'
     [1;42m STATS [0m Rewrites: 28437
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/insert_sorted.kind2'
     [1;42m STATS [0m Rewrites: 113075
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/filter.kind2'
     [1;42m STATS [0m Rewrites: 30107
   [1;42m CHECKED [0m All terms checked. took 0.71s


  [1;42m CHECKING [0m The file './Data/List/merge_sort.kind2'
     [1;42m STATS [0m Rewrites: 72249
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/ifind.kind2'
     [1;42m STATS [0m Rewrites: 67797
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/sequenceA/move.kind2'
     [1;42m STATS [0m Rewrites: 42326
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/sequenceA/disjoin.kind2'
     [1;42m STATS [0m Rewrites: 42142
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/induce.kind2'
     [1;42m STATS [0m Rewrites: 28103
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/unfoldr.kind2'
     [1;42m STATS [0m Rewrites: 53606
   [1;42m CHECKED [0m All terms checked. took 0.27s


  [1;42m CHECKING [0m The file './Data/List/at_back.kind2'
     [1;42m STATS [0m Rewrites: 48614
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/List/last.kind2'
     [1;42m STATS [0m Rewrites: 29769
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/List/take_back.kind2'
     [1;42m STATS [0m Rewrites: 34864
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/List/delete_el.kind2'
     [1;42m STATS [0m Rewrites: 29125
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/head.kind2'
     [1;42m STATS [0m Rewrites: 28185
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/sort.kind2'
     [1;42m STATS [0m Rewrites: 93825
   [1;42m CHECKED [0m All terms checked. took 0.57s


  [1;42m CHECKING [0m The file './Data/List/all.kind2'
     [1;42m STATS [0m Rewrites: 27333
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/at_else.kind2'
     [1;42m STATS [0m Rewrites: 26445
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/bubblesort.kind2'
     [1;42m STATS [0m Rewrites: 43750
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/repeat.kind2'
     [1;42m STATS [0m Rewrites: 24419
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/flatten.kind2'
     [1;42m STATS [0m Rewrites: 23670
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/merge_sort/merge.kind2'
     [1;42m STATS [0m Rewrites: 38999
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/merge_sort/merge_pair.kind2'
     [1;42m STATS [0m Rewrites: 48514
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/merge_sort/unpack.kind2'
     [1;42m STATS [0m Rewrites: 56356
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/monad.kind2'
     [1;42m STATS [0m Rewrites: 67228
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/split_at/length.kind2'
     [1;42m STATS [0m Rewrites: 148528
   [1;42m CHECKED [0m All terms checked. took 0.58s


  [1;42m CHECKING [0m The file './Data/List/split_at/_.kind2'
     [1;42m STATS [0m Rewrites: 50884
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/List/set.kind2'
     [1;42m STATS [0m Rewrites: 28302
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/is_nil.kind2'
     [1;42m STATS [0m Rewrites: 21190
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/binary_map.kind2'
     [1;42m STATS [0m Rewrites: 27843
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/chunk.kind2'
     [1;42m STATS [0m Rewrites: 57149
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/List/map/length.kind2'
     [1;42m STATS [0m Rewrites: 63226
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/map/_.kind2'
     [1;42m STATS [0m Rewrites: 20350
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/map/step.kind2'
     [1;42m STATS [0m Rewrites: 45549
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/mut.kind2'
     [1;42m STATS [0m Rewrites: 29555
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/reverse/_.kind2'
     [1;42m STATS [0m Rewrites: 21615
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/reverse/go.kind2'
     [1;42m STATS [0m Rewrites: 18994
   [1;42m CHECKED [0m All terms checked. took 0.42s


  [1;42m CHECKING [0m The file './Data/List/reverse/involutive.kind2'
     [1;42m STATS [0m Rewrites: 51154
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/head_or.kind2'
     [1;42m STATS [0m Rewrites: 16860
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/cat_maybes.kind2'
     [1;42m STATS [0m Rewrites: 31624
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/pure.kind2'
     [1;42m STATS [0m Rewrites: 15974
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/create.kind2'
     [1;42m STATS [0m Rewrites: 29885
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/fold.kind2'
     [1;42m STATS [0m Rewrites: 21372
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/tail.kind2'
     [1;42m STATS [0m Rewrites: 16651
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/quicksort.kind2'
     [1;42m STATS [0m Rewrites: 89350
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/count.kind2'
     [1;42m STATS [0m Rewrites: 34462
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/drop_while.kind2'
     [1;42m STATS [0m Rewrites: 28992
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/ifind_last.kind2'
     [1;42m STATS [0m Rewrites: 70275
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/foldl.kind2'
     [1;42m STATS [0m Rewrites: 21187
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/List/intercalate.kind2'
     [1;42m STATS [0m Rewrites: 37974
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/List/zip_with.kind2'
     [1;42m STATS [0m Rewrites: 23805
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/for.kind2'
     [1;42m STATS [0m Rewrites: 21164
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/foldr.kind2'
     [1;42m STATS [0m Rewrites: 21166
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/pop.kind2'
     [1;42m STATS [0m Rewrites: 43749
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/insert_at.kind2'
     [1;42m STATS [0m Rewrites: 30804
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/unzip.kind2'
     [1;42m STATS [0m Rewrites: 39843
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/List/somes.kind2'
     [1;42m STATS [0m Rewrites: 31922
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Pair/_.kind2'
     [1;42m STATS [0m Rewrites: 12802
   [1;42m CHECKED [0m All terms checked. took 0.13s


  [1;42m CHECKING [0m The file './Data/Pair/snd.kind2'
     [1;42m STATS [0m Rewrites: 15751
   [1;42m CHECKED [0m All terms checked. took 0.13s


  [1;42m CHECKING [0m The file './Data/Pair/map_fst.kind2'
     [1;42m STATS [0m Rewrites: 19233
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Pair/swap.kind2'
     [1;42m STATS [0m Rewrites: 17226
   [1;42m CHECKED [0m All terms checked. took 0.13s


  [1;42m CHECKING [0m The file './Data/Pair/map_snd.kind2'
     [1;42m STATS [0m Rewrites: 19247
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Pair/fst.kind2'
     [1;42m STATS [0m Rewrites: 15734
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Pair/get.kind2'
     [1;42m STATS [0m Rewrites: 18358
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Bits/take.kind2'
     [1;42m STATS [0m Rewrites: 21285
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/length/_.kind2'
     [1;42m STATS [0m Rewrites: 21765
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/length/go.kind2'
     [1;42m STATS [0m Rewrites: 20515
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Bits/_.kind2'
     [1;42m STATS [0m Rewrites: 10205
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/drop.kind2'
     [1;42m STATS [0m Rewrites: 20914
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Bits/size.kind2'
     [1;42m STATS [0m Rewrites: 19471
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/equal.kind2'
     [1;42m STATS [0m Rewrites: 19240
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/add.kind2'
     [1;42m STATS [0m Rewrites: 19818
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/shift_left.kind2'
     [1;42m STATS [0m Rewrites: 19381
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/mul/_.kind2'
     [1;42m STATS [0m Rewrites: 26840
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/mul/go.kind2'
     [1;42m STATS [0m Rewrites: 24933
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/concat.kind2'
     [1;42m STATS [0m Rewrites: 13815
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 16646
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Bits/to_nat.kind2'
     [1;42m STATS [0m Rewrites: 21596
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Data/Bits/read_hex.kind2'
     [1;42m STATS [0m Rewrites: 55152
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/trim.kind2'
     [1;42m STATS [0m Rewrites: 21908
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/or.kind2'
     [1;42m STATS [0m Rewrites: 16993
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/reverse.kind2'
     [1;42m STATS [0m Rewrites: 12767
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/dec.kind2'
     [1;42m STATS [0m Rewrites: 15738
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/not.kind2'
     [1;42m STATS [0m Rewrites: 12767
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/inc.kind2'
     [1;42m STATS [0m Rewrites: 12764
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/to_string.kind2'
     [1;42m STATS [0m Rewrites: 25371
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Bits/slice.kind2'
     [1;42m STATS [0m Rewrites: 27875
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/at.kind2'
     [1;42m STATS [0m Rewrites: 34188
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/tail.kind2'
     [1;42m STATS [0m Rewrites: 11981
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/read.kind2'
     [1;42m STATS [0m Rewrites: 36573
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Bits/Map/union.kind2'
     [1;42m STATS [0m Rewrites: 46885
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/Bits/Map/length.kind2'
     [1;42m STATS [0m Rewrites: 40915
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/_.kind2'
     [1;42m STATS [0m Rewrites: 27870
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/filter.kind2'
     [1;42m STATS [0m Rewrites: 52850
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/update.kind2'
     [1;42m STATS [0m Rewrites: 65798
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Bits/Map/has.kind2'
     [1;42m STATS [0m Rewrites: 52383
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Bits/Map/del.kind2'
     [1;42m STATS [0m Rewrites: 50657
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/set.kind2'
     [1;42m STATS [0m Rewrites: 64017
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/mut.kind2'
     [1;42m STATS [0m Rewrites: 73273
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/map.kind2'
     [1;42m STATS [0m Rewrites: 44253
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/Map/got.kind2'
     [1;42m STATS [0m Rewrites: 81789
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/Map/get.kind2'
     [1;42m STATS [0m Rewrites: 45743
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Bits/Map/app.kind2'
     [1;42m STATS [0m Rewrites: 58580
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Bits/is_empty.kind2'
     [1;42m STATS [0m Rewrites: 16566
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/Dynamic/_.kind2'
     [1;42m STATS [0m Rewrites: 6493
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/F64/_.kind2'
     [1;42m STATS [0m Rewrites: 198
   [1;42m CHECKED [0m All terms checked. took 0.13s


  [1;42m CHECKING [0m The file './Data/Word/_.kind2'
     [1;42m STATS [0m Rewrites: 28328
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Word/inc.kind2'
     [1;42m STATS [0m Rewrites: 33365
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Vector/_.kind2'
     [1;42m STATS [0m Rewrites: 11414
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Vector/create.kind2'
     [1;42m STATS [0m Rewrites: 17407
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/set_bit.kind2'
     [1;42m STATS [0m Rewrites: 23159
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/high.kind2'
     [1;42m STATS [0m Rewrites: 7386
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/bitwise_complement.kind2'
     [1;42m STATS [0m Rewrites: 11159
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/1.kind2'
     [1;42m STATS [0m Rewrites: 7106
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/num_greater_equal.kind2'
     [1;42m STATS [0m Rewrites: 13559
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/msb.kind2'
     [1;42m STATS [0m Rewrites: 61507
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U120/_.kind2'
     [1;42m STATS [0m Rewrites: 6326
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/shift_left/_.kind2'
     [1;42m STATS [0m Rewrites: 17694
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/shift_left/mask_zero.kind2'
     [1;42m STATS [0m Rewrites: 54940
   [1;42m CHECKED [0m All terms checked. took 0.21s


  [1;42m CHECKING [0m The file './Data/U120/Test/sub.kind2'
     [1;42m STATS [0m Rewrites: 23973
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/num_less_equal.kind2'
     [1;42m STATS [0m Rewrites: 13559
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/is_zero.kind2'
     [1;42m STATS [0m Rewrites: 12937
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/if.kind2'
     [1;42m STATS [0m Rewrites: 9418
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/less_than.kind2'
     [1;42m STATS [0m Rewrites: 22082
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/shift_right/shl_less_equal.kind2'
     [1;42m STATS [0m Rewrites: 55531
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/shift_right/_.kind2'
     [1;42m STATS [0m Rewrites: 17696
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/shift_right/zero_if_less_equal_length.kind2'
     [1;42m STATS [0m Rewrites: 57408
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/shift_right/pass_or.kind2'
     [1;42m STATS [0m Rewrites: 38577
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/IsGreaterThan/_.kind2'
     [1;42m STATS [0m Rewrites: 37730
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/IsGreaterThan/chain.kind2'
     [1;42m STATS [0m Rewrites: 49914
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/mod/_.kind2'
     [1;42m STATS [0m Rewrites: 142087
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/U120/mod/is_less_than.kind2'
     [1;42m STATS [0m Rewrites: 169172
   [1;42m CHECKED [0m All terms checked. took 0.49s


  [1;42m CHECKING [0m The file './Data/U120/compare.kind2'
     [1;42m STATS [0m Rewrites: 40986
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/U120/num_equal.kind2'
     [1;42m STATS [0m Rewrites: 9430
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/equal.kind2'
     [1;42m STATS [0m Rewrites: 17953
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/greater_than.kind2'
     [1;42m STATS [0m Rewrites: 22082
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/add.kind2'
     [1;42m STATS [0m Rewrites: 25192
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/show.kind2'
     [1;42m STATS [0m Rewrites: 168020
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/U120/logic_or.kind2'
     [1;42m STATS [0m Rewrites: 9248
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/num_greater_than.kind2'
     [1;42m STATS [0m Rewrites: 13559
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/bitwise_xor.kind2'
     [1;42m STATS [0m Rewrites: 9129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/num_not_equal.kind2'
     [1;42m STATS [0m Rewrites: 9430
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/not_equal.kind2'
     [1;42m STATS [0m Rewrites: 17953
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/logic_and.kind2'
     [1;42m STATS [0m Rewrites: 9952
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/bitwise_or.kind2'
     [1;42m STATS [0m Rewrites: 9129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/div_mod.kind2'
     [1;42m STATS [0m Rewrites: 139574
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/U120/mul/_.kind2'
     [1;42m STATS [0m Rewrites: 62176
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/mul/carrying.kind2'
     [1;42m STATS [0m Rewrites: 88250
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U120/sub_saturated.kind2'
     [1;42m STATS [0m Rewrites: 36454
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/max_val.kind2'
     [1;42m STATS [0m Rewrites: 7106
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/IsGreaterEqual.kind2'
     [1;42m STATS [0m Rewrites: 37730
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 12937
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/get_bit.kind2'
     [1;42m STATS [0m Rewrites: 22984
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/bitwise_and.kind2'
     [1;42m STATS [0m Rewrites: 9129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/IsLessThan/_.kind2'
     [1;42m STATS [0m Rewrites: 37730
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/IsLessThan/chain/less_than.kind2'
     [1;42m STATS [0m Rewrites: 41292
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/to_nat.kind2'
     [1;42m STATS [0m Rewrites: 31821
   [1;42m CHECKED [0m All terms checked. took 0.62s


  [1;42m CHECKING [0m The file './Data/U120/0.kind2'
     [1;42m STATS [0m Rewrites: 7106
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/IsLessEqual/_.kind2'
     [1;42m STATS [0m Rewrites: 37730
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U120/IsLessEqual/chain/less_than.kind2'
     [1;42m STATS [0m Rewrites: 49914
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/dec.kind2'
     [1;42m STATS [0m Rewrites: 24120
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/sub.kind2'
     [1;42m STATS [0m Rewrites: 22498
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/inc.kind2'
     [1;42m STATS [0m Rewrites: 26814
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/greater_equal.kind2'
     [1;42m STATS [0m Rewrites: 22082
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/or/zero_right.kind2'
     [1;42m STATS [0m Rewrites: 24496
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/or/zero_left.kind2'
     [1;42m STATS [0m Rewrites: 24496
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/num_less_than.kind2'
     [1;42m STATS [0m Rewrites: 13559
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/low.kind2'
     [1;42m STATS [0m Rewrites: 7390
   [1;42m CHECKED [0m All terms checked. took 0.61s


  [1;42m CHECKING [0m The file './Data/U120/less_equal.kind2'
     [1;42m STATS [0m Rewrites: 22082
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U120/div.kind2'
     [1;42m STATS [0m Rewrites: 142108
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/U120/and/less_equal_b.kind2'
     [1;42m STATS [0m Rewrites: 42369
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/and/less_equal_a.kind2'
     [1;42m STATS [0m Rewrites: 42368
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/and/pass_or.kind2'
     [1;42m STATS [0m Rewrites: 30010
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/for.kind2'
     [1;42m STATS [0m Rewrites: 40669
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/logic_not.kind2'
     [1;42m STATS [0m Rewrites: 8469
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U120/is_bit_set.kind2'
     [1;42m STATS [0m Rewrites: 31507
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U120/2.kind2'
     [1;42m STATS [0m Rewrites: 7106
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U240/high.kind2'
     [1;42m STATS [0m Rewrites: 13799
   [1;42m CHECKED [0m All terms checked. took 0.41s


  [1;42m CHECKING [0m The file './Data/U240/_.kind2'
     [1;42m STATS [0m Rewrites: 12723
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U240/low.kind2'
     [1;42m STATS [0m Rewrites: 13803
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Leftist/_.kind2'
     [1;42m STATS [0m Rewrites: 2012
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Leftist/singleton.kind2'
     [1;42m STATS [0m Rewrites: 3628
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Leftist/rank.kind2'
     [1;42m STATS [0m Rewrites: 3554
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Leftist/findMin.kind2'
     [1;42m STATS [0m Rewrites: 15483
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/merge.kind2'
     [1;42m STATS [0m Rewrites: 25271
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/_.kind2'
     [1;42m STATS [0m Rewrites: 15107
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/insert.kind2'
     [1;42m STATS [0m Rewrites: 28547
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/singleton.kind2'
     [1;42m STATS [0m Rewrites: 16486
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/fromList.kind2'
     [1;42m STATS [0m Rewrites: 31355
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/findMin.kind2'
     [1;42m STATS [0m Rewrites: 28500
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Pairing/deleteMin.kind2'
     [1;42m STATS [0m Rewrites: 31996
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/merge.kind2'
     [1;42m STATS [0m Rewrites: 100596
   [1;42m CHECKED [0m All terms checked. took 0.67s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/nil.kind2'
     [1;42m STATS [0m Rewrites: 16304
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/_.kind2'
     [1;42m STATS [0m Rewrites: 15664
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/findMinNode.kind2'
     [1;42m STATS [0m Rewrites: 75785
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/insert.kind2'
     [1;42m STATS [0m Rewrites: 51507
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/Node/_.kind2'
     [1;42m STATS [0m Rewrites: 15664
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/Node/rank_root.kind2'
     [1;42m STATS [0m Rewrites: 30784
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/Node/link.kind2'
     [1;42m STATS [0m Rewrites: 36256
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/Node/rank_copy.kind2'
     [1;42m STATS [0m Rewrites: 31526
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/Node/children.kind2'
     [1;42m STATS [0m Rewrites: 16874
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/cons.kind2'
     [1;42m STATS [0m Rewrites: 17664
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/fromList.kind2'
     [1;42m STATS [0m Rewrites: 54398
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/findMin.kind2'
     [1;42m STATS [0m Rewrites: 84237
   [1;42m CHECKED [0m All terms checked. took 0.64s


  [1;42m CHECKING [0m The file './Data/Heap/Binomial/deleteMin.kind2'
     [1;42m STATS [0m Rewrites: 171194
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/IO/output.kind2'
     [1;42m STATS [0m Rewrites: 53824
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/IO/_.kind2'
     [1;42m STATS [0m Rewrites: 51636
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/IO/bind.kind2'
     [1;42m STATS [0m Rewrites: 69159
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/IO/input.kind2'
     [1;42m STATS [0m Rewrites: 53197
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/IO/load.kind2'
     [1;42m STATS [0m Rewrites: 53827
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/IO/prompt.kind2'
     [1;42m STATS [0m Rewrites: 79137
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/IO/print.kind2'
     [1;42m STATS [0m Rewrites: 79591
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/IO/App/Event/_.kind2'
     [1;42m STATS [0m Rewrites: 70110
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/IO/App/_.kind2'
     [1;42m STATS [0m Rewrites: 150278
   [1;42m CHECKED [0m All terms checked. took 0.65s


  [1;42m CHECKING [0m The file './Data/IO/App/DOM/_.kind2'
     [1;42m STATS [0m Rewrites: 56004
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/IO/pure.kind2'
     [1;42m STATS [0m Rewrites: 53672
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/IO/store.kind2'
     [1;42m STATS [0m Rewrites: 54477
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Stream/_.kind2'
     [1;42m STATS [0m Rewrites: 10317
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Stream/at.kind2'
     [1;42m STATS [0m Rewrites: 21485
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/JSON/_.kind2'
     [1;42m STATS [0m Rewrites: 64299
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Function/id.kind2'
     [1;42m STATS [0m Rewrites: 1825
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Function/Variadic/_.kind2'
     [1;42m STATS [0m Rewrites: 10053
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Function/Variadic/foldl.kind2'
     [1;42m STATS [0m Rewrites: 17503
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Function/Variadic/foldr.kind2'
     [1;42m STATS [0m Rewrites: 25789
   [1;42m CHECKED [0m All terms checked. took 0.69s


  [1;42m CHECKING [0m The file './Data/Sigma/_.kind2'
     [1;42m STATS [0m Rewrites: 15678
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Sigma/snd.kind2'
     [1;42m STATS [0m Rewrites: 24148
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Sigma/fst.kind2'
     [1;42m STATS [0m Rewrites: 19203
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Empty/_.kind2'
     [1;42m STATS [0m Rewrites: 198
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Empty/absurd.kind2'
     [1;42m STATS [0m Rewrites: 1130
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/to_lower.kind2'
     [1;42m STATS [0m Rewrites: 19867
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Char/between_inclusive.kind2'
     [1;42m STATS [0m Rewrites: 11546
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/to_upper.kind2'
     [1;42m STATS [0m Rewrites: 19867
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/to_decimal.kind2'
     [1;42m STATS [0m Rewrites: 30396
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Char/_.kind2'
     [1;42m STATS [0m Rewrites: 407
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/less_than.kind2'
     [1;42m STATS [0m Rewrites: 10215
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_decimal.kind2'
     [1;42m STATS [0m Rewrites: 13358
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/compare.kind2'
     [1;42m STATS [0m Rewrites: 15630
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/dec_value.kind2'
     [1;42m STATS [0m Rewrites: 15029
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_whitespace.kind2'
     [1;42m STATS [0m Rewrites: 9020
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/Char/equal.kind2'
     [1;42m STATS [0m Rewrites: 10215
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_lower.kind2'
     [1;42m STATS [0m Rewrites: 14802
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_ascii.kind2'
     [1;42m STATS [0m Rewrites: 11446
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/greater_than.kind2'
     [1;42m STATS [0m Rewrites: 10215
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_hex.kind2'
     [1;42m STATS [0m Rewrites: 17170
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/show.kind2'
     [1;42m STATS [0m Rewrites: 16203
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_alphanumeric.kind2'
     [1;42m STATS [0m Rewrites: 24387
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Char/newline.kind2'
     [1;42m STATS [0m Rewrites: 811
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/repeat.kind2'
     [1;42m STATS [0m Rewrites: 17991
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_alphanum.kind2'
     [1;42m STATS [0m Rewrites: 24387
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Char/null.kind2'
     [1;42m STATS [0m Rewrites: 811
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_alpha.kind2'
     [1;42m STATS [0m Rewrites: 21309
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/greater_equal.kind2'
     [1;42m STATS [0m Rewrites: 10215
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/is_upper.kind2'
     [1;42m STATS [0m Rewrites: 14802
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/Char/to_string.kind2'
     [1;42m STATS [0m Rewrites: 9871
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/less_equal.kind2'
     [1;42m STATS [0m Rewrites: 10215
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Char/between.kind2'
     [1;42m STATS [0m Rewrites: 11963
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/to_lower.kind2'
     [1;42m STATS [0m Rewrites: 33186
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/take.kind2'
     [1;42m STATS [0m Rewrites: 18173
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/concat_var.kind2'
     [1;42m STATS [0m Rewrites: 40653
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/split.kind2'
     [1;42m STATS [0m Rewrites: 68982
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/trim_left.kind2'
     [1;42m STATS [0m Rewrites: 23245
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/length.kind2'
     [1;42m STATS [0m Rewrites: 17141
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/to_upper.kind2'
     [1;42m STATS [0m Rewrites: 33186
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/take_while.kind2'
     [1;42m STATS [0m Rewrites: 21091
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/pad_left.kind2'
     [1;42m STATS [0m Rewrites: 27487
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/intersperse.kind2'
     [1;42m STATS [0m Rewrites: 13891
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/split_at.kind2'
     [1;42m STATS [0m Rewrites: 36968
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/String/any.kind2'
     [1;42m STATS [0m Rewrites: 20647
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/span.kind2'
     [1;42m STATS [0m Rewrites: 45566
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/_.kind2'
     [1;42m STATS [0m Rewrites: 8630
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/cons_var.kind2'
     [1;42m STATS [0m Rewrites: 37848
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/contains_char.kind2'
     [1;42m STATS [0m Rewrites: 24925
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/eql_no_sensitive.kind2'
     [1;42m STATS [0m Rewrites: 44317
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/char_any_of.kind2'
     [1;42m STATS [0m Rewrites: 113462
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/Parser/applicative.kind2'
     [1;42m STATS [0m Rewrites: 77132
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/look_ahead.kind2'
     [1;42m STATS [0m Rewrites: 87117
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/fail_on_none.kind2'
     [1;42m STATS [0m Rewrites: 102994
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/take_while.kind2'
     [1;42m STATS [0m Rewrites: 174472
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/alphanumeric.kind2'
     [1;42m STATS [0m Rewrites: 231412
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Data/String/Parser/repeat_while.kind2'
     [1;42m STATS [0m Rewrites: 176555
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/take_while1.kind2'
     [1;42m STATS [0m Rewrites: 209960
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/string.kind2'
     [1;42m STATS [0m Rewrites: 172746
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/to_maybe.kind2'
     [1;42m STATS [0m Rewrites: 73534
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/_.kind2'
     [1;42m STATS [0m Rewrites: 53916
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/any_char.kind2'
     [1;42m STATS [0m Rewrites: 101857
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/Parser/take_custom.kind2'
     [1;42m STATS [0m Rewrites: 85431
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/Test/count_char.kind2'
     [1;42m STATS [0m Rewrites: 230732
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/Test/lambda_calc.kind2'
     [1;42m STATS [0m Rewrites: 548381
   [1;42m CHECKED [0m All terms checked. took 0.23s


  [1;42m CHECKING [0m The file './Data/String/Parser/Error/_.kind2'
     [1;42m STATS [0m Rewrites: 16500
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/Parser/many1.kind2'
     [1;42m STATS [0m Rewrites: 156321
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/sep_by.kind2'
     [1;42m STATS [0m Rewrites: 206390
   [1;42m CHECKED [0m All terms checked. took 0.23s


  [1;42m CHECKING [0m The file './Data/String/Parser/bind.kind2'
     [1;42m STATS [0m Rewrites: 62949
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/alternative.kind2'
     [1;42m STATS [0m Rewrites: 164060
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/run.kind2'
     [1;42m STATS [0m Rewrites: 80142
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/expecting.kind2'
     [1;42m STATS [0m Rewrites: 76194
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/is_some.kind2'
     [1;42m STATS [0m Rewrites: 98244
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/set_custom.kind2'
     [1;42m STATS [0m Rewrites: 65834
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/eof.kind2'
     [1;42m STATS [0m Rewrites: 209468
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/skip_line.kind2'
     [1;42m STATS [0m Rewrites: 237372
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 66307
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/whitespace.kind2'
     [1;42m STATS [0m Rewrites: 230709
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/skip_while.kind2'
     [1;42m STATS [0m Rewrites: 227822
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/Parser/State/_.kind2'
     [1;42m STATS [0m Rewrites: 21395
   [1;42m CHECKED [0m All terms checked. took 0.30s


  [1;42m CHECKING [0m The file './Data/String/Parser/State/take_custom.kind2'
     [1;42m STATS [0m Rewrites: 42451
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/State/forward.kind2'
     [1;42m STATS [0m Rewrites: 30836
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/State/set_custom.kind2'
     [1;42m STATS [0m Rewrites: 25775
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/Parser/State/backtrack.kind2'
     [1;42m STATS [0m Rewrites: 30838
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/empty.kind2'
     [1;42m STATS [0m Rewrites: 82369
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/char.kind2'
     [1;42m STATS [0m Rewrites: 158710
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/fail.kind2'
     [1;42m STATS [0m Rewrites: 58809
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Parser/not.kind2'
     [1;42m STATS [0m Rewrites: 112920
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/repeat_until.kind2'
     [1;42m STATS [0m Rewrites: 174593
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/Parser/u60_decimal.kind2'
     [1;42m STATS [0m Rewrites: 324226
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/String/Parser/skip.kind2'
     [1;42m STATS [0m Rewrites: 75200
   [1;42m CHECKED [0m All terms checked. took 0.42s


  [1;42m CHECKING [0m The file './Data/String/Parser/map.kind2'
     [1;42m STATS [0m Rewrites: 73651
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/Result/_.kind2'
     [1;42m STATS [0m Rewrites: 51669
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/first_of.kind2'
     [1;42m STATS [0m Rewrites: 155014
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/Parser/get_index.kind2'
     [1;42m STATS [0m Rewrites: 59028
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/pure.kind2'
     [1;42m STATS [0m Rewrites: 57158
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/many.kind2'
     [1;42m STATS [0m Rewrites: 141069
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/Parser/between.kind2'
     [1;42m STATS [0m Rewrites: 79576
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/try.kind2'
     [1;42m STATS [0m Rewrites: 92915
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/satisfy.kind2'
     [1;42m STATS [0m Rewrites: 99321
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/Parser/skip_whitespace.kind2'
     [1;42m STATS [0m Rewrites: 234189
   [1;42m CHECKED [0m All terms checked. took 0.19s


  [1;42m CHECKING [0m The file './Data/String/init.kind2'
     [1;42m STATS [0m Rewrites: 11213
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/remove_prefix.kind2'
     [1;42m STATS [0m Rewrites: 40516
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/is_decimal.kind2'
     [1;42m STATS [0m Rewrites: 34096
   [1;42m CHECKED [0m All terms checked. took 0.63s


  [1;42m CHECKING [0m The file './Data/String/compare.kind2'
     [1;42m STATS [0m Rewrites: 29544
   [1;42m CHECKED [0m All terms checked. took 0.18s


  [1;42m CHECKING [0m The file './Data/String/drop.kind2'
     [1;42m STATS [0m Rewrites: 18354
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/chunks_of.kind2'
     [1;42m STATS [0m Rewrites: 46599
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/equal.kind2'
     [1;42m STATS [0m Rewrites: 23993
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/append.kind2'
     [1;42m STATS [0m Rewrites: 12836
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/is_lower.kind2'
     [1;42m STATS [0m Rewrites: 35746
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/find_index.kind2'
     [1;42m STATS [0m Rewrites: 57882
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/trim_right.kind2'
     [1;42m STATS [0m Rewrites: 28741
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/ends_with.kind2'
     [1;42m STATS [0m Rewrites: 29320
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/concat/_.kind2'
     [1;42m STATS [0m Rewrites: 11424
   [1;42m CHECKED [0m All terms checked. took 0.30s


  [1;42m CHECKING [0m The file './Data/String/concat/assoc.kind2'
     [1;42m STATS [0m Rewrites: 42502
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/concat/semigroup.kind2'
     [1;42m STATS [0m Rewrites: 92788
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/concat/nil_right.kind2'
     [1;42m STATS [0m Rewrites: 43828
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/concat/magma.kind2'
     [1;42m STATS [0m Rewrites: 23926
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/concat/monoid.kind2'
     [1;42m STATS [0m Rewrites: 169786
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/concat/identity.kind2'
     [1;42m STATS [0m Rewrites: 82500
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/is_cons.kind2'
     [1;42m STATS [0m Rewrites: 15207
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/is_ascii.kind2'
     [1;42m STATS [0m Rewrites: 32184
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/remove_spaces.kind2'
     [1;42m STATS [0m Rewrites: 28187
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/contains.kind2'
     [1;42m STATS [0m Rewrites: 28589
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/is_hex.kind2'
     [1;42m STATS [0m Rewrites: 37908
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/show.kind2'
     [1;42m STATS [0m Rewrites: 13581
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/capitalize.kind2'
     [1;42m STATS [0m Rewrites: 37572
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/imap.kind2'
     [1;42m STATS [0m Rewrites: 20044
   [1;42m CHECKED [0m All terms checked. took 0.68s


  [1;42m CHECKING [0m The file './Data/String/filter.kind2'
     [1;42m STATS [0m Rewrites: 21747
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/from_list.kind2'
     [1;42m STATS [0m Rewrites: 25042
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/to_char.kind2'
     [1;42m STATS [0m Rewrites: 10019
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/starts_with.kind2'
     [1;42m STATS [0m Rewrites: 22856
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/last.kind2'
     [1;42m STATS [0m Rewrites: 22752
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/new_line.kind2'
     [1;42m STATS [0m Rewrites: 10879
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/find_char_index.kind2'
     [1;42m STATS [0m Rewrites: 46814
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/head.kind2'
     [1;42m STATS [0m Rewrites: 21943
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/all.kind2'
     [1;42m STATS [0m Rewrites: 24742
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/Build/_.kind2'
     [1;42m STATS [0m Rewrites: 9380
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/Build/concat.kind2'
     [1;42m STATS [0m Rewrites: 11268
   [1;42m CHECKED [0m All terms checked. took 0.63s


  [1;42m CHECKING [0m The file './Data/String/Build/to_string.kind2'
     [1;42m STATS [0m Rewrites: 10441
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/Build/many.kind2'
     [1;42m STATS [0m Rewrites: 26967
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/Build/render.kind2'
     [1;42m STATS [0m Rewrites: 29798
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/repeat.kind2'
     [1;42m STATS [0m Rewrites: 20805
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/trim.kind2'
     [1;42m STATS [0m Rewrites: 29994
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/reverse_over.kind2'
     [1;42m STATS [0m Rewrites: 11422
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/flatten.kind2'
     [1;42m STATS [0m Rewrites: 27865
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/format.kind2'
     [1;42m STATS [0m Rewrites: 52903
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/reverse.kind2'
     [1;42m STATS [0m Rewrites: 12672
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/is_nil.kind2'
     [1;42m STATS [0m Rewrites: 15207
   [1;42m CHECKED [0m All terms checked. took 0.67s


  [1;42m CHECKING [0m The file './Data/String/is_upper.kind2'
     [1;42m STATS [0m Rewrites: 35746
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/slice.kind2'
     [1;42m STATS [0m Rewrites: 27184
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/String/map.kind2'
     [1;42m STATS [0m Rewrites: 12128
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/at.kind2'
     [1;42m STATS [0m Rewrites: 30368
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/reverse_n_over.kind2'
     [1;42m STATS [0m Rewrites: 27820
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/pure.kind2'
     [1;42m STATS [0m Rewrites: 9871
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/cut.kind2'
     [1;42m STATS [0m Rewrites: 16553
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/fold.kind2'
     [1;42m STATS [0m Rewrites: 14559
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/tail.kind2'
     [1;42m STATS [0m Rewrites: 10044
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/replace.kind2'
     [1;42m STATS [0m Rewrites: 47690
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/join.kind2'
     [1;42m STATS [0m Rewrites: 42433
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/drop_while.kind2'
     [1;42m STATS [0m Rewrites: 20683
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/String/foldl.kind2'
     [1;42m STATS [0m Rewrites: 14336
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/intercalate.kind2'
     [1;42m STATS [0m Rewrites: 40481
   [1;42m CHECKED [0m All terms checked. took 0.70s


  [1;42m CHECKING [0m The file './Data/String/pad_right.kind2'
     [1;42m STATS [0m Rewrites: 20666
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/foldr.kind2'
     [1;42m STATS [0m Rewrites: 14322
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/String/pop.kind2'
     [1;42m STATS [0m Rewrites: 36840
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/String/to_list.kind2'
     [1;42m STATS [0m Rewrites: 24890
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/set_bit.kind2'
     [1;42m STATS [0m Rewrites: 2019
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/is_even.kind2'
     [1;42m STATS [0m Rewrites: 10129
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/between_inclusive.kind2'
     [1;42m STATS [0m Rewrites: 9220
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/bitwise_complement.kind2'
     [1;42m STATS [0m Rewrites: 1527
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/msb.kind2'
     [1;42m STATS [0m Rewrites: 15460
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/_.kind2'
     [1;42m STATS [0m Rewrites: 407
   [1;42m CHECKED [0m All terms checked. took 0.42s


  [1;42m CHECKING [0m The file './Data/U60/is_odd.kind2'
     [1;42m STATS [0m Rewrites: 7675
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/is_zero.kind2'
     [1;42m STATS [0m Rewrites: 6354
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/if.kind2'
     [1;42m STATS [0m Rewrites: 2835
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/less_than.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/compare.kind2'
     [1;42m STATS [0m Rewrites: 13544
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/mul.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/equal.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/to_bits.kind2'
     [1;42m STATS [0m Rewrites: 15205
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/greater_than.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/add.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/show.kind2'
     [1;42m STATS [0m Rewrites: 17897
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/bitwise_xor.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/shift_left.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/bitwise_or.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/add/overflowing.kind2'
     [1;42m STATS [0m Rewrites: 24434
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/div_mod.kind2'
     [1;42m STATS [0m Rewrites: 15896
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/mul/carrying.kind2'
     [1;42m STATS [0m Rewrites: 54126
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/max_val.kind2'
     [1;42m STATS [0m Rewrites: 407
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 6354
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/get_bit.kind2'
     [1;42m STATS [0m Rewrites: 1862
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/bitwise_and.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/to_nat.kind2'
     [1;42m STATS [0m Rewrites: 8558
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/read_decimal.kind2'
     [1;42m STATS [0m Rewrites: 51126
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/or.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/range.kind2'
     [1;42m STATS [0m Rewrites: 29741
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/sub/saturating.kind2'
     [1;42m STATS [0m Rewrites: 5704
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/sub/saturated.kind2'
     [1;42m STATS [0m Rewrites: 13832
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/sub.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/greater_equal.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/max.kind2'
     [1;42m STATS [0m Rewrites: 5256
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/lsb.kind2'
     [1;42m STATS [0m Rewrites: 19134
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/less_equal.kind2'
     [1;42m STATS [0m Rewrites: 8129
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/spaceship.kind2'
     [1;42m STATS [0m Rewrites: 11563
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/div.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/between.kind2'
     [1;42m STATS [0m Rewrites: 9220
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/U60/to_u120.kind2'
     [1;42m STATS [0m Rewrites: 7549
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/clear_bit.kind2'
     [1;42m STATS [0m Rewrites: 2773
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/for.kind2'
     [1;42m STATS [0m Rewrites: 10131
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/min.kind2'
     [1;42m STATS [0m Rewrites: 13543
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/Map/_.kind2'
     [1;42m STATS [0m Rewrites: 28895
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/is_bit_set.kind2'
     [1;42m STATS [0m Rewrites: 10075
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/U60/mod.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/U60/shift_right.kind2'
     [1;42m STATS [0m Rewrites: 1579
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Map/length.kind2'
     [1;42m STATS [0m Rewrites: 43794
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Map/_.kind2'
     [1;42m STATS [0m Rewrites: 28895
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Map/new.kind2'
     [1;42m STATS [0m Rewrites: 30216
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Map/update.kind2'
     [1;42m STATS [0m Rewrites: 75324
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Map/del.kind2'
     [1;42m STATS [0m Rewrites: 58713
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Map/set.kind2'
     [1;42m STATS [0m Rewrites: 73940
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Map/mut.kind2'
     [1;42m STATS [0m Rewrites: 83585
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Map/got.kind2'
     [1;42m STATS [0m Rewrites: 91841
   [1;42m CHECKED [0m All terms checked. took 0.17s


  [1;42m CHECKING [0m The file './Data/Map/get.kind2'
     [1;42m STATS [0m Rewrites: 54811
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Map/app.kind2'
     [1;42m STATS [0m Rewrites: 68106
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Either/_.kind2'
     [1;42m STATS [0m Rewrites: 17593
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Either/if.kind2'
     [1;42m STATS [0m Rewrites: 22844
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Either/bind.kind2'
     [1;42m STATS [0m Rewrites: 24932
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Either/lft.kind2'
     [1;42m STATS [0m Rewrites: 63717
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Either/is_left.kind2'
     [1;42m STATS [0m Rewrites: 26151
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Either/is_right.kind2'
     [1;42m STATS [0m Rewrites: 26151
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Either/swap.kind2'
     [1;42m STATS [0m Rewrites: 23554
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Either/map.kind2'
     [1;42m STATS [0m Rewrites: 24938
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Either/rgt.kind2'
     [1;42m STATS [0m Rewrites: 63732
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Unit/_.kind2'
     [1;42m STATS [0m Rewrites: 3412
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Unit/show.kind2'
     [1;42m STATS [0m Rewrites: 22630
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/_.kind2'
     [1;42m STATS [0m Rewrites: 11195
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/if.kind2'
     [1;42m STATS [0m Rewrites: 15246
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/default.kind2'
     [1;42m STATS [0m Rewrites: 14340
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/bind.kind2'
     [1;42m STATS [0m Rewrites: 16089
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/is_some.kind2'
     [1;42m STATS [0m Rewrites: 18674
   [1;42m CHECKED [0m All terms checked. took 0.22s


  [1;42m CHECKING [0m The file './Data/Maybe/equal.kind2'
     [1;42m STATS [0m Rewrites: 22662
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/extract.kind2'
     [1;42m STATS [0m Rewrites: 16129
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/show.kind2'
     [1;42m STATS [0m Rewrites: 44130
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/filter.kind2'
     [1;42m STATS [0m Rewrites: 25043
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/to_bool.kind2'
     [1;42m STATS [0m Rewrites: 20071
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/unfold.kind2'
     [1;42m STATS [0m Rewrites: 20430
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/or.kind2'
     [1;42m STATS [0m Rewrites: 14374
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/flatten.kind2'
     [1;42m STATS [0m Rewrites: 14308
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/Theorems/is_some.kind2'
     [1;42m STATS [0m Rewrites: 27744
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/Theorems/none_is_not_some.kind2'
     [1;42m STATS [0m Rewrites: 51933
   [1;42m CHECKED [0m All terms checked. took 0.16s


  [1;42m CHECKING [0m The file './Data/Maybe/Theorems/some_is_not_none.kind2'
     [1;42m STATS [0m Rewrites: 51926
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/Theorems/injective.kind2'
     [1;42m STATS [0m Rewrites: 43130
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/to_string.kind2'
     [1;42m STATS [0m Rewrites: 21670
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/choice.kind2'
     [1;42m STATS [0m Rewrites: 30576
   [1;42m CHECKED [0m All terms checked. took 0.20s


  [1;42m CHECKING [0m The file './Data/Maybe/map.kind2'
     [1;42m STATS [0m Rewrites: 16239
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/pure.kind2'
     [1;42m STATS [0m Rewrites: 13139
   [1;42m CHECKED [0m All terms checked. took 0.14s


  [1;42m CHECKING [0m The file './Data/Maybe/try.kind2'
     [1;42m STATS [0m Rewrites: 30633
   [1;42m CHECKED [0m All terms checked. took 0.15s


  [1;42m CHECKING [0m The file './Data/Maybe/is_none.kind2'
     [1;42m STATS [0m Rewrites: 18674
   [1;42m CHECKED [0m All terms checked. took 0.14s

