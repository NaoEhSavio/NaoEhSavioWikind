(List.map [] f) = []
(List.map (Data.List.cons head tail) f) = (Data.List.cons (f head) (List.map tail f))

(List.concat [] ys) = ys
(List.concat (Data.List.cons head tail) ys) = (Data.List.cons head (List.concat tail ys))

(List.length []) = 0
(List.length (Data.List.cons head tail)) = (+ 1 (List.length tail))

(Sum [])    = 0
(Sum (Data.List.cons head tail)) = (+ head (Sum tail))

(Loto []) = []
(Loto (Data.List.cons head tail)) = 
	let h = (Sum head); 
	let t = (Loto tail); 
	(Data.List.cons h t) 


(Sort Data.List.nil)         = Data.List.nil
(Sort (Data.List.cons x xs)) = (Insert x (Sort xs))

// Insert : U60 -> Data.List -> Data.List
(Insert v Data.List.nil)         = (Data.List.cons v Data.List.nil)
(Insert v (Data.List.cons x xs)) = (SwapGT (> v x) v x xs)

// SwapGT : U60 -> U60 -> U60 -> Data.List -> Data.List
(SwapGT 0 v x xs) = (Data.List.cons v (Data.List.cons x xs))	
(SwapGT 1 v x xs) = (StrictCons x (Insert v xs))
  (StrictCons e t) = (Data.List.cons e t)

(List.count (Data.List.cons head tail) cond) = (Data.List.count.aux (Data.List.cons head tail) cond (== cond (+ 1 head)) 0)

(Data.List.count.aux [] cond 0 num) = (Pair num [])
(Data.List.count.aux (Data.List.cons head tail) cond 0 num) = (Data.List.count.aux tail cond (== head (+ 1 cond)) (+ 1 num)) 
// (Data.List.count.aux lst cond n num) = (Pair num lst)
(Data.List.count.aux lst cond n num) = (Pair num lst)

(Pair.fst (Pair a b)) = a

(Pair.snd (Pair a b)) = b

(Porcent []) = []
(Porcent (Data.List.cons head tail)) = 
	let eq = (List.count (Data.List.cons head tail) head);
	let hd = (Data.List.cons head [(Pair.fst eq)]);
	let tl = (Porcent (Pair.snd eq));
	(Data.List.cons hd tl) 
// 	let eql = (List.length (Data.List.u60.filter @a (== head a) (Data.List.cons head tail) )); 
// 	let par = (Data.List.cons head (Data.List.cons eql (Data.List.cons por (Data.List.nil)))); 
// 	let del = (Data.List.delete_all head (Data.List.cons head tail)); 
// 	let res = (Porcent.go del len); 
// 	(Data.List.cons par res)

// def combinations(lst, k):
//     if k == 0:
//         return [[]]
//     elif len(lst) < k:
//         return []
//     else:
//         first = lst[0]
//         rest = lst[1:]
//         combs_without_first = combinations(rest, k)
//         combs_with_first = combinations(rest, k-1)
//         combs_with_first = add_first_to_combinations(first, combs_with_first)
//         return combs_without_first + combs_with_first

// def add_first_to_combinations(first, combs):
//     if not combs:
//         return []
//     else:
//         first_comb = [first] + combs[0]
//         rest_combs = add_first_to_combinations(first, combs[1:])
//         return [first_comb] + rest_combs

// (Combinations lst k) = (Combinations.aux lst k (List.length lst) (< (List.length lst) k))
// (Combinations.aux lst 0 len 0) = [[]]
// (Combinations.aux lst k 0 0) = []
// (Combinations.aux (Data.List.cons head tail) k len 0) = 
// 	let l = (- len 1);
// 	let v = (< l k);
// 	let hd = (Combinations.aux tail k l v); 
// 	let tl = (Combinations.aux tail (- k 1) l v); 
// 	let mp = (Combinations.auy head tl);
// 	(List.concat mp hd)
// (Combinations.aux lst k len v) = []

// (Combinations.auy c []) = [] 
// (Combinations.auy c (Data.List.cons head tail)) = 
// 	let cc = (Data.List.cons c [head]);
// 	let ct = (Combinations.auy c tail);
// 	(List.concat cc ct)

//     else:
//         first_comb = [first] + combs[0]
//         rest_combs = add_first_to_combinations(first, combs[1:])
//         return [first_comb] + rest_combs

// 285682321
// 252459750
(Combinations lst k) = (Combinations.aux lst k (+ 1 (List.length lst)) 0)
(Combinations.aux lst 0 len 0) = [[]]
// (Combinations.aux lst k 0 0) = []
(Combinations.aux (Data.List.cons head tail) k len 0) = 
	let l = (- len 1);
	let v = (< l k);
	let hd = (Combinations.aux tail k l v); 
	let tl = (Combinations.aux tail (- k 1) l v); 
	let mp = (List.map tl (@x (Cons head x)));
	(List.concat mp hd)
(Combinations.aux lst k len v) = []

 
// Strict constructors
(Cons a b) = (Data.List.cons a b)

// (Main) = ( ((Loto (Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 15))))
// (Main) = ((List.length (Sort (Loto (Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 15)))))
// (Main) = ((List.length (( (Combinations [1,2,3,4,5,6,7,8,9,10] 5)))))

// (Main) = (((Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] 10))) 
// (Main) = (List.length (Loto (Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25] 15)))
// (Main) = (List.length (Loto (Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 15)))
(Main) = (List.length (Porcent (Loto (Combinations [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25] 15))))